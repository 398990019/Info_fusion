[
    {
        "source": "Yuque",
        "title": "梁建輝",
        "slug": "oc41m1nlttrsp9ms",
        "url": null,
        "published_at": "2025-09-28T14:34:09.000Z",
        "content": "我先在这里占一下位置，在上次的实践组会议中，cac已经说过了可能学习压力是我面对的一个其中困难之一,现在就已经来了,最近发现自己在物理课上已经完全不知道老师在讲什么（~~当然老师讲得很好~~），微积分也是一知半解，我目前会优先补充一下自己的知识，当然国庆节我也是很有时间，我觉得肯定能够充分完成各种任务，我全程八天也是在学校的。~~在上物理课的时候已经感觉到崩溃~~😭\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章作者梁建輝坦诚表达了自己在大学初期面临的学习压力，尤其是在物理和微积分课程中感到理解困难，甚至出现情绪崩溃。尽管承认挑战巨大，他仍表现出积极应对的态度，计划利用国庆假期在校集中补足知识短板，并对完成任务抱有信心。文中透露出学业压力与自我调节之间的张力，也反映出新生适应阶段的典型困境。",
            "cross_disciplinary_insights": [
                {
                    "domain": "神经科学",
                    "analysis": "作者描述的“完全不知道老师在讲什么”和“一知半解”可能反映了认知负荷超载现象。当新信息超出工作记忆容量或缺乏已有知识框架支撑时，学习效率会急剧下降，甚至引发焦虑和情绪崩溃。这提示教育设计需考虑认知负荷理论，分阶段构建知识脚手架。",
                    "connection": "认知负荷理论（Cognitive Load Theory）"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者在困境中仍坚持“肯定能够完成任务”，体现了一种存在主义式的自我承诺——即使面对无意义感或混乱（如课堂内容无法理解），仍通过行动赋予自身处境以意义。这种态度呼应了萨特‘人是其行动的总和’的观点。",
                    "connection": "萨特的存在主义（Existentialism）"
                }
            ],
            "open_question": "在高等教育日益强调自主学习的背景下，如何从制度设计上帮助学生在认知过载与心理压力之间建立更具韧性的调节机制？"
        },
        "processed_at": "2025-09-29T10:51:27.144594",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "实践操作类-信息推送-蒋泓宇",
        "slug": "ptfu7n96ff2e8c1l",
        "url": null,
        "published_at": "2025-09-29T01:23:24.000Z",
        "content": "- [ ] 介绍一下如何使用fish进行便捷的信息推送\n- [ ] 优化fish的交互，尤其是连续对话\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章聚焦于利用fish shell提升信息推送的便捷性，并探讨如何优化其在连续对话场景下的交互体验。核心在于通过配置和脚本定制，使fish不仅作为命令行工具，更成为高效、智能的信息交互接口。虽然内容未完整展开，但其方向指向人机交互效率与个性化自动化之间的平衡。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "从人机交互与智能代理角度看，优化fish的连续对话能力实质是在构建轻量级对话系统，强调上下文感知与状态保持。这涉及命令行环境下的对话管理、意图识别与响应生成，虽不依赖大型语言模型，却体现了交互式系统设计的核心挑战。",
                    "connection": "该实践与‘反应式系统’（Reactive Systems）设计理念相呼应，强调响应性、弹性与消息驱动，是构建高效终端交互界面的基础范式。"
                },
                {
                    "domain": "语言学",
                    "analysis": "fish的连续对话优化可视为一种受限语境下的会话建模。用户与shell之间的交互遵循特定话语结构与语用规则，其流畅性依赖于对会话连贯性（coherence）和话轮转换（turn-taking）机制的模拟，即便在非自然语言环境中亦体现语言交际的基本原则。",
                    "connection": "这与‘会话分析’（Conversation Analysis）中的相邻对（adjacency pairs）概念相关，如命令-执行、查询-响应构成基本交互单元，优化即在强化此类结构的可预测性与效率。"
                }
            ],
            "open_question": "在命令行环境中模拟连续对话时，如何在不引入复杂自然语言处理模型的前提下，有效建模用户意图的动态演变与上下文依赖？"
        },
        "processed_at": "2025-09-29T10:51:33.515884",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "非纯技术类—潘文鸿",
        "slug": "ko1fzv183sn5ok4m",
        "url": null,
        "published_at": "2025-09-28T14:45:03.000Z",
        "content": "#### 一、回顾需求\n以下是在会议过程中大家集思广益提出的需求，我就直接搬运过来了。\n\n> + 消息推送**<font style=\"color:#DF2A3F;\">①</font>**\n>     - 满足个性化需求（如：定制范围、定制内容、跟踪某篇文档）\n>     - 筛除一些信息密度较低的推送内容\n>     - 推送渠道尽量整合到用户常用的工具中，尽量不要让用户培养新的行为习惯\n>     - 根据推送内容的性质，自定义推送频率\n>     - 对推送内容进行简单的AI加工（如总结或者增加推荐机制）\n>     - 自定义推送到用户的时间段\n>     - 对于关键信息（如DDL、通知公告类，能有单独推送机制）\n>     - 探索文档推送频率和文档发布时间的一种动态关系\n> + 规范文档的写作方式和风格**<font style=\"color:#DF2A3F;\">②</font>**\n>     - 尽量少的去做约束，但是约束的点可以覆盖较大的需求\n>     - 探索是否有技术工具和手段完成用户不愿意完成的点\n>         * 帮助用户设计一个符合自身需求的Prompt，用于将原始文档中的有用的信息（按个人实际需求）提取出来\n>     - 探讨规范文档命名方式的作用，并简单设计\n> + 强化组的概念，加强组内的合作和交流**<font style=\"color:#DF2A3F;\">③</font>**\n>     - 思考如何定义组\n>     - 需要一个固定的交互机制\n>     - 定义组的协作模式\n>     - 交流的形式要尽可能聚焦，没有其他信息干扰\n>     - 丰富交流结构（1对1,1对多，多对多，及时型、非及时型）\n> + 缺少一个整体的规划，比如思维导图**<font style=\"color:#DF2A3F;\">④</font>**\n>     - 重复的工作太多，尽量不要让大家做同一件事\n>     - 还需要考虑组间交互\n>     - 希望不同人做的不同任务之间有较强的关联性\n>     - 谁来规划\n>     - 如何评价规划是否合理，规划的质量怎么尽可能客观评价\n>     - 要考虑规划之后的组内交互效率（即规划粒度的问题）\n> + 需要一种精准的检索工具**<font style=\"color:#DF2A3F;\">⑤</font>**\n>     - 怎么实现关键词、标签\n>     - 搭建推荐系统\n>\n\n#### 二、具体分析\n从宏观的层面，我希望能够对问题进行分类，在经过二次分类之后，很多问题能够被更好地解决。基于核心目标是要完成协作，那么从影响因素的角度，我希望将问题先简单分为两类：平台主导的问题和人主导的问题两类。当然，这两种问题的分类并不是说泾渭分明，而是说平台自身局限带来的问题也能够通过人的参与来解决，同时，人的问题也可以通过技术来简化。\n\n##### 平台导向的问题——①⑤\n平台导向的问题绝大部分是受制于语雀平台本身的功能局限，因此需要一定技术的参与。但受制于本人的技术水平，在与ai奋战数小时后仅产出了一个智障程序。\n\n##### 人导向的问题——②③④\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章围绕协作平台（如语雀）在实际使用中暴露出的五大核心需求展开：个性化消息推送、文档写作规范、强化小组协作、整体任务规划与精准检索工具。作者将问题分为平台导向（技术限制）与人导向（协作机制）两类，强调技术与人的互动可互补解决协作效率问题。尽管受限于技术能力，作者仍试图通过AI等手段优化信息处理与交互结构，体现出对高效知识协作系统的探索。",
            "cross_disciplinary_insights": [
                {
                    "domain": "社会学",
                    "analysis": "文章揭示了数字协作环境中群体互动的结构性困境：缺乏清晰的角色定义、交流机制与任务关联性，导致协作效率低下。这反映了现代社会中组织协作从‘科层制’向‘网络化协作’转型时的典型张力——既要灵活性，又需秩序。",
                    "connection": "布迪厄的‘社会场域’理论：协作平台可视为一个知识生产的场域，其中规则（如文档规范、推送机制）构成惯习，而成员通过策略性行动争夺信息可见性与话语权。"
                },
                {
                    "domain": "计算机科学",
                    "analysis": "文章提出的个性化推送、AI摘要、精准检索等需求，本质上是对信息过载问题的技术回应，涉及推荐系统、自然语言处理与人机交互的交叉。尤其强调‘不改变用户习惯’的设计哲学，体现了以用户为中心的系统思维。",
                    "connection": "信息检索中的‘相关性反馈’（Relevance Feedback）机制：用户对推送内容的隐式/显式反馈可用于动态优化后续推荐，与文中‘动态关系’‘自定义频率’等需求高度契合。"
                }
            ],
            "open_question": "在知识协作系统中，如何设计一种既能尊重个体认知差异（如信息处理偏好、工作节奏），又能促进集体智能涌现的‘自适应协作架构’？"
        },
        "processed_at": "2025-09-29T10:51:35.590964",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "日常学习类-数学分支-邓鸿瑞",
        "slug": "kkblpgfs65onx3ov",
        "url": null,
        "published_at": "2025-09-28T15:54:26.000Z",
        "content": "## 行前有所思\n~~（当你开始做某件事情前，或许会有一些思考）~~\n\n## 我在做什么\n~~（点明你选择的类、分支，你的学习方向，你有哪些操作）~~\n\n## 我提出或遇到的问题\n~~（包括描述、记录、尝试解决的过程，不用担心，大家都从一无所知走来，可以大胆记录）~~\n\n## 一些总结又或许感悟\n~~（比较自由，也可以是你想与大家分享的内容）~~\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章以结构化模板引导学习者在数学学习过程中进行元认知反思，包括行动前的思考、当前学习方向的明确、问题的提出与尝试解决，以及阶段性总结与感悟。其核心在于强调学习不仅是知识积累，更是自我觉察与思维过程的记录，鼓励从无知出发，通过持续反思构建个人知识体系。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "该文章体现了一种苏格拉底式的‘省察生活’精神，强调在行动前进行反思，并在学习过程中不断追问自身认知状态。这种对思维过程的自觉审视，契合哲学中对‘认识你自己’的追求。",
                    "connection": "与笛卡尔的‘我思故我在’中的反思性意识概念相呼应，强调思维活动本身作为知识建构的起点。"
                },
                {
                    "domain": "计算机科学",
                    "analysis": "文章结构类似于算法开发中的‘设计-实现-调试-复盘’循环，尤其强调问题记录与迭代改进，这与软件工程中的敏捷开发和元编程思想有内在一致性。",
                    "connection": "与‘元认知架构’（Metacognitive Architecture）相关，即系统对自身推理过程进行监控与调整的能力，常见于智能体设计中。"
                }
            ],
            "open_question": "在数学学习中引入结构化反思模板，是否可能改变学习者的认知模式？这种模式能否被形式化并嵌入智能教育系统，以促进更深层次的理解？"
        },
        "processed_at": "2025-09-29T10:51:36.213145",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "实践操作类-信息提取-邹少乾",
        "slug": "xgktvul5mh9uweq3",
        "url": null,
        "published_at": "2025-09-29T00:06:48.000Z",
        "content": "# 0 前言\n上周的项目中正好做到信息处理模块就没往下做了，因此可以接续上次项目继续深入下去。\n\n等我作业都写完了，再来看看目前的问题以及方向。\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章简要回顾了作者在上周项目中进行到信息处理模块后中断的情况，并计划在完成作业后继续深入探讨当前面临的问题与研究方向。内容虽简短，但体现出对信息提取任务的持续关注与实践导向的研究态度，强调在实际项目中迭代推进技术实现。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章体现了典型的工程迭代思维，即在项目实践中逐步推进模块开发，并在中断后计划复盘与深化。这种模式契合软件工程中的敏捷开发理念，也反映了信息提取作为自然语言处理子任务在实际系统中的集成挑战。",
                    "connection": "信息提取（Information Extraction）是自然语言处理中的核心任务之一，涉及命名实体识别、关系抽取等技术，与结构化知识构建密切相关。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者在行动中暂停、反思并计划重新介入的过程，暗合现象学中‘悬置—反思—再介入’的认识路径。这种对实践过程的自我觉察，体现出主体在技术活动中对自身认知边界的探索。",
                    "connection": "海德格尔的‘此在’（Dasein）概念强调人在世界中的实践性存在，技术活动并非纯粹工具性，而是揭示世界的一种方式，与作者在项目中不断回溯与推进的行为形成呼应。"
                }
            ],
            "open_question": "在人工智能系统进行信息提取的过程中，如何界定‘理解’与‘模式匹配’之间的界限？这种界限的模糊是否反映了人类认知本身的某种本质特征？"
        },
        "processed_at": "2025-09-29T10:51:45.595706",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "非纯技术类-郭亚敏",
        "slug": "ticam4c9r05k4gbv",
        "url": null,
        "published_at": "2025-09-28T23:11:46.000Z",
        "content": "## 行前有所思\n<font style=\"color:rgb(28, 31, 35);\">本周实践组的任务是这个：对于关键信息（如DDL、通知公告类，能有单独推送机制）</font>\n\n<font style=\"color:rgb(28, 31, 35);\">所以我们来试试用WHW来过一遍这个点</font>\n\n<font style=\"color:rgb(28, 31, 35);\">对的，应该是WHW黄金圈法则，上周线下会我华丽丽的给讲反了，变成了WWH...</font>\n\n## 我在做什么\n### 什么是WHW\n初次接触到这个概念是在TED上，那是一个很古早的视频\n\n想看可以看看，18mins，如果觉得太长可以跳过，后面有短一些的解读\n\n[bilibili](https://player.bilibili.com/player.html?bvid=BV1N24y1m738&autoplay=0)\n\n找了一个解读WHW的视频，个人觉得说的还不错\n\n![做什么？如何做？为什么？](https://cdn.nlark.com/yuque/0/2025/png/294617/1759102076113-eb5f6a95-4b75-411d-a477-4ec7833217a9.png)\n\n无论什么专业，每个人都能轻松的说出你在学什么\n\n只有有一小部分人知道如何学的很好\n\n但是这些都是如何做的方法和途径，为什么你要学这个？这个问题的答案不像做什么那么明显\n\n为什么是指你的目的是什么？你的动机是什么？你的信仰是什么？你为什么而学习？为什么NOVA会存在？为什么你要早起？为什么你每周都要努力？为什么...\n\n从做什么开始，是一种大众模式，由外而内，这是大多数普通人的思考和行为模式\n\n我们告诉别人自己自己正在学习什么，有时候会通过文档说明我们是怎么做的。可是我们极少会说为什么要这么做。由内而外，从为什么开始，这是从模糊理念到清晰世界的过程，这是少数人才会用思考和行为模式。\n\n> 从为什么出发不是成功的唯一途径。却是保证持久成功和更好的融合创新性和灵活性的唯一途径。当为什么变得模糊，就会使得保持成长，忠诚以及推动最原始的成功变得困难。一切从为什么开始，不忘初心，方得始终。\n>\n\n[bilibili](https://player.bilibili.com/player.html?bvid=BV1Bq4y1178x&autoplay=0)\n\n### 在WHW体系下看任务\n<font style=\"color:rgb(28, 31, 35);\">因为NOVA是一个有追求的、需要协作的团队，目前NOVA使用的语雀平台的协作存在一些问题，所以我们要探索一种优化方式，这就是WHY</font>\n\n<font style=\"color:rgb(28, 31, 35);\">那么哪些点可以优化呢，这就是HOW，这里暂时仅讨论关键信息推送这一件事</font>\n\n<font style=\"color:rgb(28, 31, 35);\">周六线下讨论的时候，我们对关键信息有一个初步的定义，比如DDL、通知公告、要求、时间地点等</font>\n\n<font style=\"color:rgb(28, 31, 35);\">且大家希望这一类关键信息应该和其他信息不一样，能有一个单独的推送机制</font>\n\n![画板](https://cdn.nlark.com/yuque/0/2025/jpeg/22463641/1759107932381-09b2dd8f-cf08-475b-98c2-4b872ab8542c.jpeg)\n\n一个简单的展开：\n\n#### 关键信息定义\n+ 发布主体的权威性\n    - 比如关键信息可能仅存在于CAC或者社长/前社长或者未来的小组长的文档中\n+ 信息价值的功能性\n    - 指令：明确要求采取特定行为\n    - 保障：明确协作规则或边界\n+ 时间维度的有效性\n    - 上周的活动通知可不再视为关键信息\n+ 协作影响的全局性\n    - 面向NOVA整体而不是面向个人的信息\n    - 面向特定类的信息\n+ 呈现形式的明确性\n    - 可能存在协商性信息（如大家愿不愿意，要不要的字眼）\n\n所以基于上述定义，我们可能会脑补出以下一些关键信息\n\n1. 任务推进类：DDL、交付要求、成果验收标准；\n2. 协同组织类：会议（时间 / 地点 / 议程 / 参会要求）、线下活动（集合时间 / 地点 / 流程）；\n3. 规则规范类：文档格式模板、内容审核标准、平台使用权限说明；\n4. 资源同步类：协作工具、模式更新通知、核心参考资料、风险（红包）预警\n5. 其他...\n\n#### 获取方式\n1. 语雀提供了API（要看看这些API都能获得哪些信息）\n2. 既然人能访问，那么爬虫就可以\n3. 貌似学长正在研究基于浏览器插件的[智能体](https://nova.yuque.com/rhg37y/feedback/praocxr9qbrxcwhp)，期待一下\n4. 实在不行手工操作干吧\n5. 自己不想干找人干吧\n\n事实上除了获取方式，还有获取频率这个问题需要我们考虑\n\n#### 加工技术\n用户是挑剔的，严重挑剔的\n\n![挑剔的用户](https://cdn.nlark.com/yuque/0/2025/png/294617/1759106283758-fa4333de-ed6f-4a98-b057-670697fa38b8.png)\n\n+ 把原始的，长篇大论的文档凝练成很精简的内容，精简到正好包含我所需要的所有信息，所以要狠狠的去调Prompt，甚至需要考虑传统的基于规则的处理结合LLM\n+ 推送的时间和频率都要有讲究，所以加工信息的时候必须额外考虑时间戳\n+ 如果用户嫌弃你的总结，你还需要给他们一个源，能够溯源的东西，所以必须再附加一个来源的存储（如URL或者图片或者音频）\n+ 还需要考虑特殊情况，比如因临时性冲突，调整活动时间地点，这种信息不仅仅是要加工后送达，可能还要额外附加一些信息，用来提醒用户覆盖旧的信息源\n+ 除了这些需求上的事情，我们还需要思考一些额外的内容，比如数据存储\n    - 数据存储的工具：数据库？word/pdf？单独写入某个语雀文档？\n    - 存储数据的格式：原始数据肯定是要存一份的，那需不需要加工成某些结构性更强的东东，比如json、甚至是不是可以存向量，或者存关系（图数据库）\n\n#### 推送手段\n<font style=\"color:rgb(28, 31, 35);\">用户是挑剔的，严重挑剔的</font>\n\n所以我们要考虑推送的渠道、推送的频率、推送的个性化\n\n渠道上，最好不要折腾用户再安装或者再点开什么东东，能集成在用户现在手机使用的某个生态里是最优选择\n\n+ 微信生态圈\n    - 建一个群BOT，但是不能全员禁言，群太水了咋整\n    - 群公告要是有用，AMA群就不会有那么多红包了\n    - 那要不BOT做成可以@人的？\n    - 或者微信绑定邮箱，用邮件推送\n    - 也可以自己做一个服务号，可以一天主动推一次，或者用户点开查看\n+ QQ生态圈\n    - 搞个全员禁言的消息通知群，但是折腾这么半天，不如找个人直接在这个群里发通知\n    - 要不搞个BOT？BOT可以私戳发消息吗？\n+ 手机其他生态圈\n    - 短信？\n    - 找个up主定期发小视频？\n    - 搞个H5页面出来，绑在某个按钮上，或者直接浏览器访问？\n    - ~~单独做个APP？ohno，还有安卓和苹果两套开发工作量~~\n\n\n\n其实延伸到这里，我们会发现问题变的越来越复杂了\n\n怎么决策，其实这不是HOW层面的事情，我理解WHY层面的某些东东应该能够辅助进行决策\n\n比如我在思考，NOVA需要大家共享协作\n\n是不是我们可以不通过纯技术手段来在特殊消息推送这件事上进行一种加强\n\n我们可以建立一个小组，大家轮流做组长，然后组长有一个任务就是负责一段时间关注这个特殊信息，然后他负责告知所有的组员，搞个几轮，这个组内成员就会慢慢相互熟悉了（不一定是正向熟悉，哪位轮值组长忘记通知了，就会被大家心理上拉黑，真不靠谱呵呵呵）\n\n比如我在思考，NOVA需要培养团队的意识\n\n那是不是这件事就别做了，红包刺激是个不错的ideal，慢慢的大家总会习惯的  \n软件学院以前所有的通知都是发到软件学院自己搭建的一套邮件系统中，你爱看不看，我反正通知了，等大家错过了几次四六级或者奖学金评选，自然就养成了天天扫一眼邮箱的习惯，嗯，没毛病\n\n其实这就解释了WHY和HOW的关系，认知层次高的人，会在需要判断决策选择的时候，思考WHY层面的一些内容，然后他们可能会很迅速的做出一些决定。往往事后来看，这个决定是符合大的发展方向和规律的，是正确的选择。而仅停留在HOW层面或者更低的WHAT层面，就会出现努力但是方向错误的悲剧\n\n### 延伸到WHAT TO DO\nHOW讲了那么多，WHAT就不一一的展开讲了\n\n就讲第一条，通过Python获取语雀Token，然后拿到文档数据\n\n作为非纯技术组，我坚定的去抱实践组的大腿\n\n代码呢，让我看看谁的文档里有代码，拿过来用用（口水直流）\n\n其实跑通代码这件事的难度还是比较低的，如果我们一直关注其他同学前两周的成果\n\n那么从Python的安装，IDE的使用，包的安装、环境配置，AI辅助编程和Debug，虽然我没有学过Python，但是有这些文档的加持，其实就算不是做技术的我们，也是可以复现这个功能的\n\n这就是NOVA学习的模式，很高效，但是需要你真的动脑子去思考\n\n非纯技术类学习技术的目标和实践组不太一样，我可能更倾向于知道\n\n+ 可行性\n+ 边界\n+ 工具\n+ 现成的开源代码\n\n然后自己去实践一下看看，行不行，是不是可以，还能怎么样\n\n## 我提出或遇到的问题\n实践组啥时候可以把东西做出来啊...\n\n我学习技术的边界到底在哪里呢？\n\n还有别的好玩的解法不？\n\n这种信息聚合的东西，未来真的会有市场吗，你们愿意花多少钱买一个DDL推送？\n\n站在社团角度，这东西做出来之后，会不会反而让你们依赖它，从而丧失了主动性？\n\n如果这玩意中间出了啥差错，且没有被及时发现，某天CAC一个人站在501一个人都没等到，这个锅谁来背？\n\n非纯技术类的娃们，你们看懂了没有，给你们布置的任务一直都很虚，但是从虚到实，是需要你们自己下钻进去的\n\n某种程度上来说，非纯组的要求比实践组还要高，因为技术是可以用时间来换的。但是思维不是，18年的时间都差不多，思维层面的差异是巨大的，这背后究竟是什么原因？NOVA可以用什么方法来快速弥补这种差异呢？\n\n谷老师真是闲啊，全程和我一起编辑文档，是不是该考虑多给他布置点活\n\n好像只有我用了模板编辑，很好，红包又多了几个，但是为什么大家都不能按照要求去做一件事呢\n\n## 一些总结又或许感悟\t\n其实学长们不推荐我把任务做的过细的，说是不利于培养大家去思考\n\n但是我知道如果一开始就直接布置一个任务，而不管不问的话\n\n那大概率就会把NOVA做成一个选拔性质的社团了（适者生存）\n\n所以想想咱们NOVA的章程，我们是培养人，不是淘汰人\n\n我们是要孵化创新，不是选拔拔尖\n\n所以还是温和一点的在这里发个帖子，实践组没看到不能怪我，谷老师不要在群里广而告知哈\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章围绕NOVA团队优化关键信息推送机制的任务，运用WHW（Why-How-What）黄金圈法则进行系统性思考。作者强调从‘为什么’出发——即团队协作与人才培养的初心，进而探讨‘如何做’，包括关键信息的定义、获取、加工与推送方式，并反思技术与非技术成员在协作中的角色差异。文章最终落脚于教育性社团的核心使命：孵化而非选拔，主张通过温和引导促进成员思维成长。",
            "cross_disciplinary_insights": [
                {
                    "domain": "社会学",
                    "analysis": "文章揭示了组织内部信息流动与权力结构、成员互动模式之间的关系。关键信息的权威性、全局性等定义，实际上反映了组织中的‘象征资本’分配；而轮值组长制度的设想，则体现了通过制度设计建构社会联结与责任伦理的尝试。",
                    "connection": "布迪厄的‘社会场域’与‘象征资本’理论：关键信息的发布主体（如CAC、社长）占据场域中的优势位置，其发布的信息因权威性而获得更高资本价值。"
                },
                {
                    "domain": "哲学",
                    "analysis": "WHW框架本质上是一种目的论（teleological）思维方式，强调行动应由深层动机（Why）驱动，而非仅停留在表层行为（What）。这呼应了亚里士多德的‘四因说’中‘目的因’的优先性，也与存在主义对‘本真性’（authenticity）的追求相契合——行动需源于个体或集体的真实信念。",
                    "connection": "亚里士多德的‘目的因’（Final Cause）：WHW中的‘Why’即行动的终极目的，是驱动‘如何做’与‘做什么’的根本原因，确保实践不偏离本真意图。"
                }
            ],
            "open_question": "在一个强调协作与成长的学习型组织中，如何设计信息架构与交互机制，既能保障关键信息的有效触达，又不削弱成员的主动感知与责任意识？"
        },
        "processed_at": "2025-09-29T10:51:47.113409",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "李申亮",
        "slug": "npevfou5xsmv2w8e",
        "url": null,
        "published_at": "2025-09-28T14:42:53.000Z",
        "content": "先写一个思路，敲代码过程遇到困难难以解决会调整思路\n\n\n\n# 处理数据的类型——文本\n考虑到爬虫的对象，应该以处理文本信息为主，因此我以文本规范分类\n\n\n\n1. 官网和公众号：\n\n这类文本相对规范，有清晰的段落结构，这为提取重要信息如时间、地点和对象提供帮助。同时它们更新较慢，并且通知往往提前于活动几天的时间发出，故处理这类数据的频率**一天一次**为佳。\n\n2. QQ和微信：\n\n出于水群和通知口语化的原因，这类信息呈现出频繁更新和碎片化的特点，因此如何**精准提取**出通知类信息与做到通知**不遗漏**至关重要。\n\n\n\n# 处理数据的目标——识别通知\n如上段所述，官方通知消息要素齐全且规范，故主要考虑如何利用大模型识别QQ /VX群中碎片化的通知。更进一步地，我希望利用大模型**联系上下文**，识别并补充诸如“明天”“老地方”“新生”等**模糊信息**。\n\n\n\n# 储存数据的方式\nto be continued...\n\n\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章探讨了在信息爬取与处理中，针对不同来源文本（如官网/公众号与QQ/微信）的特性制定差异化策略。作者强调对碎片化、口语化社交平台信息的精准提取与上下文理解，尤其关注利用大模型识别并补全模糊表达（如‘明天’‘老地方’），以实现高效、无遗漏的通知识别。数据处理频率与结构化程度密切相关，官方渠道适合低频处理，而社交群聊则需高频、智能解析。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章体现了自然语言处理（NLP）在真实场景中的挑战，尤其是上下文感知与指代消解问题。作者试图通过大模型理解模糊时间与地点表达，这涉及语义解析、实体链接和对话状态追踪等关键技术。",
                    "connection": "这与‘指代消解’（Coreference Resolution）和‘上下文建模’（Contextual Modeling）密切相关，是现代大语言模型（如Transformer架构）试图解决的核心问题之一。"
                },
                {
                    "domain": "语言学",
                    "analysis": "作者关注‘明天’‘老地方’等模糊表达的识别，这本质上涉及语用学中的指示语（deixis）问题——语言如何依赖语境获得具体意义。社交群聊中的通知理解高度依赖共享语境，这对机器理解人类语言提出了深层挑战。",
                    "connection": "这与语言学中的‘指示语理论’（Deictic Expressions）直接相关，特别是时间指示（temporal deixis）和空间指示（spatial deixis），其意义必须通过语境锚定才能确定。"
                }
            ],
            "open_question": "当大模型试图补全‘老地方’这类高度依赖群体共享知识的模糊表达时，如何在不侵犯隐私的前提下建模并利用群体语境？这是否意味着AI需要某种形式的‘社会嵌入性’？"
        },
        "processed_at": "2025-09-29T10:51:49.647779",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-LLM分支-李佳骏",
        "slug": "llr77giv06fmtuid",
        "url": null,
        "published_at": "2025-09-28T14:27:50.000Z",
        "content": "## 行前有所思\n9.28\n\n       写完oj来看活动要求差点被打晕过去， 在这两周里，我要从一个不太会python语法的小杯coder完成应用LLM的壮举~~（bushi）~~，但是在LLM的辅助下这一任务似乎并不难~~（至少生成代码不是问题吗？）~~也许更重要的是快速弄懂背后原理。\n\n## 我在做什么\n~~（点明你选择的类、分支，你的学习方向，你有哪些操作）~~\n\n## 我提出或遇到的问题\n~~（包括描述、记录、尝试解决的过程，不用担心，大家都从一无所知走来，可以大胆记录）~~\n\n## 一些总结又或许感悟\n~~（比较自由，也可以是你想与大家分享的内容）~~\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位初学Python的学生在短时间内借助大语言模型（LLM）完成编程任务的经历与反思。作者坦承自身编程基础薄弱，但借助LLM生成代码降低了技术门槛，同时意识到理解底层原理的重要性。文章体现出对技术工具依赖与自主学习之间张力的初步觉察，强调在快速实现功能的同时不应忽视对原理的深入掌握。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "作者在依赖LLM生成代码的同时，表现出对‘理解’与‘操作’之间区别的自觉，这触及认识论中‘知道如何’（knowing-how）与‘知道为何’（knowing-why）的经典区分。若仅依赖LLM完成任务而不理解其逻辑，可能陷入技术工具主义的陷阱，丧失对知识的真正掌握。",
                    "connection": "这一反思与海德格尔对技术‘座架’（Gestell）的批判相呼应：当技术仅被视为达成目的的手段，人便可能遗忘其与世界本真关系的思考。"
                },
                {
                    "domain": "社会学",
                    "analysis": "LLM作为新兴技术中介，正在重塑学习者与知识之间的社会关系。作者在群体活动压力下快速转向LLM辅助，反映出技术如何重构教育场域中的能力标准与学习策略，也暗示了数字鸿沟可能从‘接入’转向‘使用方式’的深层分化。",
                    "connection": "这与布迪厄的‘文化资本’理论相关：掌握LLM有效使用策略的学生可能积累新型文化资本，从而在学术竞争中获得隐性优势。"
                }
            ],
            "open_question": "当大语言模型成为知识获取与技能习得的主要中介时，我们应如何重新定义‘理解’‘能力’与‘原创性’？"
        },
        "processed_at": "2025-09-29T10:51:52.780066",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-Excel分支-贺童谣",
        "slug": "ym6titiguw8c65ze",
        "url": null,
        "published_at": "2025-09-28T13:46:09.000Z",
        "content": "## 行前有所思\n~~（当你开始做某件事情前，或许会有一些思考）~~\n\n基于上次任务遇到的有部分未解决问题和在探索使用python提取excel表格信息的时候会出现很多未知的代码知识，我了解到openpyxl和pandas，但作为初学者其实没有什么理解，我希望能够通过实践实操来学习python中相关excel的知识，因为我觉得理论知识学习终究要归到实践上去，不如边实操边学习可能更有成就感吧。\n\n## 我在做什么\n~~（点明你选择的类、分支，你的学习方向，你有哪些操作）~~\n\n## 我提出或遇到的问题\n~~（包括描述、记录、尝试解决的过程，不用担心，大家都从一无所知走来，可以大胆记录）~~\n\n## 一些总结又或许感悟\n~~（比较自由，也可以是你想与大家分享的内容）~~\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位初学者在学习Python处理Excel数据过程中的思考与实践路径。作者坦承对openpyxl和pandas等工具理解有限，但主张通过实操驱动学习，强调在解决具体问题中积累经验与成就感。文章体现出‘做中学’的认知策略，重视实践对理论内化的催化作用，并展现了面对未知技术时的探索态度与反思意识。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "作者强调通过实践来理解抽象工具，这呼应了现象学中‘在世存在’（Being-in-the-world）的理念——知识并非孤立于行动之外，而是在与世界的互动中生成。学习编程不是先掌握全部理论再行动，而是在操作中逐步构建理解。",
                    "connection": "海德格尔的‘此在’（Dasein）概念，强调认知源于实践性参与而非纯粹理论沉思。"
                },
                {
                    "domain": "认知科学",
                    "analysis": "文章体现了一种具身认知（embodied cognition）的学习观：知识不是静态存储的符号系统，而是在与工具（如Excel、Python库）的交互中动态构建的。初学者通过调试、试错和反馈循环，逐步形成对数据结构和程序逻辑的直觉。",
                    "connection": "具身认知理论，认为思维和学习根植于身体与环境的互动，而非仅发生于大脑内部的抽象计算。"
                }
            ],
            "open_question": "在技术学习中，‘边做边学’的实践路径如何与系统性理论建构相辅相成？是否存在一种最优的认知节奏，使得初学者既能获得即时反馈的激励，又不陷入碎片化知识的陷阱？"
        },
        "processed_at": "2025-09-29T10:52:02.724766",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "GitHub协作",
        "slug": "qnqvx98gc1mqeucm",
        "url": null,
        "published_at": "2025-09-28T13:20:29.000Z",
        "content": "+ 具体流程我们已经有一份文档了，但暂时还停留在理论层面，大家还需要实践练习。\n\n见[GitHub项目协作的不完全指南](https://nova.yuque.com/ph25ri/ua1c3q/btag7pk04rf77y94)。\n\n+ 已经注册了GitHub账号的同学们可以在下方留个记录，方便后续nova的官方组织账号建成后拉人进去：\n    - 张润程：[https://github.com/ChouYuanjue/](https://github.com/ChouYuanjue/)\n    - 蒋泓宇：[https://github.com/549w/](https://github.com/549w/)\n+ 有任何协作相关的小issue可以在下方提（尽管社团实际上有单独的Issue模块）\n    - ISSUE1: 建议开一个空仓库给大家练习GitHub协作相关的操作，越快越好\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章介绍了GitHub协作的初步实践需求，指出已有理论文档但缺乏实操，并附上协作指南链接。作者鼓励已注册GitHub的成员留下账号以便后续纳入官方组织，同时征集协作过程中遇到的小问题，并建议尽快建立一个空仓库供成员练习协作操作，体现出从理论向实践过渡的迫切性。",
            "cross_disciplinary_insights": [
                {
                    "domain": "社会学",
                    "analysis": "GitHub协作本质上是一种分布式协作模式，反映了数字时代新型社会协作结构的形成。成员通过共享平台、规范流程和异步沟通构建临时但高效的社会网络，体现了去中心化组织的特征。",
                    "connection": "这与布迪厄的‘社会场域’（social field）理论相呼应——GitHub作为一个技术中介的场域，参与者通过资本（如代码贡献、声誉）和惯习（如PR流程、Issue规范）在其中争夺位置与合法性。"
                },
                {
                    "domain": "哲学",
                    "analysis": "GitHub的协作机制隐含了对‘共同知识’（common knowledge）与‘行动协调’的哲学追问：个体如何在缺乏面对面交流的情况下达成共识并协同创造？这触及集体意向性（collective intentionality）的问题。",
                    "connection": "可联系海德格尔的‘共在’（Mitsein）概念——尽管开发者物理隔离，但通过共享项目目标与操作规范，形成一种技术中介下的‘共在’状态，重构了数字时代的‘此在’实践。"
                }
            ],
            "open_question": "在去中心化、异步且文本主导的协作环境中，如何设计技术与制度机制以有效培育信任、责任与集体认同？"
        },
        "processed_at": "2025-09-29T10:52:04.890496",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "实践操作类-信息采集-洪翌铭",
        "slug": "cfpfdbcfdsu1t2sn",
        "url": null,
        "published_at": "2025-09-28T13:00:42.000Z",
        "content": "占位文档，思路正在想\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章标题为‘实践操作类-信息采集-洪翌铭’，但正文内容仅为‘占位文档，思路正在想’，表明该文尚未形成实质性内容，尚处于构思阶段。因此，无法提炼出明确的核心思想、论点或结论，仅能识别其意图可能涉及信息采集的实践操作方法或相关探索。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "即便文章尚为空白，‘信息采集’这一主题在计算机科学中具有核心地位，涉及数据爬取、传感器网络、用户行为追踪等技术。占位状态本身可被看作一种元数据——表达信息尚未生成但结构已预留，这与程序设计中的占位符（placeholder）或延迟加载（lazy loading）机制类似。",
                    "connection": "与‘信息论’中的‘信息熵’概念相关：空白文档代表最大不确定性，即信息熵最高，尚未通过采集行为降低不确定性。"
                },
                {
                    "domain": "哲学",
                    "analysis": "‘思路正在想’这一表述揭示了思想生成的前语言状态，呼应现象学对意识流与意向性的关注。在思想尚未结构化为文本之前，其存在形式是一种潜在性，类似于海德格尔所说的‘尚未展开的存在’。",
                    "connection": "与海德格尔的‘此在’（Dasein）概念相关：此在的本质在于其可能性，而‘思路正在想’正体现了主体处于筹划自身思想内容的本真状态。"
                }
            ],
            "open_question": "当信息采集的对象是尚未形成的思维本身时，我们如何定义‘数据’的边界？这是否意味着信息采集不仅反映现实，也参与构建现实？"
        },
        "processed_at": "2025-09-29T10:52:09.226329",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "非纯技术类-周熙文",
        "slug": "gwk2zgoxs5nbouzi",
        "url": null,
        "published_at": "2025-09-28T14:15:23.000Z",
        "content": "这几天课满满的，先来想一想暂时不需要技术手段（而且抽象但紧迫）的分组问题\n\n## “组”\n### what\n> + 强化组的概念，加强组内的合作和交流\n>     - 思考如何定义组\n>     - 需要一个固定的交互机制\n>     - 定义组的协作模式\n>     - 交流的形式要尽可能聚焦，没有其他信息干扰\n>     - 丰富交流结构（1对1,1对多，多对多，及时型、非及时型）\n>\n\n#### 定义“组”\n一句话的正式定义想不出来，我试着描述几个我心中的特征：\n\n+ 有某个目标/主题/项目并为之共同努力\n+  为达到以上目的，组员间密切交流，信息共享，相互帮助\n+ 组员有明确的分工，负责内容有机结合组成目标/主题/项目\n\n我认为目前我们缺少的是交流和分工，这造成了每个组员工作内容的大量无意义重复\n\n\n\n#### 定义组的协作模式\n首先这并非我一个人能搭出来的，这里只是试着写一下，各位随时补充修改\n\n这个部分连特征一时半会都概括不出来，我先按自己的设想搭一个草率的时间轴（感觉已经偏how了...）\n\n+ 周六下午活动：上周总结，明确下一周的目标/主题/项目\n+ 尽量也在周六：组员面对面进一步讨论，并进行分工规划\n\n（一点设想：是不是可以根据组员的课表日程稍微定一点先后顺序？）\n\n+ 周中：各自做项目，有问题集中时间段进行交流讨论\n+ 下周六：正式会面前先进行成果汇总\n\n\n\n#### 固定的交互机制\n在目前不涉及技术的框架下想到的是这几点：\n\n+ 线下：周六下午活动、活动后的讨论分工、（周中如果大家都有时间和意愿是否需要再见面？）\n+ 线上：\n- [ ] 微信：（及时交互性强）尽量集中时间段进行交流讨论，找一个大家都有空上线的时间，提高信息密度，平常不想水群的人也可以获得较大的参与度\n\n（频率、时间、时长等都要等大家共同商讨）\n\n- [ ] 语雀：（碎片化交流）阅读后通过评论区交流互动\n- [ ] 任务相关性强的组员可选取喜欢的形式一对一/n对n交流，如果觉得对其他组员帮助不大/需要其他组员帮助不大可私下交流沟通。\n\n\n\n\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章聚焦于非技术层面的小组协作问题，试图从定义‘组’的本质出发，强调目标导向、信息共享与明确分工的重要性。作者指出当前小组缺乏有效的交流机制与分工体系，导致重复劳动。为此，他提出一个初步的协作时间轴和线上线下结合的交互机制（如固定时段微信讨论、语雀评论互动等），旨在提升协作效率与参与度。",
            "cross_disciplinary_insights": [
                {
                    "domain": "社会学",
                    "analysis": "文章对‘组’的构建与运作机制的思考，实质上触及了小型社会群体如何通过结构化互动达成集体目标的问题。作者关注分工、交流频率与形式，这与社会学中关于群体动力学和协作网络的研究高度相关。",
                    "connection": "该内容呼应了皮埃尔·布迪厄的‘社会场域’（social field）理论——组作为一个微型场域，其内部成员通过资本（如时间、知识）分配与互动规则（如固定交流机制）共同维系场域的运作与目标实现。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者试图通过定义‘组’的本质特征来澄清其存在意义，这种追问方式具有鲜明的现象学色彩。他关注组员‘共同在世’（being-with）的状态，强调协作中的意向性与共享目标，而非仅视小组为工具性集合。",
                    "connection": "这与海德格尔在《存在与时间》中提出的‘共在’（Mitsein）概念相呼应——真正的‘组’不是个体的简单叠加，而是在共同关切（Sorge）中彼此照面、相互构成的存在方式。"
                }
            ],
            "open_question": "在一个强调个体自主性与多元兴趣的大学环境中，如何设计一种既尊重成员异质性又能激发深度协作的‘组’结构，使其既非强制性组织，亦非松散社交圈？"
        },
        "processed_at": "2025-09-29T10:52:11.240421",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "RESTful API及接口标准",
        "slug": "laake071sipsofmz",
        "url": null,
        "published_at": "2025-09-28T13:19:05.000Z",
        "content": "刚刚看了看王恩成同学的文档，发现我们聊天时对builder的理解原来不是一个东西（）\n\n我本来以为王同学想表达的builder是这样的东西（针对json的builder）：\n\n```java\nObjectNode json = JsonNodeFactory.instance.objectNode()\n.put(\"name\", \"张三\")\n.put(\"age\", 25)\n.set(\"hobbies\", JsonNodeFactory.instance.arrayNode()\n     .add(\"篮球\")\n     .add(\"音乐\")\n    );\n```\n\n这样的json构建模式能更好处理复杂、嵌套的json数据，解析起来也更快，比直接通过文本拼接构建json更有鲁棒性，而且更容易补充和修改需要的json结构。（王恩成同学和我之前讨论了json解析不方便的问题，所以我朝这个这个方向进行理解了，而且我觉得这个东西确实让json更加结构化、可读、可修改，再融一个解析器也能让解析速度变快，所以我们拿json这种形式作为API的数据传输形式变得更可行了）\n\n但我觉得王同学这个想法也很好。之前和王同学聊天的时候我们聊到了**导入模块**的思路，这是基于黄同学已有框架的前提下对拓展模块提出的一些看法。因为我联想到了AstrBot项目，它是在拥有一个核心模块（对接Websocket和HTTP）的情况下，在编写插件时通过导入各平台分开的模块来处理各平台信息的收发，这样保证了核心模块API在处理任何平台时名称都一致，一个插件可以方便的兼容多平台；或者说，AstrBot提供了**几乎完全封装的SDK**（实际上没封装到这个地步，Soulter本来说要做的，但现在不知道什么情况），便于用户基于项目进行开发不那么底层的内容。我觉得把我们的项目进行这样形式的操作也是一种很可行~~也很刺激~~的设想。\n\n我觉得这两种builder都可以考虑。\n\n但我一开始的设想不是通过类似SDK的形式构建项目，一个原因是我们这个项目最终可二次开发的余地好像没那么多。像AstrBot，它上游需要连接各平台，下游需要让用户开发各种功能的插件，那么一个封装基本完善的核心模块将非常方便。我们的项目呢，上游需要对接各平台，但是不太可能有下游，因为我们是面向用户的项目、让他们好用，而不是面向开发者，让他们基于这个框架去做各种小插件，那么封装一个SDK略显麻烦。\n\n我原初的设想是使用RESTful API，这是项目前后端对接的常用方式，不过我不能确定这是否适用于我们的每一个环节。我先说一下我为什么想选用这种方式：\n\n**核心优势：**服务之间通过定义良好的 API 接口进行交互，内部实现细节被隐藏，我们不需要把时间花在理解别人的代码上。\n\n+ **独立开发**：各个模块的同学可以并行工作，只需约定好 API 的端点、请求格式和响应数据。（开个会定调就行了）\n+ **独立部署与扩展**：从（如果）最终我们希望产品落地的角度来看，用户服务、订单服务、消息服务等可以独立部署到不同的服务器上，并根据各自的压力进行独立扩容（例如，用户访问量大，就只扩展用户服务）。\n+ **方便跨平台**：对不同平台的适配只要分别搓前端然后调服务器的API就行，不需要单独封装后端。\n+ **技术栈无关性**：提供 API 的服务可以使用各种语言，调用 API 的客户端也可以使用各种语言。从实际效果上让使用轮子的门槛降低了，我们没必要去把一切内容改成Python（而SDK思路必须在同一个语言下进行）。但考虑到我们并不是那么希望成为轮子的搬运工，这个优点就不太明显了。当然也有利于擅长别的语言的同学用自己的惯用语进行开发，但是我们还是希望统一用Python，要不然彼此不方便学习和review。\n+ **系统更鲁棒**：一个模块的崩溃不会导致整个进程宕机。\n+ 还有优点我没想好，总之我觉得挺方便。\n\n然后我让LLM对比了一下两种思路：\n\n| 维度 | 思路一：导入模块（紧耦合，SDK/库模式） | 思路二：RESTful API（松耦合，服务模式） |\n| :--- | :--- | :--- |\n| **核心理念** | **“引入与集成”**。将功能封装成库或模块，直接导入到主应用程序中，成为进程的一部分。 | **“通信与协作”**。功能作为独立的服务运行，主应用程序通过网络协议（如HTTP）与之交互。 |\n| **耦合度** | **紧耦合**。调用者和被调用者在同一个进程内，编译时或启动时依赖。 | **松耦合**。调用者和被调用者是独立的进程，仅通过契约（API文档）进行交互。 |\n| **通信方式** | **本地函数/方法调用**。速度快，无网络开销。 | **网络请求**。通常是HTTP/HTTPS，有序列化、网络延迟和开销。 |\n| **数据格式** | 编程语言原生的对象、数据结构。 | 文本格式（如JSON、XML），需要序列化和反序列化。 |\n| **技术栈** | **必须兼容**。模块和主程序通常需要使用相同或兼容的技术栈（如Python）。 | **无关**。服务可以使用任何语言和技术栈开发，只要遵循API约定即可。 |\n| **部署** | **一体化部署**。模块和主程序一起部署、一起扩展。 | **独立部署**。服务和主程序可以独立部署、升级和扩展。 |\n| **错误处理** | 使用语言的异常机制，直接、快速。 | 通过HTTP状态码和响应体传递错误信息，需要额外处理网络错误。 |\n| **性能** | **高**。无网络延迟，函数调用是纳秒/微秒级。 | **相对较低**。存在网络延迟、序列化开销，请求是毫秒级。 |\n| **复杂性** | **代码复杂性高**。需要管理依赖、版本冲突。模块的崩溃可能直接影响主进程。 | **运维复杂性高**。需要管理网络、服务发现、负载均衡、监控等。 |\n\n\n我要声明一点的是，上面说的网络问题在现在这个阶段基本不会出现，只要大家全部在本地部署就行，完全可以在本地完成和API交互。如果考虑网络问题，也可以说是一种优点。**大家写完自己的模块直接在校园网上找个端口开放，其他人就能参与调试，不需要买服务器也不需要防止外部攻击**，太方便了，这就体现了我们nova作为学校团队的巨大优势。（不过开放到校园网确实有点慢）\n\n另外下面是两个模块实现QQBot的示例对比（也是LLM生成的，我稍微改了一点），方便大家直观理解：\n\n1. **导入模块思路（AstrBot模式）**\n+ **工作方式**：\n    1. 有一个核心机器人框架（`core`）。\n    2. 为每个平台（如QQ、Discord、Telegram）编写一个适配器**模块**（`adapter_qq`, `adapter_discord`）。（实际上这些模块不是这个名字，将就着参考一下）\n    3. 插件开发者从 `core` 导入一个统一的 `Message` 类和 `send` 函数。\n    4. 当核心框架收到来自QQ的原始消息时，它会加载 `adapter_qq` 模块。该模块负责将QQ的原始数据**转换**成框架统一的 `Message` 对象。\n    5. 插件代码处理这个统一的 `Message` 对象，并调用统一的 `send` 函数。\n    6. `send` 函数内部再通过 `adapter_qq` 模块将消息转换回QQ平台的格式并发送。\n+ **优势**：\n    - **极高的性能**：所有操作都在内存中完成，速度极快，非常适合对实时性要求高的聊天机器人。\n    - **开发体验流畅**：对插件开发者而言，就像在调用本地函数，IDE可以提供很好的代码补全和提示。\n    - **强类型支持**（如果语言支持）：可以利用类型检查来减少错误。\n    - **“一个插件，多平台适配”**：这正是该架构的核心优势，因为平台差异已经被模块在底层抹平了。\n+ **劣势**：\n    - **语言锁定**：所有模块和插件都必须用框架支持的语言（如Python）来写。\n    - **稳定性风险**：一个写得不好的插件或适配器模块发生崩溃，可能会导致整个机器人进程宕机。\n    - **依赖地狱**：如果不同插件对同一个底层库有版本冲突，处理起来会很麻烦。\n\n2. **RESTful API思路（类似于NapCat+OneBot等底层实现，或者原生NapCat）**\n\n+ **工作方式**：\n    1. 有一个核心机器人框架（`core`）。\n    2. 为每个平台运行一个独立的“平台适配器服务”（例如 `qq-adapter-service`）。\n    3. 这个服务负责连接QQ，并提供一个RESTful API端点，比如 `POST /webhook/qq`。\n    4. 当QQ有消息时，`qq-adapter-service` 将消息封装成JSON，通过HTTP POST请求发送到核心框架暴露的一个Webhook URL。\n    5. 核心框架处理完消息后，需要回复时，再向 `qq-adapter-service` 的另一个API端点（如 `POST /send_message`）发送一个HTTP请求。\n    6. 插件开发者需要处理的不再是本地对象，而是JSON数据。\n+ **优势**：\n    - **技术栈自由**：QQ适配器服务可以用Go来写以求高性能，Discord适配器可以用Python来求开发快，它们之间互不影响。\n    - **隔离性与弹性**：QQ的服务挂了，不会影响Discord的服务，甚至核心框架本身也可能不受影响（取决于实现）。可以独立重启、扩容。\n    - **易于集成现有系统**：如果某个平台本身就提供了HTTP回调，那么对接会非常自然。\n+ **劣势**：\n    - **性能瓶颈**：每一次消息收发都涉及2-4次HTTP请求，网络延迟会成为主要问题。\n    - **开发复杂度**：插件开发者需要处理HTTP客户端、异步、超时、重试等问题，开发体验不如直接函数调用。\n    - **运维负担**：需要部署和管理多个服务，处理服务发现、网络配置等。\n\n\n\n其他的部分我有时间再分析，包括RESTful API方案我们怎么去落实等等。大家可以自己去看看有关RESTful API的接口设计标准。另外这个思路不太可能是最好的，大家都提出一点想法就更好了。\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章围绕项目架构选择展开，对比了‘导入模块’（SDK/库模式）与‘RESTful API’（服务模式）两种技术路径。前者紧耦合、高性能，适合插件化多平台兼容；后者松耦合、独立部署，利于跨语言协作与系统弹性。作者倾向RESTful API，因其契合团队并行开发、本地调试与模块隔离需求，但也承认性能与开发体验的权衡。最终强调需结合项目实际（面向用户而非开发者）审慎决策。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章深入探讨了软件架构中的耦合度、抽象边界与系统弹性问题，体现了现代分布式系统设计的核心张力：性能与灵活性、内聚与隔离之间的权衡。RESTful API作为面向服务架构（SOA）的轻量级实践，其契约化通信机制本质上是一种‘接口哲学’——通过标准化交互协议隐藏实现复杂性，这与操作系统中的系统调用或微内核设计理念异曲同工。",
                    "connection": "控制论中的‘黑箱’概念：RESTful服务将内部逻辑封装为黑箱，仅通过输入输出行为定义其功能，符合控制论对系统可观测性与可干预性的要求。"
                },
                {
                    "domain": "哲学",
                    "analysis": "两种架构模式映射了本体论上的不同立场：模块导入模式预设了一个统一、连续的‘存在场域’（同一进程内共享内存与状态），而RESTful模式则承认多个异质‘存在者’（独立服务）通过语言（API契约）进行交往。这种分离不仅技术上隔离故障，更在认识论上承认‘他者’的不可化约性——每个服务都是自主的行动者，只能通过符号（JSON）协商意义。",
                    "connection": "海德格尔的‘此在’（Dasein）与‘共在’（Mitsein）：RESTful架构中的服务如同‘共在’的此在，彼此独立存在，却通过共同的语言世界（API规范）实现交互与理解。"
                }
            ],
            "open_question": "在软件系统日益复杂且强调协作的今天，我们是否应将‘接口设计’视为一种伦理实践——即通过清晰、稳定、尊重他者的契约，构建技术共同体中的信任与责任？"
        },
        "processed_at": "2025-09-29T10:52:15.999324",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "想法区",
        "slug": "dze3l9t79yth0nwo",
        "url": null,
        "published_at": "2025-09-28T12:52:20.000Z",
        "content": "这个分组主要是存储一些大家的建议和想法，这些想法都没有经过大家的承认变成同一的规范。\n\n大家可以在这个分区下对关于接口设计和协作规范提出自己创新的想法（但拜托拜托一定要和“接口设计协作规范有关”QwQ），或许有一天经过大家一起优化和认定，成为新的规范。\n\n这个分组也是在“暴露思维过程”这一想法下创设的，希望大家在这里积极讨论，共同进步！ · v ·\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章介绍了名为“想法区”的讨论分区，其核心目的是收集尚未被广泛认可但与接口设计和协作规范相关的创新建议。该分区强调“暴露思维过程”，鼓励社区成员积极分享、讨论和共同优化想法，以期未来形成共识并转化为正式规范。这体现了一种开放、协作和渐进式知识共建的理念。",
            "cross_disciplinary_insights": [
                {
                    "domain": "社会学",
                    "analysis": "该分区体现了知识生产中的集体协商过程，反映了规范并非自上而下强加，而是在社群互动中逐步形成。这种机制类似于科学共同体中的范式建构，强调多元声音的参与和共识的动态生成。",
                    "connection": "皮埃尔·布迪厄的“社会场域”（social field）理论，其中行动者在特定场域中通过资本与惯习互动，共同塑造规则与权威。"
                },
                {
                    "domain": "哲学",
                    "analysis": "“暴露思维过程”呼应了现象学对意识结构和思维透明性的关注，强调将内在认知外化为可交流、可批判的公共对象。这种做法有助于避免技术规范沦为黑箱，促进反思性实践。",
                    "connection": "埃德蒙·胡塞尔的“现象学还原”与“主体间性”概念，主张通过悬置预设、呈现思维过程以达成共享理解。"
                }
            ],
            "open_question": "在一个高度依赖协作与共识的技术社区中，如何设计制度性机制，既能鼓励异质性想法的自由涌现，又能有效筛选并转化其中具有潜力的规范？"
        },
        "processed_at": "2025-09-29T10:52:23.535975",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "面向对象和builder",
        "slug": "iq2g293f3g01xlzx",
        "url": null,
        "published_at": "2025-09-28T11:43:44.000Z",
        "content": "## 面向对象\n~~（不是对着各位的“麦恩莉”编程）~~\n\n面向对象可以作为一种特性。一般来讲，它代表某个编程语言支持一个代码结构叫“类”以及和它相关的一系列操作。\n\n面向对象也可以作为一种思想。它把所有行为都看作是“对象在做什么事情”。在程序上的体现就是围绕“类”的实例化和访问成员来构建程序逻辑。\n\n面向对象在接口通信中的体现，就是把数据抽象成一个类。我们可以通过对特定的成员方法的设计，来规范数据使用者的权限，同时在程序中更易调用，方便编码。\n\n比如，我们可以把所有成员变量都设为私有，把get方法设为公有并不提供set方法，这样就把数据做成了只读。\n\n## Builder\n这个思考是在和[@张润程](undefined/runnel)同学的交流中想到的。在上次NOVA活动结束后，张润程和我都有一个感慨：“JSON还是挺难处理的。”\n\n在和张润程同学微信聊天的时候，我突然想到解析JSON（实际项目中不一定是JSON，也有可能是XML、YAML等，甚至可以用数据库来通信，需要项目小伙伴们统一意见，这里用JSON是为了方便表述）是一个在两个模块间通信必然经历的，按照减少复用的原则，我们应该可以把这个操作给抽象成一个单独的模块。\n\n关于具体实现，我受到“建造者模式”的启发，想到可以设计一个“Builder”（也是现取的名字，需要大家统一认识，也可以叫“Factory”等等），它的任务就是接受一个JSON字符串，构造出一个对应的对象实例返回给我们，这就方便使用了。\n\n从架构的角度，我们需要协商一个抽象类来表示数据的抽象，一个抽象类Builder来表达我们认为Builder究竟要干什么，怎么干。\n\n当然，我们需要认识到，“万物皆类”固然优雅，但是也会使程序语言冗余。假设Builder这个类只有一个成员方法，那我们也完全没必要给它新建一个类。Python拥有非常简便的模块管理特性，我们完全可以直接在同一个文件里编写不同的函数就达到模块封装的效果。\n\n然后在阅读了张同学的文档[RESTful API及接口标准](https://nova.yuque.com/ph25ri/ua1c3q/laake071sipsofmz)后深受启发，事实上我们所说的两种Builder结合到一起，就可以对应最后AI给出的一个想法：“每个服务都实现一个平台适配器”。\n\n以及又突然想到一点：Java里面有一个特性是Interface，但它是方法导向的，因为它不关心实现这个Interface的类有什么成员变量，它只关心这个类有什么成员方法。这个思路和RESTful API可以说是完全的不同。或许思考这两者之间的区别能让我们更能理解我们需要什么样的接口。\n\n## 吐槽\n其实以上两个部分应该放在两个文档里，但是两个部分字数太少没有必要拆开看，所以目前我还是把它一起放在上面。\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章探讨了面向对象编程作为一种语言特性和编程思想的双重角色，强调其通过类与实例化实现数据封装与权限控制的价值。随后引入Builder模式，作为处理模块间通信（如JSON解析）的抽象手段，提倡通过统一接口设计提升代码复用性与架构清晰度。作者反思了过度使用类可能导致的冗余，并结合RESTful API与Java Interface的对比，引发对不同接口设计理念的深层思考。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "文章对‘对象’和‘接口’的讨论隐含了本体论与认识论的张力：面向对象将世界建模为具有属性与行为的实体，而RESTful API则更关注操作与交互本身，类似于现象学中‘事物如何显现’而非‘事物本身是什么’的转向。",
                    "connection": "海德格尔的‘用具’（Zeug）概念——工具在使用中隐退，仅在失效时才成为‘对象’，这与接口设计中‘行为优先于内部状态’的思路相呼应。"
                },
                {
                    "domain": "语言学",
                    "analysis": "Builder模式和接口设计可类比为语言中的‘生成规则’：如同语法规定合法句子的构造方式，Builder定义了从原始数据（如JSON）到合法对象实例的‘句法生成’过程，而接口则如同语义角色标注，规定了模块间可接受的‘言语行为’。",
                    "connection": "乔姆斯基的生成语法理论，强调通过有限规则生成无限合法结构，与Builder通过统一协议构造对象的逻辑高度相似。"
                }
            ],
            "open_question": "在软件架构中，我们应更倾向于‘对象本体论’（以实体为中心）还是‘行为现象学’（以交互为中心）的接口设计范式？这种选择如何影响系统的可组合性与认知负荷？"
        },
        "processed_at": "2025-09-29T10:52:25.525971",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "廖宇强",
        "slug": "gk7t54gdd3onedwf",
        "url": null,
        "published_at": "2025-09-28T10:43:34.000Z",
        "content": "### 依然先碎碎念一下\n之前有过独自做一些小项目的经历，现在想想范围可以说是涵盖了前后端+消息推送，不过都很不精，以及代码规范稀碎，所以还是来实践组抱大腿学习\n\n这几天要被作业和各种ddl追杀，所以国庆再动手\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章作者廖宇强回顾了自己独立开发小项目的经历，涵盖前后端与消息推送，但坦言技术不精、代码规范混乱，因此希望加入实践组向他人学习。同时提到近期因学业压力和截止日期紧迫，计划在国庆假期再开始动手实践。整体体现出初学者对技术成长的自我反思、对协作学习的渴望，以及在时间管理上的现实困境。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "作者对自身代码规范和技术深度的反思，体现了软件工程中‘技术债’（Technical Debt）的概念——快速实现功能但忽视代码质量，长期将增加维护成本。加入实践组寻求指导，也呼应了‘结对编程’和‘社区学习’在提升工程素养中的价值。",
                    "connection": "技术债（Technical Debt）"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者在面对自身局限时选择‘抱大腿学习’，体现出一种苏格拉底式的‘自知其无知’的谦逊态度。这种对知识边界的自觉，正是哲学认识论中‘元认知’（metacognition）的体现，即对自身认知过程的反思与调整。",
                    "connection": "苏格拉底的‘无知之知’（Socratic Ignorance）"
                }
            ],
            "open_question": "在技术快速迭代的环境下，个体如何在‘快速试错’与‘规范构建’之间取得平衡，以实现可持续的知识积累与工程能力成长？"
        },
        "processed_at": "2025-09-29T10:52:27.616348",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "谷和平",
        "slug": "zbnc5ulpf8gpkgaf",
        "url": null,
        "published_at": "2025-09-28T10:57:14.000Z",
        "content": "# 前言\n关于信息推送，上周已经有人在文档里提到过实现方式，打算先将其汇总一下，做一个参考，然后再具体实施。\n\n# 已有思路\n## 实践组\n> ## 消息推送部分\n> 首先确定消息推送的形式和相关的技术，如是通过QQbot，还是应用内新消息提醒，还是干脆发邮箱\n>\n> 也需要建立一个完善的消息推送的逻辑，是我选择某一些关注事项推送，还是把价值的判断交给AI，让AI分析出重要的消息再进行推送\n>\n> 怎么将消息传输到最终的应用程序也是值得思考的问题\n>\n> 可能涉及的技术：QQbot，Webhook、Rss、Mail等\n>\n> 来源：[实践操作类-洪翌铭](https://nova.yuque.com/ph25ri/ua1c3q/zwxgygxx9noyw9y0#soj55)\n>\n\n---\n\n> ## Fish\n> Fish是我出于兴趣制作的QQ bot，首次运行于2020年。框架几经变换，目前它使用napcat+onebot，由python程序通过websocket通信，实现想要的功能。~~不久前我把它拉进开甲闲聊公社，因为多数功能是在水群（抱歉），它很快被移出群聊，并且看样子是不能再加入了。~~详情请移步[549w/fish](https://github.com/549w/fish).\n>\n> 而借助Fish，恰好可以更方便地管理语雀文档、发送相关提醒。\n>\n> 来源：[蒋泓宇](https://nova.yuque.com/ph25ri/ua1c3q/tqt4g08zmylgtgw9#wKnLt)  \n另外[实践操作类-蒋泓宇](https://nova.yuque.com/ph25ri/ua1c3q/vtn7gv02ex4cd0ez#pW4pT)有具体的实现方式。\n>\n\n---\n\n> ###### 任务2: 信息推送系统集成\n> **实现思路**:\n>\n> + 实现Webhook接收和发送机制\n> + 或者集成RSS生成和推送功能\n> + 设计邮件推送模板系统\n> + 开发统一的消息推送API\n>\n> **可能需要学习**:\n>\n> + Webhook原理和实现\n> + RSS协议规范\n> + 邮件发送协议(SMTP等等)\n> + API设计原则\n>\n> **可能有用的工具**:\n>\n> + Flask/Django(Web框架)\n> + Feedgen(RSS生成库)\n> + SendGrid/Mailgun(邮件服务API)\n> + Python的smtplib库(发送邮件)\n>\n> 来源：[实践操作类-张润程](https://nova.yuque.com/ph25ri/ua1c3q/twn2vk5k63gpkfdg#Uc0Il)\n>\n\n> #### 任务4: 智能更新推送决策系统\n> **实现思路**:\n>\n> + 开发内容变更重要性评估模型\n> + 设计个性化推送策略\n> + 实现推送时机智能决策\n> + 构建用户反馈学习机制\n>\n> **可能需要学习**:\n>\n> + 推荐系统原理\n> + 强化学习基础\n> + 用户行为分析\n> + A/B测试方法\n>\n> **可能有用的工具**:\n>\n> + Redis(实时数据处理)\n> + Kubernetes(部署复杂系统)\n> + MLflow(机器学习工作流管理)\n>\n> 来源：[实践操作类-张润程](https://nova.yuque.com/ph25ri/ua1c3q/twn2vk5k63gpkfdg#BpSVD)\n>\n\n---\n\n## 非纯组\n另外借鉴一下非纯组的思路\n\n> + 消息推送\n>     - 满足个性化需求（如：定制范围、定制内容、跟踪某篇文档）\n>     - 筛除一些信息密度较低的推送内容\n>     - 推送渠道尽量整合到用户常用的工具中，尽量不要让用户培养新的行为习惯\n>     - 根据推送内容的性质，自定义推送频率\n>     - 对推送内容进行简单的AI加工（如总结或者增加推荐机制）\n>     - 自定义推送到用户的时间段\n>     - 对于关键信息（如DDL、通知公告类，能有单独推送机制）\n>     - 探索文档推送频率和文档发布时间的一种动态关系\n>\n> 来源：[非纯技术类](https://nova.yuque.com/ph25ri/ua1c3q/gnfz08x2fcuu3gzv#cD95i)\n>\n\n> ### 先做个问题拆解\n> #### 和WHY相关的部分\n> + 需要提升信息共享的准确度和信息分享的效率\n> + 有些用户撰写的文档的不太适合他人阅读，最终无法实现知识共享的目标\n>\n> #### 可能相关的问题\n> + 消息推送\n>     - 筛除一些信息密度较低的推送内容\n>     - 对推送内容进行简单的AI加工（如总结或者增加推荐机制）\n> + 强化组的概念，加强组内的合作和交流\n>     - 丰富交流结构（1对1,1对多，多对多，及时型、非及时型）\n> + 需要一种精准的检索工具\n>     - 搭建推荐系统\n>\n> （我感觉写1.2这一段意义不明。不过既然都相关了那也列出来吧，总觉得以后有用）\n>\n> #### WHAT\n> 1. 定制范围\n>     1. 选择想要推送的团队/人/issue/文档/标签\n>         1. 跟踪某篇文档章节的更新\n>         2. issue状态为已完成时才推送\n>     2. 屏蔽不想要推送的团队/人/issue/文档/标签\n>     3. 选择想要推送的话题/关键词相关的文档/issue\n>     4. 随机推送一些屏蔽范围以外的其他东西\n>         1. 定制长度、人、组、数量、标签\n>         2. 定制推送频率\n>         3. 提供不感兴趣的选项，优化算法  \n以打破信息茧房？话说这个有必要吗\n>     5. 评论也需要被推送~~（点赞就不需要了吧）~~\n> 2. 定制内容\n>     1. 在推送时对更新的内容和所有内容进行概括（使用llm或作者本人的概括）\n>     2. 以某种形式量化更新的大小\n>     3. 显示和用户在意的关键词如何匹配的一行字（例如`包含：xx`）\n>     4. 可以定制需要推送的部分（标题，姓名，时间，概述，更改内容）\n>         1. 定制推送模板\n>     5. 通过推送跳转到更新后的文档时将更新部分高亮显示\n>     6. 摘要\n>         1. 每周的文档摘要（点赞/评论数高，自己撰写/参与的文档/issue的进度总结）\n>         2. 自定义时段的文档摘要\n> 3. 定制分类与频率\n>     1. DDL、通知公告类需要有单独推送机制（与通常信息不在同一位置/以一种更显眼的方式呈现）\n>     2. DDL在给定时间之前再推送一次\n>     3. 更早的文档应当以更低的优先级推送\n>     4. 设定一个固定的推送时间/设定一个勿打扰时间，该时间只有指定分组（公告，自选分组等）的信息可以被立刻推送\n>     5. 设定一个默认期限取消订阅\n>     6. 提供一个面板去操作这一切（大改语雀！）\n>\n> 来源：[非纯技术类-余铭航](https://nova.yuque.com/ph25ri/ua1c3q/dwyvgm8ud3r8onh1#oReTM)\n>\n\n---\n\n## CAC\n最后看一下cac提供的思路\n\n> #### 推送手段\n> <font style=\"color:rgb(28, 31, 35);\">用户是挑剔的，严重挑剔的</font>\n>\n> 所以我们要考虑推送的渠道、推送的频率、推送的个性化\n>\n> 渠道上，最好不要折腾用户再安装或者再点开什么东东，能集成在用户现在手机使用的某个生态里是最优选择\n>\n> + 微信生态圈\n>     - 建一个群BOT，但是不能全员禁言，群太水了咋整\n>     - 群公告要是有用，AMA群就不会有那么多红包了\n>     - 那要不BOT做成可以@人的？\n>     - 或者微信绑定邮箱，用邮件推送\n>     - 也可以自己做一个服务号，可以一天主动推一次，或者用户点开查看\n> + QQ生态圈\n>     - 搞个全员禁言的消息通知群，但是折腾这么半天，不如找个人直接在这个群里发通知\n>     - 要不搞个BOT？BOT可以私戳发消息吗？\n> + 手机其他生态圈\n>     - 短信？\n>     - 找个up主定期发小视频？\n>     - 搞个H5页面出来，绑在某个按钮上，或者直接浏览器访问？\n>     - ~~单独做个APP？ohno，还有安卓和苹果两套开发工作量~~\n>\n> 来源：[非纯技术类-郭亚敏](https://nova.yuque.com/ph25ri/ua1c3q/ticam4c9r05k4gbv#HKY72)\n>\n\n---\n\n总的来看，上面的思路中实践组主要是技术层面，非纯组主要是功能设想，CAC两方面都有涉及。\n\n# 信息检索（准备）\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章围绕信息推送系统的设计与实现展开，整合了技术实现路径（如QQbot、Webhook、RSS、邮件等）、智能决策机制（如AI内容评估、个性化推荐）以及用户体验考量（如渠道整合、频率控制、打破信息茧房）。核心目标是提升信息共享效率与准确性，同时兼顾用户习惯与信息过载问题，体现出技术实现与人文需求的双重关注。",
            "cross_disciplinary_insights": [
                {
                    "domain": "社会学",
                    "analysis": "文章中关于个性化推送、信息茧房和用户行为习惯的讨论，触及了数字时代信息分发如何重塑社会认知结构的问题。推送系统不仅是技术工具，更是社会互动的中介，影响群体共识的形成与知识传播的公平性。",
                    "connection": "这与布尔迪厄的‘社会场域’理论相呼应：推送算法构建了一个新的信息场域，其中用户的位置、惯习与资本（如关注度、参与度）共同决定了其接收到的信息类型与质量。"
                },
                {
                    "domain": "哲学",
                    "analysis": "文章隐含了对‘技术中介下的人类注意力’的伦理反思。当AI决定何为‘重要信息’时，实际上是在代行一种价值判断，这引发了关于自主性、透明性与技术异化的哲学问题：我们是否正在将认知主权让渡给算法？",
                    "connection": "这可联系海德格尔对技术的批判——技术不仅是工具，更是一种‘解蔽’方式，它规定了我们如何理解世界。智能推送系统正以特定方式‘揭示’信息，可能遮蔽其他同样重要的认知路径。"
                }
            ],
            "open_question": "在追求个性化与效率的同时，信息推送系统应如何设计才能既尊重用户认知自主性，又促进跨领域知识的偶然相遇，从而避免强化认知偏见而非拓展思想边界？"
        },
        "processed_at": "2025-09-29T10:52:27.888173",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "王恩成",
        "slug": "gnleshwk3r4eifp8",
        "url": null,
        "published_at": "2025-09-28T10:37:19.000Z",
        "content": "根据问题导向，我希望通过探讨信息提取的任务和cac给出问题的**可能答案**来确定开发的方向，所以哪怕我没有写“或许”，“可能”等词，希望大家仍然认为我说的全是个人想法，是可能性。\n\n---\n\n## 信息提取要干什么？\ncac说：\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60016054/1759070165764-bd73cc74-f9d1-4f7d-b6ef-f08cb85d9ef8.png)\n\ncac所讲的“需要的样子”其实不是很明确，但从cac目前提出的五个词的来看，这些操作的共同点是都在对信息进行浓缩，提高信息密度。\n\n它们的路径各不相同，总结来看有两种路径：\n\n+ 提取（提取关键点、总结）：简化信息内容。\n+ 分类（分类、判断、归并）：整理信息内容（简化的更高层次与结构化）。\n\n我注意到，我们要实现的是一个“信息聚合平台”（好像是），我认为它的主要任务是让大家在同一个应用内看到大家平时需要自己动手寻找的信息，信息浓缩和结构化并非它的本质要求。但就我来说，这个东西很有吸引力，他让这个平台成为了一个“信息浓缩平台”，可以理解为“聚合”的更高层次。\n\n## 要处理什么数据？\n感觉上要取决于我们的接口是怎么定义的。个人认为我们要处理的数据主要就是文字和图片。\n\n当然，如果信息采集组还要把Word、PDF文件直接扔给我们，我们还要怎么样处理这些文件中的信息（比如教务处发的pdf中的表格，这个东西给信息采集组处理和给信息提取组处理都不算很合适）？需要一些特殊约定。\n\n## 数据处理的目标是什么？\n### 明确“价值”\n在阅读非技术组的记录文档时，我发现同学们提到了“个性化”。这启发了我：信息的意义是由获得信息的人定义的。这就让我想到了所谓的“推送算法”，我们是否可以让用户自己来定义价值？比如说自主选定关键词，比如说通过他们的反馈（Level UP/Level DOWN）。\n\n当然，有些事情是我们可以做的，比如说学校某些关键机构发出的要求所有人看到的通知，这些东西，不需要说，对于有学生身份的人来讲是有价值的。\n\n这又启发我，是不是我们可以让用户选择自己的身份，以此推测出关键词？\n\n关键词也需要被定义，有些关键词关乎信息主题（通知、要求），有些关键词描述信息结构（时间、空间）。\n\n### 找到数据中有价值的部分\n比如通知的ddl，比如你的“麦恩莉”给你说的幽会地点，这些都很重要。\n\n### 标注数据的“价值”（推送排序）\n## 以什么频率处理数据？\n## 处理后的数据以什么形式储存？\n也是取决于定义的接口，大概率协议是什么样的我们就存储什么样的数据。\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章围绕信息提取任务展开，探讨了信息聚合平台应如何通过提取与分类两种路径实现信息浓缩与结构化。作者强调信息价值由用户定义，提出基于身份识别与关键词自定义的个性化推送机制，并讨论了数据类型（文字、图片、PDF等）、处理目标（识别关键信息、标注价值）及存储形式等问题，核心在于构建一个动态适应用户需求的信息浓缩平台。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "作者指出‘信息的意义由获得信息的人定义’，这触及现象学中‘意义建构’的核心议题——信息并非客观存在，而是在主体与世界的交互中被赋予价值。这种观点呼应了海德格尔对‘此在’（Dasein）的理解：人总是已在世界之中，并通过关切（care）赋予事物意义。",
                    "connection": "海德格尔的此在（Dasein）理论"
                },
                {
                    "domain": "计算机科学",
                    "analysis": "文章提出的‘信息浓缩平台’本质上是在设计一种人机协同的信息过滤系统，其依赖关键词提取、分类与用户反馈机制，这与推荐系统中的主动学习（active learning）和上下文感知计算密切相关。系统需在不确定性和用户意图模糊的情况下动态优化信息呈现。",
                    "connection": "上下文感知计算（Context-Aware Computing）"
                }
            ],
            "open_question": "如果信息的价值完全由用户主观定义，那么是否存在一种元机制，能够识别并协调不同用户对同一信息的冲突性价值判断，从而在聚合平台中实现既个性化又公共性的信息生态？"
        },
        "processed_at": "2025-09-29T10:52:33.915718",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "日常学习类-python分支-李国赫",
        "slug": "lk7d8bm1dn0pckk6",
        "url": null,
        "published_at": "2025-09-28T02:20:47.000Z",
        "content": "现在依旧陷在那个380\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章标题虽指向Python编程中的分支结构学习，但正文内容极为简略且语义模糊，仅提及‘现在依旧陷在那个380’，缺乏对编程概念的实质性阐述。可能暗示作者在学习过程中遭遇困难或瓶颈，如代码调试、逻辑理解或课程压力，但未展开说明。整体缺乏明确论点与结论，核心思想难以准确提炼。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "从计算机科学角度看，'陷在那个380'可能隐喻程序执行流程中的死循环或条件分支逻辑错误，导致程序无法正常退出或进展。这反映了初学者在掌握控制流结构（如if-else、循环）时常见的认知障碍。",
                    "connection": "该表述与‘控制流图’（Control Flow Graph）概念相关，其中节点380可能象征某个难以跳出的代码块或状态，体现了程序路径分析中的可达性与终止性问题。"
                },
                {
                    "domain": "哲学",
                    "analysis": "从存在主义哲学视角看，‘陷在’一词暗示了一种主体在技术学习过程中的异化或焦虑状态，个体在面对复杂符号系统时感受到的无力与停滞，类似于海德格尔所描述的‘沉沦’（Verfallen）状态。",
                    "connection": "这与海德格尔的‘此在’（Dasein）概念相呼应，即人在面对技术世界时如何保持本真性，避免被工具理性完全支配，从而在学习困境中重新寻回自我理解与行动自由。"
                }
            ],
            "open_question": "当学习者在编程过程中陷入看似无法突破的认知瓶颈时，这种‘停滞’状态在神经认知层面反映了怎样的学习机制？它是否可能成为深度理解的必要前奏？"
        },
        "processed_at": "2025-09-29T10:52:42.432588",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "信息检索类-爬虫分支-黄思睿",
        "slug": "cevzbtygbb96265g",
        "url": null,
        "published_at": "2025-09-28T10:21:05.000Z",
        "content": "以下是 Python 爬虫的入门教程。\n\n\n\n**什么是网络爬虫**\n\n网络爬虫（Web Crawler）是一种自动浏览网页的程序，用于从互联网上收集信息。爬虫会按照一定的规则，自动地抓取网页内容，并提取所需的数据。\n\n\n\n**准备工作**\n\n安装必要的库\n\n1. requests: 用于发送HTTP请求\n2. beautifulsoup4: 用于解析HTML和XML文档\n\n（这些只是最基本的库，只能实现一些简单的爬虫功能）\n\n\n\n**学习前必须依次了解以下概念**\n\n1. 你的浏览器从你进入一个网址起，到最终将美观的网页呈现在屏幕上的过程、原理。\n2. URL\n3. HTTP请求和HTTP响应的格式，以及用户代理、状态码、状态消息是什么。\n4. HTML文件是什么，和它的一些最基本的语法、标签类型。\n\n\n\n**正式开始爬虫学习**\n\n爬虫的步骤主要分为三步：\n\n1. 向服务器发送HTTP请求，服务器响应并以HTML格式返回一个文件（当然现代网站返回的文件类型非常多样，但这个教程只讲最基本的爬虫操作）。\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章介绍了网络爬虫的基本概念、所需工具（如requests和BeautifulSoup库）及学习前提知识，包括浏览器工作原理、URL、HTTP协议和HTML基础。其核心在于阐明爬虫通过模拟浏览器向服务器发送请求、获取并解析HTML内容以提取数据的基本流程，强调理解网络通信底层机制是掌握爬虫技术的前提。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "爬虫作为自动化信息采集工具，隐含了对‘知识获取’方式的哲学反思：它剥离了人类感知与理解的语境，仅以符号形式抓取数据，可能忽视信息的意义与价值。这呼应了现象学对‘技术中介’如何遮蔽存在本真性的批判。",
                    "connection": "海德格尔的‘技术座架’（Gestell）概念指出，现代技术将世界简化为可计算、可操控的资源，爬虫正是这种思维的体现——将网页内容视为待提取的数据资源，而非承载意义的文本。"
                },
                {
                    "domain": "社会学",
                    "analysis": "网络爬虫在数据采集中的广泛应用，重塑了信息权力的分配结构。掌握爬虫技术的个体或机构能够大规模获取公开但分散的社会行为痕迹（如评论、浏览记录），从而在数字场域中占据信息优势地位。",
                    "connection": "布迪厄的‘社会场域’（social field）理论认为，不同行动者凭借特定资本在场域中竞争。爬虫能力构成一种新型‘技术资本’，使行动者能在信息场域中获取象征资本与经济资本，加剧数字不平等。"
                }
            ],
            "open_question": "当爬虫大规模自动化地抓取人类在网络中留下的语言与行为痕迹时，我们是否正在构建一种脱离主体意图的‘数字他者’？这种数据化表征如何影响我们对社会现实的理解与干预？"
        },
        "processed_at": "2025-09-29T10:52:46.945145",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "非纯技术类-余铭航",
        "slug": "dwyvgm8ud3r8onh1",
        "url": null,
        "published_at": "2025-09-28T04:15:15.000Z",
        "content": "## 概述\n（尝试）解决[非纯组文档](https://nova.yuque.com/ph25ri/ua1c3q/gnfz08x2fcuu3gzv)中**消息推送**的问题：\n\n+ **1.1 满足个性化需求（如：定制范围、定制内容、跟踪某篇文档）**\n+ **1.3 推送渠道尽量整合到用户常用的工具中，尽量不要让用户培养新的行为习惯**\n\n> 似乎柴溪晨同学在做这件事。把问题拆解完之后想和这位同学聊一聊\n>\n\n+ **1.4 更具推送内容的性质，自定义推送频率**\n    - **1.6 自定义推送到用户的时间段**\n    - **1.7 对于关键信息（如DDL、通知公告类，能有单独推送机制）**\n    - **1.8 探索文档推送频率和文档发布时间的一种动态关系**\n\n> 所以说直接一次性推送完不就行了吗，为什么要去探究“动态关系”？或许我们可以把语雀做成类似于贴吧那种推送机制？但是真的会有那么多人会去看那么多篇文档吗（~~除了谷老师~~）？\n>\n\n## 进度\n- [x] 写完WHAT\n    - [x] 定制范围\n    - [x] 定制内容\n    - [x] 定制分类和频率\n    - [x] 用大模型想点新东西\n- [ ] 做完HOW\n    - [ ] 定制范围\n    - [ ] 定制内容\n    - [ ] 定制分类与频率\n\n## 正文\n### 先做个问题拆解\n#### 和WHY相关的部分\n+ 需要提升信息共享的准确度和信息分享的效率\n+ 有些用户撰写的文档的不太适合他人阅读，最终无法实现知识共享的目标\n\n#### 可能相关的问题\n+ 消息推送\n    - 筛除一些信息密度较低的推送内容\n    - 对推送内容进行简单的AI加工（如总结或者增加推荐机制）\n+ 强化组的概念，加强组内的合作和交流\n    - 丰富交流结构（1对1,1对多，多对多，及时型、非及时型）\n+ 需要一种精准的检索工具\n    - 搭建推荐系统\n\n（我感觉写1.2这一段意义不明。不过既然都相关了那也列出来吧，总觉得以后有用）\n\n#### WHAT\n1. 定制范围\n    1. 选择想要推送的团队/人/issue/文档/标签\n        1. 跟踪某篇文档章节的更新\n        2. issue状态为已完成时才推送\n    2. 屏蔽不想要推送的团队/人/issue/文档/标签\n    3. 选择想要推送的话题/关键词相关的文档/issue\n    4. 随机推送一些屏蔽范围以外的其他东西\n        1. 定制长度、人、组、数量、标签\n        2. 定制推送频率\n        3. 提供不感兴趣的选项，优化算法\n\n> 以打破信息茧房？话说这个有必要吗\n>\n\n    5. 评论也需要被推送~~（点赞就不需要了吧）~~\n2. 定制内容\n    1. 在推送时对更新的内容和所有内容进行概括（使用llm或作者本人的概括）\n    2. 以某种形式量化更新的大小\n    3. 显示和用户在意的关键词如何匹配的一行字（例如`包含：xx`）\n    4. 可以定制需要推送的部分（标题，姓名，时间，概述，更改内容）\n        1. 定制推送模板\n    5. 通过推送跳转到更新后的文档时将更新部分高亮显示\n    6. 摘要\n        1. 每周的文档摘要（点赞/评论数高，自己撰写/参与的文档/issue的进度总结）\n        2. 自定义时段的文档摘要\n3. 定制分类与频率\n    1. DDL、通知公告类需要有单独推送机制（与通常信息不在同一位置/以一种更显眼的方式呈现）\n    2. DDL在给定时间之前再推送一次\n    3. 更早的文档应当以更低的优先级推送\n    4. 设定一个固定的推送时间/设定一个勿打扰时间，该时间只有指定分组（公告，自选分组等）的信息可以被立刻推送\n    5. 设定一个默认期限取消订阅\n    6. 提供一个面板去操作这一切（大改语雀！）\n\n欢迎各位来补充想法，也欢迎其他组同学帮我把功能做了（bushi）\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章聚焦于优化语雀平台的消息推送机制，旨在提升信息共享的精准性与效率。作者提出应支持用户高度定制推送范围、内容与频率，并整合至常用工具以避免行为习惯迁移。关键信息（如DDL）需独立推送机制，同时探索推送频率与文档发布时间的动态关系。此外，建议引入AI摘要、关键词匹配、更新高亮等功能，并反思信息茧房与用户注意力分配问题。",
            "cross_disciplinary_insights": [
                {
                    "domain": "社会学",
                    "analysis": "该推送系统设计实质上在重构数字环境中的信息流动结构，试图在个体注意力稀缺与群体知识共享之间建立新平衡。通过定制化与算法干预，系统既强化了用户对信息环境的控制感，又隐含了平台对‘有效信息’的定义权，这涉及数字时代社会权力的再分配。",
                    "connection": "布尔迪厄的‘社会场域’理论：推送机制构建了一个以注意力为资本、以算法为规则的知识场域，用户在其中进行策略性选择，而平台则通过规则设定影响场域内的权力结构。"
                },
                {
                    "domain": "哲学",
                    "analysis": "文章隐含对‘信息过载’与‘认知自主性’的哲学关切。推送系统试图通过技术手段缓解用户认知负担，但同时也可能削弱用户主动探索与判断的能力。这触及技术中介下人类认知主体性的边界问题：当AI决定我们‘需要知道什么’，我们是否仍保有完整的认知自由？",
                    "connection": "海德格尔的‘技术座架’（Gestell）概念：推送系统作为现代技术的一种表现，不仅传递信息，更以‘订造’（challenging-forth）方式将知识简化为可调度的资源，可能遮蔽知识本身的丰富性与存在意义。"
                }
            ],
            "open_question": "在个性化推送日益精准的背景下，如何设计既能提升信息效率又不加剧认知封闭或算法依赖的系统？是否存在一种‘负责任的注意力引导’机制，能在尊重用户自主性的同时促进跨领域知识接触？"
        },
        "processed_at": "2025-09-29T10:52:47.176034",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "日常学习类-数学分支-黄满裕",
        "slug": "cgfsbta5oqwxdary",
        "url": null,
        "published_at": "2025-09-28T02:14:16.000Z",
        "content": "**行前有所思**\n\n****\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章标题暗示其内容聚焦于日常学习中的数学分支探讨，作者为黄满裕。然而，所提供的正文内容为空，仅包含标题与格式占位符，无法提取具体论点、论证过程或结论。因此，核心思想无法明确，仅能推测其可能涉及数学在日常学习语境下的应用、认知或教学方法。",
            "cross_disciplinary_insights": [
                {
                    "domain": "认知科学",
                    "analysis": "即便文章内容缺失，仅从标题可引发对数学学习如何嵌入日常认知过程的思考。数学不仅是抽象符号系统，更是人类思维结构的体现。日常学习中的数学实践可能反映人类如何通过具身经验构建抽象概念。",
                    "connection": "与认知科学中的‘概念隐喻理论’（Conceptual Metaphor Theory）相关，该理论认为抽象数学概念常源于身体经验与空间直觉。"
                },
                {
                    "domain": "哲学",
                    "analysis": "数学作为理性思维的典范，其在日常学习中的呈现方式触及知识论问题：我们如何获得数学知识？它是被发现还是被建构？日常学习情境可能揭示数学知识的社会性与历史性维度。",
                    "connection": "联系到伊曼努尔·康德的‘先天综合判断’概念，即数学命题既具普遍必然性，又扩展知识，其可能性依赖于人类感性与知性的先验结构。"
                }
            ],
            "open_question": "在日常学习实践中，数学的抽象性如何通过具身经验与社会互动被内化？这种内化过程是否揭示了人类理性本身的生成机制？"
        },
        "processed_at": "2025-09-29T10:52:49.097572",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "信息检索类—爬虫分支—马然理",
        "slug": "ic49by0i41lkk3h2",
        "url": null,
        "published_at": "2025-09-28T00:06:02.000Z",
        "content": "\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章标题暗示其内容聚焦于信息检索技术中的网络爬虫分支，并可能以‘马然理’为案例、作者或隐喻性指代。尽管正文内容缺失，但从标题结构可推断，文章可能探讨爬虫技术在信息获取、数据伦理或知识组织中的角色，或反思自动化信息采集对知识生产与社会结构的影响。核心论点或涉及技术工具性与人文价值之间的张力。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "若将爬虫视为一种‘认知代理’，其自动抓取与筛选信息的行为可引发对知识获取本质的哲学反思：谁定义了‘相关信息’？算法是否隐含认识论偏见？这触及知识论中关于客观性、主体性与中介技术的讨论。",
                    "connection": "与海德格尔对技术‘座架’（Gestell）的批判相呼应——技术不仅工具，更重塑人与世界的关系，爬虫作为现代‘座架’之一，可能遮蔽而非揭示信息的本真性。"
                },
                {
                    "domain": "社会学",
                    "analysis": "网络爬虫大规模采集公开数据的行为，实质上重构了信息的可见性与权力分配。某些群体或话语可能因算法偏好被放大，而边缘声音则被系统性忽略，从而再生产数字时代的结构性不平等。",
                    "connection": "与布迪厄的‘社会场域’理论相关：爬虫所构建的信息生态可视为一个新型文化资本场域，其中算法逻辑成为新的‘惯习’，决定哪些知识被认可、传播与积累。"
                }
            ],
            "open_question": "当信息爬取的边界日益模糊公共与私人、开放与敏感的界限时，我们是否需要一种新的‘数字认识伦理’来规范自动化知识采集？这种伦理应基于何种哲学与社会原则？"
        },
        "processed_at": "2025-09-29T10:52:52.014663",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-Excel分支-唐宇恩",
        "slug": "nuxu87p02zq51guf",
        "url": null,
        "published_at": "2025-09-27T23:42:26.000Z",
        "content": "行前所思\n\n这周选择了Python实操，也是一次跳出舒适圈的尝试，希望能够通过这次的任务，对PBL学习有一个初步的体会。\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章作者作为南京大学大一学生，选择参与Python实操任务，视其为一次跳出舒适圈的尝试，并希望通过该实践初步体验项目式学习（PBL）的模式。尽管内容简短，但体现出对主动学习、跨领域技能掌握以及教育方法论的初步反思，强调了在真实任务中学习编程与解决问题的重要性。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "从计算机科学角度看，作者参与Python实操并聚焦Excel分支，反映出对工具性编程与数据处理能力的重视。这种实践导向的学习方式契合现代计算教育中‘做中学’（learning by doing）的理念，也体现了编程作为通用技能在多学科交叉中的基础地位。",
                    "connection": "这与‘计算思维’（Computational Thinking）概念紧密相关，即通过抽象、分解、模式识别和算法设计来解决现实问题，是计算机科学教育的核心目标之一。"
                },
                {
                    "domain": "哲学",
                    "analysis": "从哲学视角看，作者‘跳出舒适圈’的表述隐含了对自我认知边界与知识获取方式的反思。这种主动寻求挑战的姿态，可视为对‘认识论舒适区’的突破，呼应了哲学中关于主体如何通过实践重构认知结构的讨论。",
                    "connection": "这与海德格尔的‘此在’（Dasein）概念有所关联——个体通过‘在世存在’（Being-in-the-world）的实践活动，不断揭示自身与世界的关系，从而实现本真性的认知与成长。"
                }
            ],
            "open_question": "在项目式学习日益普及的背景下，如何从认知科学和教育哲学的角度，系统评估‘跳出舒适圈’式学习对大学生元认知能力与跨学科整合能力的长期影响？"
        },
        "processed_at": "2025-09-29T10:53:05.468079",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "日常学习类-数学分支-李尚贤",
        "slug": "kac361b3c1q305cz",
        "url": null,
        "published_at": "2025-09-28T01:43:46.000Z",
        "content": "# 行前有所思\n一直以来数学的学习主要是依赖网课上题目的讲解（从初中到高中），看网课，整理错题和好题到笔记本上，此外再做一些学校的练习题（学校的题也很多）\n\n那到了大学，在没有学校给提供的各种题目以及数学课并不像高中一样每天一节。上微积分两周以来，发现自己存在以下问题：\n\n 周老师讲得太快了，本人真的跟不上，上课没有办法做到既做笔记又听课，但是数学公式，证明过程这些不写不行，等课下再回来看又发现自己看不懂，于是一天下来感觉没学到什么。\n\n所以预习显得格外重要，鉴于老师上课的速度，有必要在课前通过看网课提前预习，对学习内容足够熟悉（感觉课上难度还是蛮大的）。\n\n另外对课本例题的整理以及其他习题的练习也是必须的。\n\n# 我在做什么\n刷B站上宋浩老师的网课，课难度不大，比较基础，很适合预习，老师讲的也很易懂，课下有不懂的也及时回过头来看+理解。\n\n做题，首先是课本习题，然后是例题的整理，能做到独立准确地完成例题。平时首先要把课本上的题都搞懂，如果做完还有时间的话就可以多刷一些题。我一直认为数学是需要刷题的，多写多算，这个过程中也是增加熟练度和提高对定理公式的理解运用的程度。\n\n# 我遇到的一些问题\n\n\n\n\n\n\n\n\n\n\n\n\n# 总结和感悟\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章反思了作者从高中到大学数学学习方式的转变困境，指出大学课堂节奏快、缺乏系统练习资源，导致听课与记笔记难以兼顾，知识吸收效率低。作者提出通过课前观看网课（如B站宋浩课程）预习、精研课本例题与习题、坚持刷题以提升熟练度和理解力等策略，强调预习与主动练习在大学数学学习中的关键作用。",
            "cross_disciplinary_insights": [
                {
                    "domain": "认知科学",
                    "analysis": "作者描述的学习困境——无法同时听课与记笔记、课后回看笔记却难以理解——反映了工作记忆容量有限与认知负荷过载的问题。有效的预习能将新知识与已有图式整合，降低内在认知负荷，使课堂时间更聚焦于深度加工而非初次解码。",
                    "connection": "该现象与认知负荷理论（Cognitive Load Theory）密切相关，该理论强调教学设计应优化信息呈现方式以匹配人类认知架构。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者对‘理解’的追求——不仅会做题，更要真正掌握定理与证明的逻辑——触及知识论中‘知道如何’（knowing-how）与‘知道为何’（knowing-why）的区分。机械刷题若缺乏反思，仅停留在操作层面，而真正的数学理解需通达概念的本质与结构。",
                    "connection": "这呼应了迈克尔·波兰尼（Michael Polanyi）提出的‘默会知识’（tacit knowledge）概念，即深层理解往往无法完全通过符号化笔记传递，需在实践中内化。"
                }
            ],
            "open_question": "在人工智能辅助教育日益普及的背景下，如何设计既能降低认知负荷又能促进深层概念理解的个性化数学学习系统？"
        },
        "processed_at": "2025-09-29T10:53:07.305004",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-LLM分支-卢思洽",
        "slug": "rluf291w0i8cxwy1",
        "url": null,
        "published_at": "2025-09-27T14:40:43.000Z",
        "content": "### 行前有所思：\n继续沿着上周的行动，目前已经在测试廖雪峰的python教程（毕竟界面比较好看）\n\n#### 针对我上周撰述的问题及粗略的解决方案先提出一点反思\n![](https://cdn.nlark.com/yuque/0/2025/png/58916070/1759076917458-fbf593bf-47cf-49b3-a542-99e5148130bf.png)\n\n关于时间规划这个问题，在nova之外已经尝了很多苦头了（都是赶不过ddl而错失机会）。分析一下问题：很多时候无意识地摸社交平台，看看手机这一种是都是习惯性的做法，我觉得除了前置做事之外也应该要保持头脑清醒，保持尽量有个旁观者一样的清晰头脑去办事，培养意识到自己的时间和此时所做的事情的习惯。而要保持头脑清醒，也就要注意自己的生理状态，保证充足的睡眠。\n\n而关于后面学习资源的复杂性，鉴于时间成本不够，我觉得一方面可以参考网上评价，另一方面就是挑准的就开始干（我现在就在尝试廖雪峰的python教程，但该教程对于一些原理和用法的描述仍不够全面，我还是要借助搜索工具/python官方文档来纠正/补充内容)在今晚通识课学了2-3章语法（其实如果能更专注应该能更好点)\n\n#### 为什么要选择这个分支\n这是配合我的学习框架作为一种反馈，同时也是进一步学习LLM与python的渠道\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章作者反思了时间管理问题，指出无意识刷手机等习惯性行为导致效率低下，并强调保持头脑清醒、关注生理状态（如充足睡眠）对高效学习的重要性。在学习资源选择上，作者采取务实策略：结合廖雪峰Python教程与官方文档及搜索工具互补学习，以应对时间成本限制。选择LLM与Python分支既是对个人学习框架的实践反馈，也是深入技术领域的路径。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "作者强调‘保持旁观者一样的清晰头脑’，体现出对自我意识与反思性思维的重视，这与现象学中‘回到事物本身’的主张相呼应。通过觉察自身行为与时间使用，作者试图摆脱日常生活的‘沉沦’状态，实现一种更本真的存在方式。",
                    "connection": "海德格尔的‘此在’（Dasein）概念，强调人对自身存在的觉知与筹划，与作者试图通过自我观察打破无意识行为模式的努力高度契合。"
                },
                {
                    "domain": "神经科学",
                    "analysis": "作者提到保证睡眠以维持头脑清醒，这直接关联到认知控制与执行功能的神经基础。前额叶皮层在注意力调控、抑制冲动行为（如无意识刷手机）中起关键作用，而睡眠剥夺会显著削弱其功能，导致自我调节能力下降。",
                    "connection": "执行功能（Executive Function）理论，该理论解释了个体如何计划、专注、抑制干扰并灵活调整行为，与作者试图通过生理调节提升学习效率的实践密切相关。"
                }
            ],
            "open_question": "在数字媒介高度渗透的日常生活中，如何构建一种既能利用技术工具提升学习效率，又能抵御其对注意力与自我意识侵蚀的认知-行为框架？"
        },
        "processed_at": "2025-09-29T10:53:08.057260",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "日常学习类-python分支-何亦成",
        "slug": "ghhy5nios0y1089c",
        "url": null,
        "published_at": "2025-09-27T15:18:06.000Z",
        "content": "## 写在前面\n尽管cac强烈建议我们尽早迈出步子，进入实践组，我也一度准备这样干。但是看了这次的要求，我决定还是选择日常学习类。为什么？这次的的日常学习组的自主性非常高：从自身出发的PBL。那么，我可以凭借实践组的任务为其中的一个载体，利用国庆的假期深入发问与学习。选择这个分支可以完美地利用漏洞实现对多个分支的选择，这意味着我还可以自由地额外做实操类，信息检索类，实践操作类（太菜，估计做不了）的事，真不错。\n\n## 正文\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章作者原计划加入实践组，但因本次日常学习类任务强调高度自主性，尤其是基于问题的学习（PBL）模式，转而选择该路径。作者意图借国庆假期，以实践任务为载体，深入探索个人兴趣问题，并灵活融合实操、信息检索等其他学习形式，体现出对学习路径的策略性规划与对多元学习方式的整合意识。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "作者在面对制度性学习路径时，主动选择更具自主性的模式，体现出对‘自我导向’与‘存在方式’的反思。这种选择不仅是策略性的，更是一种对学习本质的哲学追问：学习是为了完成任务，还是为了实现自我建构？",
                    "connection": "海德格尔的‘此在’（Dasein）概念强调个体在世界中的主动性和自我筹划，作者通过自主设定学习路径，正是‘此在’自我展开的体现。"
                },
                {
                    "domain": "计算机科学",
                    "analysis": "作者将学习任务视为可组合、可调度的模块，体现出类似‘元学习’（meta-learning）或‘学习系统设计’的思维。他试图在制度框架内寻找‘漏洞’以最大化自由度，这种策略类似于在约束条件下优化目标函数。",
                    "connection": "这与强化学习中的‘探索-利用权衡’（exploration-exploitation tradeoff）相呼应：在已知路径（利用）与未知可能性（探索）之间做出策略性选择。"
                }
            ],
            "open_question": "在一个高度结构化的教育系统中，个体如何通过策略性选择实现真正的自主学习？这种‘制度内自由’是否可能成为通向批判性思维与跨学科创新的路径？"
        },
        "processed_at": "2025-09-29T10:53:08.138186",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-LLM分支-陈逸铭",
        "slug": "ivmrgi73pgyozrdx",
        "url": null,
        "published_at": "2025-09-27T23:42:54.000Z",
        "content": "我们来试一试分阶段分解这个学习任务\n\n1. 通过Python调用某个LLM的API，从而实现程序调用LLM的功能\n2. 尝试通过语雀Token，获取一篇文档的内容，并将其发送到某个LLM进行文档总结\n3. 通过Python，搭建一个简单的工作流（通过语雀Token，获取选择同一个分支的所有文档，然后利用LLM进行单篇文档的总结，再将这些总结再次提交给LLM，生成一份所有社员在该分支上的研究报告）\n4. 安装部署Dify并试用\n\n# 行前有所思\n选这个分支是因为，感觉如果能通过python搭建一个简单的工作流，就相当于自己能够亲手完成一个简单的项目，就是让自己的操作更有实践感和成果感，而且它确实在今后的语雀文档阅读中有重要作用，因为那么多人的文档，说实话很难全都读得过来，或者说全都能够细读下来，如果能够让大模型进行精简，能够方便许多。\n\n而且cac也建议我们选择实操类，操作似乎看上去很难，但是实际上是可以通过大模型和自己的尝试来完成的，这也让我认识到nova社的学习过程更多的是思维过程的培养，而不是一个循序渐进，按部就班的学习（或许学校python课才是），也许这就是核心竞争力的可视化？\n\n# 任务详细过程、问题与解决\n## 通过Python调用某个LLM的API，从而实现程序调用LLM的功能\n首先，询问ds老师：\n\n### <font style=\"color:rgb(15, 17, 21);\">🛠️</font><font style=\"color:rgb(15, 17, 21);\"> 第一步：准备工作</font>\n<font style=\"color:rgb(15, 17, 21);\">在开始写代码之前，你需要完成以下两项准备：</font>\n\n1. **<font style=\"color:rgb(15, 17, 21);\">获取 API Key</font>**<font style=\"color:rgb(15, 17, 21);\">：</font>\n    - <font style=\"color:rgb(15, 17, 21);\">访问 DeepSeek 的官方平台 (</font>[<font style=\"color:rgb(57, 100, 254);\">https://platform.deepseek.com/api_keys</font>](https://platform.deepseek.com/api_keys)<font style=\"color:rgb(15, 17, 21);\">) 并注册/登录账号</font><font style=\"color:rgb(15, 17, 21);\">。</font>\n    - <font style=\"color:rgb(15, 17, 21);\">在控制台中找到“API Keys” section，点击“创建密钥”按钮</font><font style=\"color:rgb(15, 17, 21);\">。</font>\n    - <font style=\"color:rgb(15, 17, 21);\">为你的密钥起一个易于识别的名字（例如“我的项目”），然后复制生成的以</font><font style=\"color:rgb(15, 17, 21);\"> </font>`<font style=\"color:rgb(15, 17, 21);background-color:rgb(235, 238, 242);\">sk-</font>`<font style=\"color:rgb(15, 17, 21);\"> </font><font style=\"color:rgb(15, 17, 21);\">开头的 API Key</font><font style=\"color:rgb(15, 17, 21);\">。</font>**<font style=\"color:rgb(15, 17, 21);\">请务必妥善保存此密钥，因为它只显示一次</font>**<font style=\"color:rgb(15, 17, 21);\">。</font>\n\n**<font style=\"color:rgb(15, 17, 21);\">安装必要的库</font>**<font style=\"color:rgb(15, 17, 21);\">：</font>\n\n    - <font style=\"color:rgb(15, 17, 21);\">你需要安装 </font>`<font style=\"color:rgb(15, 17, 21);background-color:rgb(235, 238, 242);\">openai</font>`<font style=\"color:rgb(15, 17, 21);\"> 库。可以通过 pip 在命令行（终端）中完成安装。</font>\n\n```plain\npip install openai\n```\n\n开工~\n\n不对，我好像还不太清楚什么是API，先了解一下：\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759048527938-a2325db2-84b0-4325-96b1-07284c4c1c73.png)\n\n明白了，类似一个中转站，连接用户和第三方平台的数据。\n\n在pycharm安装openai（突然发现它是两个单词连在一起的，一开始分开来还没搜到）\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759049671710-1a32461a-3be4-454c-8d18-38dc0daee826.png)\n\n### <font style=\"color:rgb(15, 17, 21);\">💻</font><font style=\"color:rgb(15, 17, 21);\">第二步：编写 Python 代码</font>\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759049888950-98b6c20e-951b-49c4-89f2-7dce14c29118.png)\n\n等等，什么是openai sdk?\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759050381429-8c29e9b2-aa05-407e-a52b-cf0109cb486a.png)\n\n于是我有了一个问题，open AI和OpenAI SDK是什么关系？\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759050517324-d431cbea-ff47-4c72-a6f6-2e2366be5a22.png)\n\n这下子弄明白了\n\n```plain\nfrom openai import OpenAI\n\n# 初始化客户端，关键是指定 DeepSeek 的 API 地址\nclient = OpenAI(\n    api_key=\"你的API_Key\",  # 请替换为你在第一步获取的真实 API Key\n    base_url=\"https://api.deepseek.com\"  # 指定 DeepSeek 的 API 端点\n)\n\n# 构建请求\nresponse = client.chat.completions.create(\n    model=\"deepseek-chat\",  # 指定模型。也可以使用 \"deepseek-reasoner\" (DeepSeek-R1)\n    messages=[\n        {\"role\": \"system\", \"content\": \"你是一个有帮助的助手\"},\n        {\"role\": \"user\", \"content\": \"请用简单的语言解释什么是人工智能？\"}\n    ],\n    stream=False  # 设置为 True 可以开启流式传输，适合逐字输出的场景\n)\n\n# 打印AI的回复\nprint(response.choices[0].message.content)\n```\n\n报错(余额不足）：\n\nopenai.APIStatusError: Error code: 402 - {'error': {'message': 'Insufficient Balance', 'type': 'unknown_error', 'param': None, 'code': 'invalid_request_error'}}\n\n经过询问，我这才知道DeepSeek的API是要付费的，虽然在与我的交流中deepseek自称会赠送我10块钱tokens的额度，但很显然，这个服务现在已经没有了，于是寻找免费API：\n\n通过抖音视频和deepseek询问，最终中选择了通过openrouter调用deepseekV3（见视频1：16）：\n\n[此处为语雀卡片，点击链接查看](https://www.yuque.com/ph25ri/ua1c3q/ivmrgi73pgyozrdx#UHgTN)\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759061933687-0784f597-c7ef-41cc-8788-fe92ea96d603.png)\n\n```plain\nimport requests\nimport json\n\n# 1. 配置你的信息\napi_key = \"你的 OpenRouter API Key\"  # 请替换成你的真实 API Key\nurl = \"https://openrouter.ai/api/v1/chat/completions\"\n\n# 2. 设置请求头\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\",\n    \"Content-Type\": \"application/json\",\n    \"HTTP-Referer\": \"<YOUR_SITE_URL>\",  # 可选：你的网站URL，用于OpenRouter排名\n    \"X-Title\": \"<YOUR_SITE_NAME>\",      # 可选：你的网站名称\n}\n\n# 3. 构造请求数据\ndata = {\n    \"model\": \"deepseek/deepseek-chat-v3-0324:free\",  # 指定模型\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"请用简单的术语解释什么是人工智能。\"}\n    ],\n    \"temperature\": 0.7,  # 控制回复的随机性，范围0-2\n    \"max_tokens\": 1000   # 控制回复的最大长度\n}\n\n# 4. 发送请求\nresponse = requests.post(url, headers=headers, data=json.dumps(data))\n\n# 5. 处理响应\nif response.status_code == 200:\n    result = response.json()\n    assistant_reply = result[\"choices\"][0][\"message\"][\"content\"]\n    print(\"AI回复：\", assistant_reply)\n    # 打印token消耗情况\n    usage = result.get(\"usage\", {})\n    print(f\"Token使用情况：{usage}\")\nelse:\n    print(f\"请求失败，状态码：{response.status_code}\")\n    print(f\"错误信息：{response.text}\")\n```\n\n我将两个“可选”删掉（因为对个人来讲只有轻微的管理意义，也不影响程序的运行）使用密钥，结果报错：\n\n请求失败，状态码：429\n\n错误信息：{\"error\":{\"message\":\"Provider returned error\",\"code\":429,\"metadata\":{\"raw\":\"deepseek/deepseek-chat-v3-0324:free is temporarily rate-limited upstream. Please retry shortly, or add your own key to accumulate your rate limits: [https://openrouter.ai/settings/integrations\",\"provider_name\":\"Chutes\"}},\"user_id\":\"user_33KMDsyAo4S4faPrb9Ua7IW92oj\"}](https://openrouter.ai/settings/integrations\",\"provider_name\":\"Chutes\"}},\"user_id\":\"user_33KMDsyAo4S4faPrb9Ua7IW92oj\"})\n\n查询发现：\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759064445648-f74e56a9-331d-44b5-b80b-8b6c73437496.png)\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759064553060-65e7d85e-fe0c-45db-9e35-178add3f4139.png)\n\n于是更改模型名为google/gemma-2-9b-it:free\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759064829219-241c6915-0e27-4710-8195-58c386edaa5f.png)\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759065191379-6beb0ca4-2cab-4529-8a6e-cd991d5fca0e.png)\n\n由于看见大模型回复的太短了，一个汉字的约等于1到2个token的情况下，消耗了100个token，然而，在这个程序里，我仅仅规定了回复的最大长度，却没有规定一个范围，比如500到1000，可能是一个比较好的数字，那么我想我应该怎么修改呢？\n\n```plain\nimport requests\nimport json\n\n# 1. 配置你的信息\napi_key = \"你的 OpenRouter API Key\"  # 请替换成你的真实 API Key\nurl = \"https://openrouter.ai/api/v1/chat/completions\"\n\n# 2. 设置请求头\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\",\n    \"Content-Type\": \"application/json\",\n    \"HTTP-Referer\": \"<YOUR_SITE_URL>\",  # 可选：你的网站URL，用于OpenRouter排名\n    \"X-Title\": \"<YOUR_SITE_NAME>\",      # 可选：你的网站名称\n}\n\n# 3. 构造请求数据 - 通过提示词控制token范围\ntoken_range = \"100-300\"  # 你可以修改这个范围，如 \"50-150\", \"200-500\" 等\nuser_message = \"请用简单的术语解释什么是人工智能。\"\n\n# 在提示词中明确要求回答长度范围\nenhanced_message = f\"{user_message}\\n\\n请控制回答长度在{token_range}个token范围内。\"\n\ndata = {\n    \"model\": \"你使用的大模型名称\",  # 替换成你成功使用的大模型\n    \"messages\": [\n        {\"role\": \"user\", \"content\": enhanced_message}\n    ],\n    \"temperature\": 0.7,  # 控制回复的随机性，范围0-2\n    \"max_tokens\": int(token_range.split(\"-\")[1])  # 取范围上限作为max_tokens保证安全\n}\n\n# 4. 发送请求\nresponse = requests.post(url, headers=headers, data=json.dumps(data))\n\n# 5. 处理响应\nif response.status_code == 200:\n    result = response.json()\n    assistant_reply = result[\"choices\"][0][\"message\"][\"content\"]\n    print(\"AI回复：\", assistant_reply)\n    # 打印token消耗情况\n    usage = result.get(\"usage\", {})\n    print(f\"Token使用情况：{usage}\")\n    print(f\"请求的token范围：{token_range}\")\nelse:\n    print(f\"请求失败，状态码：{response.status_code}\")\n    print(f\"错误信息：{response.text}\")\n```\n\n\n\n然而，运行出来的结果仍然是只有100多个字，经过查询，我才明白：\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759066451406-43d9ec2c-bd96-422b-81c4-1c42d0321330.png)\n\n问题出在了我提出的问题上：“请用简单的术语解释什么是人工智能。”\n\n事实上，我只要使用更严格的提示词，比如请用600字来解释什么是人工智能，得到的效果就会相当好。\n\n这也就意味着，我并不需要修改一次代码，原来的max 1000的代码也可以用。\n\n至此，第一个小任务基本完成，我只剩下最后一个问题，为什么我在deepseek的官网控制台上调用它的KPI需要充值？但是我在open router上调用deepseek v3却不显示余额不足呢？（失败的原因只是因为429，即被限速了）\n\n查阅ing。。。\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60349199/1759066860350-2630789a-5432-4b79-95ee-e01d4a06a8be.png)\n\n疑问解除。\n\n\n\n## 尝试通过语雀Token，获取一篇文档的内容，并将其发送到某个LLM进行文档总结\n\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位南京大学学生在实操类LLM项目中的探索过程，核心目标是通过Python调用大语言模型API，结合语雀文档系统，构建自动化文档摘要与整合的工作流。作者详细描述了从理解API机制、解决认证与调用问题，到尝试不同免费模型、优化提示词以控制输出长度的全过程，体现出在实践中学习编程与AI集成的思维路径，并反思了项目式学习对思维能力培养的价值。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章展现了现代软件开发中‘胶水编程’的典型范式——通过API将不同服务（如语雀、OpenRouter、LLM）组合成工作流。这种模块化、服务化的架构体现了软件工程中的关注点分离原则，也揭示了AI作为基础设施（AI as a Service）如何重塑应用开发逻辑。",
                    "connection": "这与‘软件定义一切’（Software-Defined Everything）和微服务架构理念紧密相关，强调通过标准化接口集成异构系统，实现灵活、可扩展的智能应用。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者在调试过程中不断调整提示词以引导模型输出，实质上是在与一个非意向性的‘他者’协商意义。这种人机交互揭示了语言作为中介的局限性：我们试图用人类语言精确控制统计模型的行为，却不得不面对其黑箱性与不可预测性。",
                    "connection": "这呼应了维特根斯坦‘语言的界限即世界的界限’思想，也触及海德格尔对技术作为‘解蔽’方式的批判——大模型并非中立工具，而是以特定方式揭示（或遮蔽）知识的媒介。"
                }
            ],
            "open_question": "当我们将知识整理与摘要的劳动外包给大语言模型时，这种‘认知外包’如何重塑我们对理解、记忆与学术共同体协作的本质认知？"
        },
        "processed_at": "2025-09-29T10:53:13.677086",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-Excel分支-卢佳铭",
        "slug": "gxslgg4boult759g",
        "url": null,
        "published_at": "2025-09-27T14:44:55.000Z",
        "content": "9.29\n\n当日任务:搜集实现完成excel处理的几种方式\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章标题为《Python实操类-Excel分支-卢佳铭》，内容简略提及9月29日的任务是搜集实现Excel处理的几种方式。虽未展开具体方法，但核心意图在于探索利用Python编程语言对Excel文件进行自动化操作的技术路径，体现出对数据处理效率提升的实践导向。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "从计算机科学角度看，Excel处理的自动化体现了程序对结构化数据的操作能力，涉及文件I/O、数据结构映射与API调用等基础问题。Python通过如pandas、openpyxl等库实现对Excel的读写，本质上是将电子表格抽象为可计算的数据模型，反映了计算思维中‘问题可计算化’的核心理念。",
                    "connection": "这一实践与‘抽象与自动化’这一计算科学基本范式紧密相关，即通过抽象数据格式并自动化处理流程，降低人类认知负荷。"
                },
                {
                    "domain": "社会学",
                    "analysis": "从社会学视角看，Excel作为现代组织中广泛使用的工具，其自动化处理不仅关乎效率，更折射出数字劳动的转型：重复性文书工作被算法接管，知识工作者的角色从执行者转向设计者。这种转变重塑了职场中的技能结构与权力关系。",
                    "connection": "这与布迪厄的‘社会场域’理论相呼应——技术工具的掌握成为新的文化资本，影响个体在职场场域中的位置与惯习。"
                }
            ],
            "open_question": "当Excel处理等日常办公任务被高度自动化后，人类在知识生产链条中的独特价值将如何重新定义？这是否会导致一种新的‘认知外包’现象，进而影响我们的思维习惯与问题解决能力？"
        },
        "processed_at": "2025-09-29T10:53:21.731448",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "信息检索类-爬虫分支-徐嘉成",
        "slug": "sulqhglq76vvimeb",
        "url": null,
        "published_at": "2025-09-27T14:54:38.000Z",
        "content": "<font style=\"color:#8A8F8D;\">供参考的检索方向：</font>\n\n+ <font style=\"color:#8A8F8D;\">找到一个适合新手的爬虫教程</font>\n+ <font style=\"color:#8A8F8D;\">找到一些适合新手去爬的网站</font>\n+ <font style=\"color:#8A8F8D;\">研究Python爬虫常用的包及其特点</font>\n+ <font style=\"color:#8A8F8D;\">明白常见的几种网站反扒策略</font>\n+ <font style=\"color:#8A8F8D;\">如何使用浏览器的F12控制台查看页面背后发生了什么</font>\n+ <font style=\"color:#8A8F8D;\">什么是IP地址池</font>\n+ <font style=\"color:#8A8F8D;\">什么是网页的Ajax技术</font>\n+ <font style=\"color:#8A8F8D;\">如何搞定呢喃的统一身份认证</font>\n+ <font style=\"color:#8A8F8D;\">其他你觉得感兴趣的相关知识点</font>\n\n<font style=\"color:#8A8F8D;\">请撰写文档，给大家展现一个爬虫科普教程（不准光复制粘贴，太长的教程没人愿意看）</font>\n\n---\n\n## · 什么是爬虫\nPython 爬虫 ( _Web Scraping_ )，是指通过 Python 程序从互联网 **自动提取信息 **的过程。\n\n## · 爬虫怎么做到的\n_<font style=\"color:#8A8F8D;\">*参考资料：菜鸟教程 - Python 爬虫*</font>_\n\n一般来说，可以将爬虫的行为描述为以下几个步骤：\n\n+ **发送 HTTP 请求**：爬虫 _友好地_ 向网页请求 HTML 内容。它可以伪装成浏览器，用代码代替人访问网页；\n+ **解析响应内容**：爬虫 消化 内容，解析并提取有用的数据；\n+ **提取数据**：根据目标定位各种结构与元素；\n+ **存取数据**：将提取到的好东西存储到本地文件中 ( 如 CSV、Excel、JSON、数据库 ) 。\n\n实现 Python 爬虫的库有很多。这里，我们将以`BeauitfulSoup`为例。\n\n> `BeautifulSoup`是一个用于解析 HTML 和 XML 文档的 Python 库，常用于网络抓取与数据挖掘。\n>\n\n## · 我该怎么实现爬虫\n## · 网络爬虫攻防战\n\n\n| **反爬机制** | **何意味** | **爬虫怎么反击** |\n| :---: | :---: | :---: |\n| User-Agent ( 用户代理 ) 检测 | 拒绝无浏览器身份的请求 |  |\n| Referer Check | 请求必须来自指定页面 |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章是一份面向初学者的网络爬虫科普教程，简明介绍了爬虫的基本原理（发送请求、解析内容、提取与存储数据），推荐了BeautifulSoup等工具，并列举了新手可探索的学习方向，如反爬机制、Ajax技术、IP池等。文中强调实践性与合规性，旨在引导读者理解爬虫技术的实现逻辑及其与网站之间的‘攻防’关系。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "爬虫技术触及‘信息获取的伦理边界’问题：自动程序模拟人类行为访问数据，模糊了机器与主体的界限。这引发对‘数字时代知情同意’与‘数据所有权’的哲学反思——当信息被公开但未授权抓取时，是否构成对数字人格或机构意志的侵犯？",
                    "connection": "与海德格尔‘技术作为座架（Gestell）’的概念相关：爬虫作为现代技术的一种，不仅提取数据，更将世界‘订造’为可计算、可操控的资源，遮蔽了信息原本的存在方式。"
                },
                {
                    "domain": "社会学",
                    "analysis": "爬虫实践反映了数字社会中的权力不对称：掌握爬虫技术的个体或组织能大规模获取公开数据，重构信息优势，而网站运营方则通过反爬机制维护控制权。这种动态构成了一种‘数字场域’中的策略博弈，类似于布迪厄所述的资本争夺。",
                    "connection": "呼应布迪厄的‘社会场域（social field）’理论：爬虫与反爬机制的互动，实质是不同行动者在数据场域中争夺文化资本（数据）与象征权力（信息解释权）的过程。"
                }
            ],
            "open_question": "在数据日益成为新型生产资料的背景下，如何在技术可行性、法律合规性与伦理正当性之间构建一个动态平衡的爬虫实践框架？"
        },
        "processed_at": "2025-09-29T10:53:23.201585",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "信息检索类-爬虫分支-陈柯宇",
        "slug": "hpps8q89fyvrsr5l",
        "url": null,
        "published_at": "2025-09-27T14:36:28.000Z",
        "content": "大半夜睡不着，想起cac的教诲，于是爬起来利用碎片化时间（捂脸）\n\n## 爬虫的含义及原理\n之前在ai的帮助下学习了一下实践组的代码，大概了解了一点爬虫的原理，这里就借用一下大佬（也有可能是ai）的工作成果,方便科普。\n\n```plain\nimport requests\n\n# 配置参数（团队知识库专用）\ntoken = \"s91TCRkU7KDHYAqy9F5ACOa4WoYUNZKvpI1hsj2S\"  # 确保token有团队文档访问权限\ndoc_url = \"https://nova.yuque.com/ph25ri/ua1c3q/grsl8i7eadyc196s\"  # 团队知识库URL\nheaders = {\n    \"X-Auth-Token\": token,  # 核心修改：使用 X-Auth-Token 作为认证头\n    \"Content-Type\": \"application/json\"\n}\n\n# 解析URL：提取团队ID、知识库ID、文档ID\npath_parts = doc_url.split(\"/\")[-3:]  # 结果：[团队ID, 知识库ID, 文档ID]\nteam_id, book_id, doc_id = path_parts  # 拆分参数\n\n# 调用团队知识库API\napi_url = f\"https://www.yuque.com/api/v2/repos/{team_id}/{book_id}/docs/{doc_id}\"\nresponse = requests.get(api_url, headers=headers)\n\n# 处理响应\nif response.status_code == 200:\n    doc_data = response.json()\n    print(f\"✅ 团队文档获取成功：{doc_data['data']['title']}\")\n    print(\"文档内容（Markdown）：\\n\", doc_data[\"data\"][\"body\"])\nelse:\n    print(f\"❌ 调用失败：状态码{response.status_code}，原因：{response.text}\")\n```\n\n(用她的代码是因为她的注释写的很清楚，比较方便我看懂)\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章简要介绍了网络爬虫的基本含义与实现原理，通过一段访问语雀团队知识库API的Python代码示例，展示了如何利用认证令牌和HTTP请求获取特定文档内容。作者强调借助AI辅助理解实践代码，并指出清晰注释对学习的重要性。整体内容聚焦于爬虫技术在信息检索中的实际应用，体现了碎片化学习与技术实践的结合。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "该代码体现了现代网络爬虫从公开网页抓取向受控API访问的演进，强调认证、权限与结构化数据交互。这反映了信息系统中数据可访问性与安全性的张力，也展示了程序如何通过标准化接口实现自动化信息获取。",
                    "connection": "与‘RESTful API设计原则’紧密相关，强调资源定位、状态无感知和统一接口，是现代分布式系统中信息检索的基础架构范式。"
                },
                {
                    "domain": "哲学",
                    "analysis": "爬虫行为触及‘知识获取的伦理边界’问题：即便技术上可行，未经明确许可的数据抓取是否正当？这涉及认识论中‘可获取性’与‘合法性’的区分，以及技术行动中的责任归属。",
                    "connection": "呼应海德格尔对技术‘促逼’（Gestell）的批判——技术不仅是一种工具，更是一种揭示世界的方式，可能将信息简化为可提取的资源，遮蔽其本真语境。"
                }
            ],
            "open_question": "当自动化爬虫成为知识生产与流通的基础设施时，我们应如何在技术效率、数据主权与知识公共性之间建立新的伦理与法律平衡？"
        },
        "processed_at": "2025-09-29T10:53:23.813159",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-LLM分支-于粤铭",
        "slug": "mlde2ggpakfo71g4",
        "url": null,
        "published_at": "2025-09-27T14:31:10.000Z",
        "content": "# 写在最前面的碎碎念\n选择实操类的原因在Excel分支的文档里写了，这里就来聊聊选LLM分支的原因吧。\n\n其实在上一次的任务前的碎碎念中我就有提到，我对于LLM的使用以及因此产生的一些问题是一直存在一些，算是思考吧，或是疑问。然后我也愿意相信在这个时代能很好的运用LLM这一工具会是一个很大的优势。所以这个分支我也很乐意去进行一些尝试。\n\n# 任务的进行过程记录\n### 调用API的尝试\n\n\n# 出现的问题与解决方案\n# 最后的总结与思考\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章作者出于对大型语言模型（LLM）应用及其引发问题的持续思考，选择参与LLM实操分支，旨在探索如何有效利用这一当代重要工具。作者表达了对掌握LLM使用技能在未来可能带来显著优势的信念，并记录了调用API的初步尝试，虽内容截断，但整体体现出一种实践导向的探索精神与对技术伦理或认知边界的潜在关切。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "作者对LLM使用中产生的疑问，触及了技术工具与人类认知、理解边界的关系问题。这不仅是技术操作问题，更涉及‘理解是否等同于生成’、‘工具是否重塑思维’等哲学命题。",
                    "connection": "海德格尔的此在（Dasein）概念强调人通过与世界互动而存在，而LLM作为中介工具，可能重构人与知识、语言乃至自我理解的关系，引发对技术存在论的反思。"
                },
                {
                    "domain": "语言学",
                    "analysis": "LLM基于统计模式生成语言，而非基于语义理解，这挑战了传统语言学对语言能力（competence）与语言使用（performance）的区分。作者在实操中可能遭遇语言表面流畅但深层意义缺失的现象。",
                    "connection": "乔姆斯基的生成语法理论强调语言的内在规则与人类先天语言能力，而LLM的黑箱式语言生成机制则提出了对‘语言是否可被纯粹数据驱动建模’的根本性质疑。"
                }
            ],
            "open_question": "当大型语言模型日益成为人类认知与表达的延伸工具，我们应如何重新界定‘理解’‘创造力’与‘作者身份’？这是否要求我们发展一种新的认知伦理框架？"
        },
        "processed_at": "2025-09-29T10:53:24.013474",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-Excel分支-于粤铭",
        "slug": "zamlxpgyq1hes5t7",
        "url": null,
        "published_at": "2025-09-27T14:29:58.000Z",
        "content": "# 写在最前面的碎碎念\n按照惯例，先来说说我为什么会选这个题目吧。（行前碎碎念总是少不了的啦~）\n\n首先呢上一次的任务总结中，cac也提到了建议我们还是去选择实操类。其实不太需要cac来说，我本来也相中了此次的实操组，的确在实践中学习可比枯燥的看视频看PPT有趣多了😋\n\n那么为什么选择Excel分支呢？其实也是有点为未来打算的意思吧，感觉后面pandas库什么的在数据分析中会用的很多，而且这一点也得到了我直系学长的认可。（没错这就是作为数经er的提前打算了）\n\n# 任务的进行过程记录\n### 找到让Python读写Excel的方法\n可以想象，此时的我尚对这方面的知识一片迷茫，这时当然是要求助于LLM的力量啦，于是我开始询问ds老师。（希望我补的一点点Prompt的知识能有一点用）\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59892417/1758984782423-9753325e-0461-4dc3-aa8a-5e2d2f764af9.png)\n\n其实AI生成的answer我是还算满意的，把所用的库的调用语言、优缺点、应用环境讲的挺明白的。\n\n简单总结一下：\n\n| <font style=\"color:rgb(15, 17, 21);\">方法</font> | <font style=\"color:rgb(15, 17, 21);\">读取/写入</font> | <font style=\"color:rgb(15, 17, 21);\">优点</font> | <font style=\"color:rgb(15, 17, 21);\">缺点</font> | <font style=\"color:rgb(15, 17, 21);\">适用场景</font> |\n| --- | --- | --- | --- | --- |\n| **<font style=\"color:rgb(15, 17, 21);\">pandas</font>** | <font style=\"color:rgb(15, 17, 21);\">两者都支持</font> | <font style=\"color:rgb(15, 17, 21);\">简单易用，数据处理能力强</font> | <font style=\"color:rgb(15, 17, 21);\">依赖较多，大型文件可能慢</font> | <font style=\"color:rgb(15, 17, 21);\">数据分析和处理</font> |\n| **<font style=\"color:rgb(15, 17, 21);\">openpyxl</font>** | <font style=\"color:rgb(15, 17, 21);\">两者都支持</font> | <font style=\"color:rgb(15, 17, 21);\">功能全面，支持格式设置</font> | <font style=\"color:rgb(15, 17, 21);\">大型文件性能一般</font> | <font style=\"color:rgb(15, 17, 21);\">需要精细控制格式的读写</font> |\n| **<font style=\"color:rgb(15, 17, 21);\">xlrd</font>** | <font style=\"color:rgb(15, 17, 21);\">只读</font> | <font style=\"color:rgb(15, 17, 21);\">速度快</font> | <font style=\"color:rgb(15, 17, 21);\">不支持新格式，不能写入</font> | <font style=\"color:rgb(15, 17, 21);\">快速读取旧格式Excel</font> |\n| **<font style=\"color:rgb(15, 17, 21);\">xlsxwriter</font>** | <font style=\"color:rgb(15, 17, 21);\">只写</font> | <font style=\"color:rgb(15, 17, 21);\">功能强大，支持高级特性</font> | <font style=\"color:rgb(15, 17, 21);\">不能修改现有文件</font> | <font style=\"color:rgb(15, 17, 21);\">创建复杂格式的报表</font> |\n\n\n<font style=\"color:#000000;\">作为新手呢，我最开始的想法是先从pandas开始了解，等到后面复杂任务pandas处理不了了再慢慢入手openpyxl。但是，随着任务的推进，我发现，pandas的功能的确是没有apenpyxl齐全，于是只好以pandas为主，openoyxl为辅，边用边学咯。</font>\n\n然后呢，关于pandas库的安装，好巧不巧，在第一次python学习的任务中，我就在AI的推荐下把这个库给安装好了，具体方法就是在cmd输入pip install pandas，这里就不多赘述啦。\n\n### 实现一个DEMO\n好吧，先让我想想要做一个什么表格呢？<font style=\"color:#000000;\">那不如，Arknights，启动！</font>~~<font style=\"color:#000000;\">（bushi）</font>~~\n\n<font style=\"color:#000000;\">那么我现在要做的表格该长什么样子呢？首先得有个大标题，然后分为很多栏，每一栏下面有很多个填写项。后续可能还有很多字体，格式什么的问题。</font>\n\n<font style=\"color:#000000;\">不过不着急，我们慢慢来。</font>\n\n<font style=\"color:#000000;\">作为一个从来没有学过pandas库的小萌新，我不得不求助于ds老师啦，不过呢，考虑到pandas库的确是一个我们未来可能会很频繁的使用的库，我决定尝试学习一下，而非直接让AI帮我写完制作这个表格的代码。</font>\n\n<font style=\"color:#000000;\">沿续上一次的提问，我进行了二次提问。</font>\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59892417/1759047455642-925e1f84-7c7f-4373-bc2d-2d67e14e7205.png)\n\n这次AI的答案我其实不是特别满意（我会继续慢慢学prompt的/(ㄒoㄒ)/~~），因为这个，可能还是没那么好读懂。于是我选取了AI在answer中的一段综合示例，要求它逐行做出解读。\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59892417/1759047867408-3bc37530-4b34-4dda-bd1d-b77e5ebaf5e5.png)\n\n这回好多了。AI讲解的很细，我也算是能看懂了，跃跃欲试准备开始实操😋\n\n然后呢，为了方便交流分享，~~也为了防止我自己过段时间自己也看不懂了~~，我的代码里可能会有一大堆注释来标注各种奇怪的知识点，求放过。\n\n```python\n\n```\n\n\n\n# 出现的问题与解决方案\n# 最后的总结与思考\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位南京大学学生在实操任务中探索Python处理Excel文件的过程。作者通过LLM辅助，比较了pandas、openpyxl、xlrd和xlsxwriter等库的优缺点，最终选择以pandas为主、openpyxl为辅进行开发。在尝试构建一个《明日方舟》主题表格的过程中，作者强调主动学习而非直接依赖AI生成代码，并通过逐行解读示例代码加深理解，体现出‘在实践中学习’的核心理念。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章展现了现代编程学习范式中人机协作的典型模式：学习者借助大语言模型获取知识框架，但保留对代码逻辑的理解与掌控。这种‘增强智能’（Intelligence Augmentation）路径，区别于完全自动化，强调人类在认知回路中的主导地位，契合人本计算理念。",
                    "connection": "与‘人机协同编程’（Human-AI Collaborative Programming）概念紧密相关，该范式关注如何设计交互机制使AI成为认知伙伴而非替代者。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者在依赖AI生成答案与坚持自主理解之间保持张力，体现出对‘技术中介认知’的反思。这种态度呼应了海德格尔对‘上手状态’（Zuhandenheit）的描述——工具只有在不遮蔽使用者目标时才真正‘透明’。过度依赖AI可能导致认知异化，而作者通过注释与逐行解读重建了对工具的掌控。",
                    "connection": "联系海德格尔《存在与时间》中的‘上手状态’（Readiness-to-hand）概念，强调工具应融入实践而不打断意向性。"
                }
            ],
            "open_question": "当大语言模型成为编程学习的默认辅助工具时，我们如何界定‘理解’与‘复制’的边界？这种新型认知分工是否正在重塑‘知识掌握’的本质？"
        },
        "processed_at": "2025-09-29T10:53:36.444606",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "【温故知新2】爬虫基础",
        "slug": "fro1dzngrfobcu8b",
        "url": null,
        "published_at": "2025-09-27T10:58:57.000Z",
        "content": "Date: 9.27\n\n# HTTP基础\n## <font style=\"color:#00346B;\">常用请求首部字段</font>\n**Accept**：请求报头域（控制信息），用于指定客户端可以接受的信息类型\n\n**Accept-Language**：指定客户端可以接受的语言类型\n\n**Accept-Encoding**：指定客户端可以接受的编码类型\n\n**Host**：用于指定请求资源的主机IP和端口号\n\n**Cookie**：网站为了辨别用户进行会话跟踪而存储在用户本地的数据，维持当前访问会话（功能）\n\n**Referer**：用于标识这个请求是从哪个页面发过来的（服务器可用其来做来源统计或防盗链处理等）\n\n**User-Agent**：简称UA，特殊字符串头，可以使服务器识别客户使用的操作系统及版本、浏览器及版本等信息（做爬虫时，可利用其伪装成浏览器）\n\n**Content-Type**：又称互联网媒体类型或MIME类型，在HTTP协议的报文首部字段中，用于表示具体请求中的媒体类型信息\n\n## <font style=\"color:#00346B;\">常用响应首部字段</font>\n**Data**：标识响应产生的时间\n\n**Last-Modified**：指定资源的最后修改时间\n\n**Contenr-Encoding**：指定响应内容的编码\n\n**Server**：包含服务器的信息（名称、版本号等）\n\n**Content-Type**：文档类型，指定返回的数据是什么\n\n**Set-cookie**：设置Cookie\n\n**Expires**：指定响应的过期时间，可以使代理服务器或浏览器将加载的内容更新得到缓存中\n\n\n\n\n\n# 网页基础\n## <font style=\"color:#00346B;\">网页的组成</font>\n**HTML（骨架）**：**<font style=\"color:#2F8EF4;\">定义网页的内容和结构</font>**，对网页的文字、按钮、图片和视频等复杂元素进行基础架构，用不同的标签表示不同的元素（e.g.图片img视频video段落p布局div）\n\n**CSS（皮肤）**：**<font style=\"color:#2F8EF4;\">描述网页的布局</font>**，全称Cascading Style Sheets，即层叠样式表，是目前唯一的网页页面排版样式标准\n\n**JavaScript（肌肉）**：**<font style=\"color:#2F8EF4;\">定义网页的行为</font>**，制作用户与信息之间实时、动态、交互的页面功能\n\n## <font style=\"color:#00346B;\">节点间的关系</font>\n<font style=\"color:#DF2A3F;\">父（parent）</font>\n\n<font style=\"color:#DF2A3F;\">子（child）</font>\n\n<font style=\"color:#DF2A3F;\">兄弟（sibling）</font>\n\n<font style=\"color:#DF2A3F;\">根（root顶端节点）</font>\n\n## <font style=\"color:#00346B;\">常用CSS定位节点方法</font>\n（个人经验，欢迎补充）\n\n    1. **.class**：选择class = \"class\"的所有节点\n    2. **#id**：选择该id = \"id\"的所有节点\n    3. **根据标签名筛选**：例如，想选二级标题，直接用h2\n\n\n\n\n\n# 爬虫基本原理\n<font style=\"color:#5C8D07;\">爬虫就是获取网页并提取和保存信息的自动化程序</font>\n\n1. **获取网页**： \n    - 实质——<font style=\"color:#DF2A3F;\">获取网页源代码</font>（向网页发送请求后返回的<font style=\"color:#DF2A3F;\">响应体</font>，即为网页源代码）\n    - 关键——<font style=\"color:#DF2A3F;\">构造一个请求</font>发送给服务器，解析返回的响应\n2. **提取信息**： \n    - <font style=\"color:#DF2A3F;\">分析</font>网页源代码，从中<font style=\"color:#DF2A3F;\">提取</font>我们想要的数据，如节点属性文本值等\n    - 常用方法：正则表达式，各类解析库\n3. **保存数据**： \n    - 保存形式：简单保存：TEXT文本或JSON文本 ； 保存到数据库 ； 保存到远程服务器\n4. **自动化程序**： 爬虫可以在抓取过程中进行各种<font style=\"color:#DF2A3F;\">异常处理</font>、<font style=\"color:#DF2A3F;\">错误重试</font>等操作，确保爬取持续高效地运行\n\n\n\n\n\n# 代理基本原理\n代理的基本原理：代理服务器，网络信息的中转站\n\n## <font style=\"color:#00346B;\">代理的作用</font>\n    1. 突破自身IP访问限制，访问一些平时不能访问的站点\n    2. 访问一些单位或团体的内部资源\n    3. 提高访问速度\n    4. 隐藏真实IP\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章系统介绍了网络爬虫的基础知识，涵盖HTTP请求与响应首部字段的作用、网页由HTML/CSS/JavaScript构成的三层结构、节点关系与CSS选择器定位方法，以及爬虫获取、解析、存储网页数据的基本流程。同时简述了代理服务器在突破访问限制、隐藏IP等方面的功能，为理解网络数据抓取提供了技术框架。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "爬虫技术隐含着对‘可见性’与‘可及性’的哲学追问：网页内容虽公开存在，但通过User-Agent、Referer等字段设置访问门槛，实质上构建了一种数字时代的‘认知边界’。爬虫通过伪装与代理突破这些边界，触及知识获取的伦理与本体论问题——何为合法的‘看见’？谁有权定义信息的可访问性？",
                    "connection": "这与福柯的‘知识-权力’理论相呼应：信息的可见性并非中立，而是被技术规则与社会结构共同建构的权力实践。"
                },
                {
                    "domain": "语言学",
                    "analysis": "HTML结构可视为一种形式化标记语言，其标签系统（如<p>、<div>）构成语义单元，CSS和JavaScript则分别承担‘语用修饰’与‘语用行为’功能。爬虫对节点的定位与提取，类似于语言学中的句法解析与语义角色标注，试图从表层结构中还原信息的深层意图。",
                    "connection": "这呼应了乔姆斯基的生成语法理论：网页源码是‘表层结构’，而爬虫需通过规则系统（如CSS选择器）推导出‘深层结构’中的目标数据。"
                }
            ],
            "open_question": "当爬虫通过技术手段绕过网站设置的访问限制时，这种行为是在拓展知识民主化的边界，还是在侵蚀数字空间中的契约伦理？如何在技术可行性与信息正义之间建立新的规范框架？"
        },
        "processed_at": "2025-09-29T10:53:40.537477",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-LLM分支-胡峻烽",
        "slug": "su0t0gr5vm5q85cr",
        "url": null,
        "published_at": "2025-09-27T14:29:53.000Z",
        "content": "# 行前当有所思\n我感觉这次的任务和上上周实践组的任务是相似的，而我在学习那些同学的文档时确实收获到了乐趣，同时我上周也是选择llm辅助编程的分支，所以我这次的选择就很自然而然了。我想后续的任务中我大概率也会优先考虑深入对某个特定方向的学习。\n\n# 事前准备\n## cac给出了大致的思路，但对我来说还是不够细化，难以执行，所以我选择先让Gemini帮我进一步拆分任务\n### Q1\n我是一个python小白，需要完成下列任务，请帮我进一步拆解任务并列出我需要学习的知识，使我能够用碎片化的时间完成学习\n\n+ 通过Python调用某个LLM的API，从而实现程序调用LLM的功能\n+ 尝试通过语雀Token，获取一篇文档的内容，并将其发送到某个LLM进行文档总结\n+ 通过Python，搭建一个简单的工作流（通过语雀Token，获取选择同一个分支的所有文档，然后利用LLM进行单篇文档的总结，再将这些总结再次提交给LLM，生成一份所有社员在该分支上的研究报告）\n+ 安装部署Dify并试用\n\n### A1\nGemini的回答有点长，暂时就先不贴了。我大致看了一下，感觉有可行性，所以就先跟着它走吧。\n\n\n\n\n\n从下午搞到现在，终于跑通了，哈哈哈哈哈哈哈哈哈哈\n\n今天剩下的时间要奖励自己，文档就明天再写吧哈哈\n\n\n\n\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位南京大学学生在LLM（大语言模型）辅助编程实践中的探索过程。作者基于前期经验，选择延续LLM方向，通过Gemini辅助将复杂任务拆解为可执行步骤，包括调用LLM API、利用语雀Token获取文档并生成总结、构建多文档聚合分析的工作流，以及部署Dify平台。整个过程体现了从任务模糊到逐步实现的技术实践路径，强调了碎片化学习与AI协作在编程入门中的有效性。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章展示了LLM作为编程协作者的新范式，反映了人机协同编程的兴起。这种模式不仅降低了编程门槛，也改变了传统软件开发中‘人完全控制逻辑’的假设，转而强调人在高层意图表达与AI在实现细节上的分工合作。",
                    "connection": "这与‘程序合成’（Program Synthesis）概念密切相关，即系统根据高层规范自动生成代码，而LLM在此扮演了语义到代码的映射引擎。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者依赖LLM进行任务拆解与实现，引发对‘理解’与‘执行’分离的哲学反思：当人类仅提供意图而由AI完成逻辑构建时，知识的主体性是否发生转移？这种协作是否构成一种新型的认知外包？",
                    "connection": "这呼应了安迪·克拉克（Andy Clark）提出的‘延展心智’（Extended Mind）理论，即认知过程可延伸至外部工具，而LLM正成为当代认知生态中的关键组成部分。"
                }
            ],
            "open_question": "当LLM深度介入编程实践，人类开发者从‘代码书写者’转变为‘意图表达者’，这是否会重塑我们对‘理解’‘技能’乃至‘创造力’的定义？"
        },
        "processed_at": "2025-09-29T10:53:44.312327",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "卢星宇",
        "slug": "tnzvseihiyuzqz5h",
        "url": null,
        "published_at": "2025-09-27T10:58:34.000Z",
        "content": "本周主题：\n\n“去实践。”——CAC\n\n本周任务：\n\n1.继续在程序设计与数据爬虫领域内进行知识复健，任务成果体现为对于【温故知新】系列的连载\n\n> [https://nova.yuque.com/ph25ri/ua1c3q/gg82sgf1srixul84?singleDoc#](https://nova.yuque.com/ph25ri/ua1c3q/gg82sgf1srixul84?singleDoc#) \n>\n> 《【温故知新1】开发环境配置》\n>\n> [https://nova.yuque.com/ph25ri/ua1c3q/fro1dzngrfobcu8b?singleDoc#](https://nova.yuque.com/ph25ri/ua1c3q/fro1dzngrfobcu8b?singleDoc#) \n>\n> 《【温故知新2】爬虫基础》\n>\n> [https://nova.yuque.com/ph25ri/ua1c3q/xoxlw8og76gsgenm?singleDoc#](https://nova.yuque.com/ph25ri/ua1c3q/xoxlw8og76gsgenm?singleDoc#) \n>\n> 《【温故知新3】基本库（请求库）的使用》\n>\n> [https://nova.yuque.com/ph25ri/ua1c3q/rqkx0i60eqlv9h2n?singleDoc#](https://nova.yuque.com/ph25ri/ua1c3q/rqkx0i60eqlv9h2n?singleDoc#) \n>\n> 《【温故知新4】解析库的使用》\n>\n> [https://nova.yuque.com/ph25ri/ua1c3q/oa35hazsr4w7ot9x?singleDoc#](https://nova.yuque.com/ph25ri/ua1c3q/oa35hazsr4w7ot9x?singleDoc#) \n>\n> 《【温故知新5】数据存储》\n>\n\n2.了解各方需求，尝试找到一个可以用技术手段解决的有价值的实践项目，任务成果体现提出一个含有具体实现路径可供大家参考的【项目提案】\n\n3.完成笔者在非纯技术组创建的《Nova研究：反思、变革与重定向》文档，任务成果体现为【文档完稿】\n\n（欢迎各位来这个空间里面一起“玩泥巴、堆沙子、搭城堡”）\n\n> [https://nova.yuque.com/ph25ri/ua1c3q/kyxxmmgssiz21g86?singleDoc#](https://nova.yuque.com/ph25ri/ua1c3q/kyxxmmgssiz21g86?singleDoc#) \n>\n> 《<font style=\"color:rgb(38, 38, 38);\">“NOVA研究所”：一个半独立的外部视角</font>》\n>\n> [https://nova.yuque.com/mcn7be](https://nova.yuque.com/mcn7be)\n>\n> NOVA学研究所（理念：Born to Rebel. Built to Reform.）\n>\n\n\n\n更新日历\n\n9.26 【温故知新1】开发环境配置\n\n9.27 【温故知新2】爬虫基础\n\n9.28 【温故知新3】基本库（请求库）的使用-3.1使用urllib\n\n   《<font style=\"color:rgb(38, 38, 38);\">“NOVA研究所”：一个半独立的外部视角</font>》\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章围绕‘去实践’这一核心理念，系统规划了技术复健（如开发环境配置、爬虫基础、数据存储等）、实践项目提案和跨学科反思文档撰写三项任务，强调通过动手操作与知识整合推动个人与集体的认知升级。其背后体现了一种行动导向的学习哲学，即在‘玩泥巴、堆沙子、搭城堡’的协作探索中，将技术能力与批判性思维结合，服务于更有价值的社会或认知问题。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "文章强调‘去实践’不仅是技术训练，更是一种存在方式的体现——通过行动建构意义。这呼应了实用主义哲学对‘知识源于行动’的主张，也暗合海德格尔‘在世存在’（Being-in-the-world）的思想：人并非先理解世界再行动，而是在与世界的互动中生成理解。",
                    "connection": "海德格尔的‘此在’（Dasein）概念强调实践性与情境性，与文中‘在做中学’‘搭建认知城堡’的实践导向高度契合。"
                },
                {
                    "domain": "社会学",
                    "analysis": "NOVA研究所被描述为‘半独立的外部视角’，体现出对主流技术实践的反思姿态。这种组织形态可视为布迪厄所说的‘反思性社会学’的实践尝试——通过保持一定距离，揭示技术社群中隐含的惯习、权力结构与认知框架。",
                    "connection": "布迪厄的‘社会场域’（social field）理论可用于分析NOVA如何在技术社群这一场域中试图重构规则与资本分配，实现‘Born to Rebel. Built to Reform.’的使命。"
                }
            ],
            "open_question": "在技术快速迭代的背景下，如何构建一种既能深入掌握工具理性、又能持续进行价值反思的‘双轨实践’模式，以避免陷入技术决定论或空泛批判的二元对立？"
        },
        "processed_at": "2025-09-29T10:53:46.786720",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python实操类-Excel分支-李赫",
        "slug": "ny3oyla4zgqmauqm",
        "url": null,
        "published_at": "2025-09-27T14:24:15.000Z",
        "content": "# 前言9.27\n之前的两篇文档都是周五早上才写的，为了响应cac老师的号召，以后改成每天写一点咯。\n\n其实我还蛮喜欢写文档的，也不知道是不是真的有同学看，真的看到这句话的人能不能评论区扣个1 QAQ\n\n我本来以为大火能像贴吧一样，不管有没有什么想说的，都能在评论区”经验+3“的，然而事实上完全没有人在互动嘛。\n\n不过既然要重视文档，那我就要开始锐评大火了，反正线下暂时没人认得出我是谁，，，\n\n总之欢迎大火锐评啊。\n\n之所以选择这个分支也很简单啊，上周我已经安装了openpyxl和pandas这两个库，并学会了如何在pycharm中导入导出xlsx文件，这次正好了解这两个库的进阶用法，看能不能利用ai协助编写一个切实能使用的脚本。\n\n不过python学习还得继续啊，如果有什么问题后续也写在这咯。\n\n[点击查看主播安装并初步使用openpyxl和pandas的全过程](https://nova.yuque.com/ph25ri/ua1c3q/iq0gqc57ox7q64ib?singleDoc#%20)<--上周文档\n\n再附上我上次看的教程网址\n\n[pandas教程](https://www.runoob.com/pandas/pandas-tutorial.html)\n\n[openpyxl教程](https://geek-docs.com/python/python-tutorial/python-openpyxl.html)\n\n\n\n# 任务分析9.28\n1. 找到一种可以让Python读写Excel的方法\n\n这个已经成功了，根据上次使用的感受，我应该会先考虑使用pandas，看了于同学的文档，ds老师的分析也让我觉得应该选择pandas\n\n2. 实现一个Demo\n\n对表格还有一部分操作尚未学会，考虑学习更多pandas中函数的用法，并进行一次实操\n\n3. 思考一些复杂的表格操作（如通过Token获取语雀文档里每周大家的文档撰写情况及选择分支，然后写入一个Excel表格，并统计各分支人数）\n\n好眼熟，是不是之前实践组干的事？\n\n我目前对于使用token读取某个网站内的内容还完全不了解，可能是跟爬虫相关的内容，值得一提的是我第一次使用的脚本由于要访问国家安全教育平台，需要下载一个名为requests的库来访问网址，不过国安教育网站用到的是一个名为user id 的东西，和token应该有一定区别。\n\n目前可以干的事有：分析这个脚本，阅读之前实践组留下的文档，阅读爬虫分支同学的文档。\n\n如果以上信息无法让我拥有实现的思路，那么就请教ds老师。\n\n对我来说，学习使用python读取网站内数据的相关知识是必要的，借着这次任务的机会可以了解一下，由于我python基础还学的不咋地，就不指望能完全掌握了。\n\n4. Table.nju.edu.cn是一个近似表格的存在（实际上它的内核是数据库），尝试使用Python对table表格里的数据进行读写操作\n\n这个和上面那个好像差不多，另外我突然想到了关于F12和网站源码相关的内容，这个东西属于之前偶尔接触过也用过，但还未深入学习，也不知道读取网站数据和这个有无关系，这也是一个可能的方向。\n\n\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位南京大学学生在Python实操学习过程中的阶段性思考与计划，重点围绕使用pandas和openpyxl库处理Excel数据，并探索通过API Token或爬虫技术从语雀等平台自动获取数据以生成统计表格。作者表现出对技术实现路径的初步探索意识，同时坦承自身Python基础薄弱，体现出学习过程中的反思性与开放性。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章体现了从工具使用（如pandas）到系统集成（如API调用、数据自动化）的进阶思维，反映了现代编程教育中‘做中学’的理念。作者尝试将零散的技术点（库安装、文件读写、网络请求）整合为解决实际问题的脚本，这正是软件工程中模块化与自动化思想的雏形。",
                    "connection": "与‘计算思维’（Computational Thinking）密切相关，特别是其中的‘自动化’和‘抽象’维度——作者试图将重复性文档统计任务抽象为可编程流程。"
                },
                {
                    "domain": "社会学",
                    "analysis": "作者对文档互动性的期待（如‘评论区扣1’）揭示了数字协作环境中参与感与可见性的张力。在知识共享平台（如语雀）中，个体贡献常处于‘可见但无反馈’的状态，这种‘沉默的协作者’现象反映了数字时代知识生产中的社会联结弱化问题。",
                    "connection": "可联系布尔迪厄的‘社会场域’（Social Field）理论：文档写作构成一个学术实践场域，但缺乏象征资本（如评论、点赞）的流动，导致参与者难以获得认可与激励。"
                }
            ],
            "open_question": "当自动化脚本被用于追踪和量化学生的知识贡献（如文档撰写频率、分支选择）时，这种技术中介的评估方式如何重塑学习共同体中的信任、动机与学术伦理？"
        },
        "processed_at": "2025-09-29T10:53:50.126272",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "非纯技术类—柴溪晨",
        "slug": "xulp3fnsmivi317c",
        "url": null,
        "published_at": "2025-09-27T07:21:00.000Z",
        "content": "HOW：\n\n1.添加标签：参考小红书，把文档分类，方便搜索。\n\n2.我得缓缓。\n\n目前试图绑一个微信机器人（Server酱）发更新推送，用AI写了一段检测文档更新状态的代码，结果跑的时候文档更新根本检测不出来。（把文档设成公开倒是可以规避“必须手动登录，无法跳过滑动验证”的问题，但是文档更新时间的获取的话，我用AI代码真的写不出来） \n\n3.实践组谁能实现一下用正则表达式（应该是这个吧对吧）捕捉文档的更新时间QAQ，现状如2.\n\n```python\nimport os\nimport json\nimport time\nimport hashlib\nimport requests\n\n# ========== 配置区域 ==========\nYUEQUE_TOKEN = \"s91TCRkU7KDHYAqy9F5ACOa4WoYUNZKvpI1hsj2S\"   # 语雀访问令牌\nWECHAT_WEBHOOK = \"https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=3ca69d90-f143-4a83-abc0-eacfd859df34\"  # 企业微信群机器人地址\n\n# 要监控的知识库列表\n# key: 知识库名称(自定义)\n# value: 语雀知识库路径 group_login/book_slug\nBOOKS = {\n    \"社团活动\": \"ph25ri/ua1c3q\",\n    \n}\n\n# 本地备份目录\nBACKUP_DIR = \"D:/Python/yuque_docs\"\n\n# 检查间隔（秒）\nCHECK_INTERVAL = 600  # 10分钟\n\n# ========== 工具函数 ==========\ndef api_get(url):\n    \"\"\"通用API请求函数\"\"\"\n    headers = {\"X-Auth-Token\": YUEQUE_TOKEN}\n    resp = requests.get(url, headers=headers)\n    resp.raise_for_status()\n    return resp.json()\n\ndef get_book_docs(book_path):\n    \"\"\"获取知识库所有文档\"\"\"\n    url = f\"https://nova.yuque.com/api/v2/repos/{book_path}/docs\"\n    data = api_get(url)\n    return data.get(\"data\", [])\n\ndef get_document_content(doc_path):\n    \"\"\"获取文档正文内容\"\"\"\n    url = f\"https://nova.yuque.com/api/v2/repos/{doc_path}\"\n    data = api_get(url)\n    return data.get(\"body\", \"\")\n\ndef send_wechat_message(content):\n    \"\"\"发送微信消息\"\"\"\n    data = {\n        \"msgtype\": \"text\",\n        \"text\": {\n            \"content\": content\n        }\n    }\n    requests.post(WECHAT_WEBHOOK, data=json.dumps(data), headers={\"Content-Type\": \"application/json\"})\n\ndef save_local_backup(book_name, doc_name, content):\n    \"\"\"保存到本地文件\"\"\"\n    book_dir = os.path.join(BACKUP_DIR, book_name)\n    os.makedirs(book_dir, exist_ok=True)\n    file_path = os.path.join(book_dir, f\"{doc_name}.md\")\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(content)\n    return file_path\n\ndef get_local_hash(book_name, doc_name):\n    \"\"\"获取本地文档的MD5\"\"\"\n    file_path = os.path.join(BACKUP_DIR, book_name, f\"{doc_name}.md\")\n    if not os.path.exists(file_path):\n        return None\n    with open(file_path, \"rb\") as f:\n        return hashlib.md5(f.read()).hexdigest()\n\n# ========== 主逻辑 ==========\ndef monitor_knowledge_bases():\n    print(\"开始监控语雀知识库更新...\")\n    # 存储每个文档的最后更新时间\n    last_updated = {}  # key: doc_path, value: updated_at\n    \n    while True:\n        for book_name, book_path in BOOKS.items():\n            try:\n                docs = get_book_docs(book_path)\n                print(f\"检查知识库: {book_name} (文档数量: {len(docs)})\")\n                \n                for doc in docs:\n                    doc_title = doc[\"title\"]\n                    doc_path = f\"{book_path}/{doc['slug']}\"\n                    updated_at = doc[\"updated_at\"]\n                    \n                    # 第一次运行或文档更新\n                    if doc_path not in last_updated:\n                        content = get_document_content(doc_path)\n                        save_local_backup(book_name, doc_title, content)\n                        last_updated[doc_path] = updated_at\n                        print(f\"初始化监控: {book_name} -> {doc_title}\")\n                        continue\n                    \n                    if updated_at > last_updated[doc_path]:\n                        new_content = get_document_content(doc_path)\n                        new_hash = hashlib.md5(new_content.encode(\"utf-8\")).hexdigest()\n                        old_hash = get_local_hash(book_name, doc_title)\n                        \n                        if new_hash != old_hash:\n                            message = f\"📄 语雀文档有更新！\\n知识库：{book_name}\\n标题：{doc_title}\\n更新时间：{updated_at}\"\n                            print(message)\n                            send_wechat_message(message)\n                            save_local_backup(book_name, doc_title, new_content)\n                            last_updated[doc_path] = updated_at\n                        else:\n                            print(f\"{book_name} -> {doc_title} 时间戳变化但内容未变，忽略。\")\n                            last_updated[doc_path] = updated_at\n                    else:\n                        print(f\"{time.strftime('%H:%M:%S')} {book_name} -> {doc_title} 未更新\")\n            \n            except Exception as e:\n                print(f\"监控知识库 {book_name} 出错: {e}\")\n        \n        time.sleep(CHECK_INTERVAL)\n\n\n# 先测试微信机器人\n    \nif __name__ == \"__main__\":\n    if WECHAT_WEBHOOK != \"https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=3ca69d90-f143-4a83-abc0-eacfd859df34\":\n        send_wechat_message(\"语雀监控脚本开始运行！\")\n    monitor_knowledge_bases()\n\n\n\n```\n\n4.推翻2.和3\n\n+ 目前做到了通过实践组之前的代码把社团活动下的文档复制到本地，上面的用来实现更新文档+企业微信消息推送，YUEQUE_TOKEN感谢谷老师的安全疏忽，\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位学生尝试通过编程监控语雀知识库文档更新并推送通知的实践过程。作者最初尝试用AI生成代码检测更新时间失败，后借助已有实践组代码成功实现文档本地备份与更新检测，并利用企业微信机器人推送变更通知。过程中涉及API调用、内容哈希比对、时间戳判断等技术细节，也反映出对自动化工具链构建的探索与调试经验。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "该实践体现了现代软件工程中监控系统与自动化运维的基本范式，通过轮询API、内容哈希校验与消息推送构建了一个轻量级变更感知系统。作者对AI生成代码的依赖与局限性的体验，也揭示了当前大模型在具体工程任务中仍需人工干预与调试的现实。",
                    "connection": "该系统可视为一种简化的‘事件驱动架构’，其核心思想与‘观察者模式’密切相关——即当文档状态（被观察者）发生变化时，自动触发通知（观察者）行为。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者在技术实现过程中遭遇的‘更新检测失败’与‘推翻重来’，映射出人类在面对复杂系统时的认知局限与工具中介性问题。技术不仅是手段，也重塑了我们对‘变化’‘存在’与‘可知性’的理解：文档是否更新，不再依赖主观感知，而由算法与哈希值客观裁定。",
                    "connection": "这呼应了海德格尔对‘技术作为解蔽方式’的论述——技术不仅揭示文档的更新状态，也构建了一种新的‘在场’形式：文档的‘真实状态’只有通过API与哈希校验才得以显现。"
                }
            ],
            "open_question": "当自动化监控系统成为我们感知信息变化的主要中介时，我们是否正在将‘真实性’的判断权让渡给算法？这种让渡在知识管理与集体协作中会带来哪些认知与伦理后果？"
        },
        "processed_at": "2025-09-29T10:53:59.827734",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "实践操作类—李申亮",
        "slug": "ad4m8lsu0wtfaa1h",
        "url": null,
        "published_at": "2025-09-27T06:05:56.000Z",
        "content": "> **从零开始的爬虫教程**\n>\n\n本想直接选一个problem完成的，结果打开Python发现啥也不会，遂~~给自己~~写一个小白教程，包含：\n\n+ 名词解释\n+ 如何获取网页内容\n+ 如何解析网页内容\n+ 后记\n\n### 名词解释\n+ HTTP : 即Hypertext Transfer Protocol , 是一种客户端和服务器间的请求响应协议。\n\nHTTP请求 ：一般包含[请求行](请求行是HTTP请求的第一行，由三部分组成：请求方法、请求URL和HTTP协议版本，三者用空格分隔（格式为请求方法%20URL%20协议版本）。其核心作用是向服务器明确请求的核心意图：请求方法（如GET表示获取资源、POST表示提交数据）定义操作类型；请求URL指定目标资源的地址；HTTP版本则声明通信所遵循的协议规范（如HTTP/1.1）。)、[请求头](请求头是HTTP请求中位于请求行之后的一系列键值对（格式为键:%20值），用于向服务器传递额外的元数据。其核心作用包括：告知服务器客户端的环境信息（如浏览器类型User-Agent）、指定可接受的响应格式（Accept）、传递身份验证信息（Authorization）、说明请求体的数据类型（Content-Type）等。服务器通过解析这些头部信息，能够调整响应策略（如返回对应格式的数据、！验证身份权限！），是客户端与服务器之间沟通请求细节的重要载体。)和[请求体](请求体是HTTP请求中可选的内容部分，位于请求头后的空行之后，仅在需要向服务器提交数据时存在（如POST、PUT等方法）。其作用是作为客户端向服务器传递数据的载体，可包含表单信息、JSON数据、文件内容等具体内容。请求体的格式需通过请求头中的`Content-Type`字段声明（如`application/json`表示JSON格式，`multipart/form-data`用于文件上传），服务器根据该声明解析数据。与请求行、请求头不同，请求体的大小可灵活变化，从简短的键值对到大型文件数据均可承载。)。\n\nHTTP响应：一般包括[状态行](含HTTP版本，如HTTP/1.1；3%20位状态码，如200代表请求成功、404代表资源未找到；状态短语，如OK)、[响应头](键值对形式的元数据，如Content-Type指定响应体格式text/html为网页、application/json为接口数据）)和[响应体。](即服务器返回的实际内容，格式由Content-Type定义，如%20HTML%20代码、JSON%20数据、图片二进制信息等)\n\n+ Requests：一个python中用于发送HTTP请求的库，需第三方安装。\n\nrequests会自动生成请求头，可用head修改信息，例如\n\n> head = {\"[User-Agent](游览器打开任意网页，右键检查，点击network，点击任意请求，在header目录下找到你的用户)\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64)\"}可以将爬虫伪装成正常用户\n>\n\n+ [HTML:我不行了，有请哔哩哔哩老师。](https://www.bilibili.com/video/BV1gp411f7j6?vd_source=97bd919f7c6267ac7c4eafdc2d9b6e8e)\n+ Beautiful Soup: python中用来解析HTML的库。\n\n### 获取网页内容\n1. 创建一个conda虚拟环境并下载requests库\n2. 在IDE中[调用这个虚拟环境](https://www.bilibili.com/video/BV1RU411f78f?vd_source=97bd919f7c6267ac7c4eafdc2d9b6e8e)\n3. 输入以下代码测试\n\n```python\nimport requests\nresponse = requests.get(\"http://books.toscrape.com/\").text\nif response.ok:\n   print(response)\nelse:\n   print(response.status_code)\n```\n\n4. 拿到你的HTML源码\n\n### 解析网页内容\n1. 直接在上一步创建的虚拟环境中下载beautiful soup 4\n2. 在IDE中调用这个库BeautifulSoup\n3. 将response喂给BeautifulSoup,并指定解析器\n\n```python\nsoup = BeautifulSoup(response , \"html.parser\")\n```\n\n4. 打印你想看的内容\n\n```python\ntarget = soup.findAll(\"标签\" , attrs={\"属性\" : \"值\"})\nprint(target)\n```\n\n5. ~~只是想感慨一下这部分内容越搜越多~~\n\n### 后记\n+ 首先谈一下完成这个project的收获\n\n学会~~调教AI~~\n\n学会使用语雀编排文档\n\n拿下Anaconda\n\n当VS报错的时候用爱与和平感化自己\n\n+ 借机谈一谈对NOVA的理解\n\n于我而言NOVA不以打磨技术为导向，而以解决问题为目标。技术只是解决问题的要素之一，是方案的变现，而在一个方案的背后还有问题拆解、信息检索和工具运用等重要环节。NOVA的侧重点在改变认知后点亮技能树。通过自上而下的认知模式，我们得以在把握问题的全貌后选择一个细分领域攻克。在一个个问题抛向你的时候，你不必担心知识点不会而解不了题，你只需享受一边解决问题一边扩充自己知识库的过程。最后期待在线下活动学习。  \n~~我写得好人机~~。\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章是一篇面向初学者的网络爬虫实践教程，系统介绍了HTTP协议、Requests库与Beautiful Soup的基本用法，并通过代码示例演示如何获取和解析网页内容。作者强调学习过程中的问题导向思维，认为技术是解决问题的工具，真正的成长在于认知模式的转变与知识体系的自主构建，体现出对NOVA项目‘以解决问题为中心’理念的认同。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章体现了计算思维中的分解与抽象能力：将爬虫任务拆解为请求、响应、解析等模块，并借助库封装底层复杂性。这种‘工具即延伸’的实践方式，正是现代软件工程强调的高效开发范式。",
                    "connection": "与‘图灵机模型’中的输入-处理-输出结构相呼应，爬虫系统本质上是一个现实世界中的信息处理自动机。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者将技术学习视为认知重构的过程，而非单纯技能堆砌，这暗合现象学‘回到事物本身’的精神——通过亲手操作（如调试、抓包）直面技术现象，从而获得对数字世界的原初理解。",
                    "connection": "与海德格尔‘上手状态’（Zuhandenheit）概念相关：当工具（如Requests库）顺畅服务于目标时，技术本身隐退，人专注于问题本身，实现‘在世存在’的实践智慧。"
                }
            ],
            "open_question": "当自动化爬虫技术日益普及，我们应如何在技术效率与网络伦理（如robots协议、数据隐私）之间建立新的认知框架？"
        },
        "processed_at": "2025-09-29T10:54:01.243614",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "日常学习类",
        "slug": "rdl99o1txy840a6e",
        "url": null,
        "published_at": "2025-09-27T04:21:02.000Z",
        "content": "日常学习类分支的设定，并不是打算从零开始学习你们大一主要接触到的三类课程\n\nNOVA推荐尽快进入树立自主性学习意识，并在实践中增强自主性学习的能力\n\n所以日常学习类分支，研究的内容是更好的自主性学习策略\n\n选择本类的同学，首先应该回顾自己在选择的分支的科目上的学习习惯，然后思考大学环境下，在学习的过程中存在哪些问题，然后选择其中某个问题，研究解决这个问题的方法，最后按照模版的要求撰写文档\n\n举一些可能的实例加以说明PBL过程：\n\n+ 数学分支：平时要不要刷题？刷什么题？刷多少题？\n+ 数学分支：遇到某道不会做的题目该怎么办？后续如何针对性训练？\n+ 数学分支：大学没有高中的平时测验和试卷洗礼，如果才能评估自己当前的水平已经达到自己的预期？\n+ 英语分支：大学英语在课后如何进行自主性学习？\n+ 英语分支：记忆的规律是什么？如何找到适合自己的记忆方法？\n+ 英语分支：哪些好用的学习APP？\n+ Python分支：程序写好了，Debug总是要很久怎么办？\n+ Python分支：同时学两种语言，如何避免记忆混淆？\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章强调大学学习应转向自主性学习，日常学习类分支旨在研究和优化自主学习策略，而非从零教授课程内容。学生需反思自身学习习惯，识别具体问题（如刷题策略、英语记忆方法、编程调试效率等），并通过问题导向学习（PBL）探索解决方案。核心在于培养元认知能力，主动评估与调整学习过程，以适应大学缺乏外部监督的学习环境。",
            "cross_disciplinary_insights": [
                {
                    "domain": "认知科学",
                    "analysis": "文章所倡导的自主性学习策略本质上是对元认知（metacognition）能力的训练，即个体对自身认知过程的觉察、监控与调节。例如，评估自己是否掌握知识、选择合适记忆方法等，都涉及对记忆、注意和问题解决策略的内省与优化。",
                    "connection": "这与认知科学中的‘元认知监控’（metacognitive monitoring）概念紧密相关，该理论认为高效学习者能准确判断自身知识状态并动态调整策略。"
                },
                {
                    "domain": "哲学",
                    "analysis": "自主性学习不仅是一种技能，更是一种存在方式的体现——它要求学习者从被动接受者转变为自我立法的主体。这种转变呼应了康德‘敢于求知’（Sapere aude）的启蒙精神，强调理性自主与自我负责。",
                    "connection": "这与康德的‘自律’（Autonomie）概念相联系，即个体依据自我设定的理性法则行动，而非受外部权威或惯习驱使。"
                }
            ],
            "open_question": "在算法推荐和智能学习系统日益普及的背景下，自主性学习是否可能被技术中介所削弱？我们如何在利用技术提升效率的同时，保持并强化学习者的主体性和批判性思维？"
        },
        "processed_at": "2025-09-29T10:54:04.886233",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "信息检索类",
        "slug": "cuplk961g9d1wlae",
        "url": null,
        "published_at": "2025-09-27T04:24:39.000Z",
        "content": "信息检索是需要日常锻炼的，本周信息检索类分为两个分支，请选择一类进行针对性研究\n\n#### 爬虫分支\n过完国庆节就准备开始组织学爬虫\n\n选择本分支的同学要成为先行者，通过你们的努力，给大家科普一下，什么是爬虫\n\n供参考的检索方向：\n\n+ 找到一个适合新手的爬虫教程\n+ 找到一些适合新手去爬的网站\n+ 研究Python爬虫常用的包及其特点\n+ 明白常见的几种网站反扒策略\n+ 如何使用浏览器的F12控制台查看页面背后发生了什么\n+ 什么是IP地址池\n+ 什么是网页的Ajax技术\n+ 如何搞定呢喃的统一身份认证\n+ 其他你觉得感兴趣的相关知识点\n\n请撰写文档，给大家展现一个爬虫科普教程（不准光复制粘贴，太长的教程没人愿意看）\n\n#### LLM分支\n不可否认的是，LLM已经成为现在的你们的生活的一部分，几乎看不到不使用LLM的大一新生\n\n但是，在LLM使用的深度上，你们仍然存在较大的差异性，选择本分支的同学，请探索：\n\n+ 都有哪些好用的LLM（如选择本分支的同学>1，请协调分工研究）\n    - 文档中请附上注册方法、使用心得\n    - 建议突破自身常用的LLM范围，试一试其他的\n+ LLM使用需要有技巧的Prompt，请寻找Prompt撰写教程，并总结出一套常用的Prompt编写技巧\n+ 有一些通过LLM生成Prompt的套娃技巧，请找到并对比测试一下效果\n+ 请检索相关资料后，思考什么情况下适合使用LLM，什么情况下不适合使用LLM，边界在哪里\n+ 商用LLM会提供很多丰富的附加功能，如支持附件上传，支持提供页面url解析等等，请\n    - 测试其效果\n    - 思考这些LLM是如何实现这些功能的（不要光猜，通过检索来获得信息进行假设）\n    - 通过测试结果，结合具体的用户使用场景，撰写一份参考使用指南（如什么场景下，建议使用XXX）\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章将信息检索能力的培养分为爬虫与大语言模型（LLM）两个分支，鼓励学生根据兴趣选择方向进行深入探索。爬虫分支强调技术实操，如掌握基础工具、反爬机制和身份认证绕过；LLM分支则聚焦于模型使用技巧、Prompt工程、功能边界及实际应用场景。两者均要求学生主动检索、整合信息并输出原创性知识成果，体现信息素养在数字时代的重要性。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "文章隐含对‘知识获取方式’的反思：爬虫代表主动抓取与解构信息的技术路径，而LLM则体现依赖中介模型生成知识的被动性。这触及认识论中‘知识来源’与‘可信度’的问题——我们是通过直接接触原始数据获得真知，还是接受算法封装后的二手解释？",
                    "connection": "与海德格尔对‘技术作为解蔽方式’的论述相关，爬虫是‘促逼式解蔽’，而LLM可能导向‘遮蔽式便利’，削弱人对信息本源的追问。"
                },
                {
                    "domain": "社会学",
                    "analysis": "信息检索能力的分化映射出数字时代的‘认知阶层’：掌握爬虫技术者能穿透平台壁垒获取原始数据，而仅依赖LLM者则受限于商业模型的过滤与偏见。这种技能差异可能加剧信息获取的不平等，形成新的文化资本分野。",
                    "connection": "呼应布迪厄的‘文化资本’理论——信息检索技能成为当代大学生积累象征资本的关键手段，影响其在学术与职业场域中的位置。"
                }
            ],
            "open_question": "当LLM逐渐接管信息检索的‘前端交互’，而爬虫技术掌控‘后端数据获取’，人类在知识生产链条中的角色将如何演变？我们是否正在从‘求知者’转变为‘提示工程师’或‘数据猎人’？"
        },
        "processed_at": "2025-09-29T10:54:05.943179",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "工具技巧组-李知非",
        "slug": "knhhz89zibzu9lbw",
        "url": null,
        "published_at": "2025-09-26T11:19:43.000Z",
        "content": "呃，这周被cac点将了。所以写了个命题作文。\n\n## 我检索到的工具\n我推测cac的本意可能是为了方便引入统一身份认证，然后推荐的工具就是呢喃自有的两个工具。一个是问卷星南大版，一个就是njutable。多说一句啊。问卷星其实就是完整的充了会员的问卷星，只是可以从南大的端口用统一身份认证登录。然后nju table应该是基于一个叫sea table的东西做的。\n\n## 我准备学习的技巧\n~~（基于怎样的需求？想让技巧做到什么程度？能否实现？）~~\n\n因为已经有了既定的任务，所以我的第一目标就是把收集表这个操作实现。那我肯定要先了解。用这两个工具搭一个可用的表格的完整工作流。那么前面提到这两个工具都是我们南大自有的。所以e-science就贴心的给了很多指南。常见的方法技巧在这些指南上应该都会有所体现。我就不放链接了，指南都在很显眼的位置。\n\n## 我学习或使用的过程\n~~（描述开展过程，文字、链接、图片、录屏都可以的，也请在此部分写出遇到或主动提出的问题，展现思维，透露问题）~~\n\n承接上文，说到了两个工具都有相应的操作指南，但作为一个功能强大的工具，里面可以进行的操作是很多的，也就意味着指南的内容也是很多的。我认为为了完成一个任务，没有必要全面的了解他的所有功能。其实如果只是文字描述功能图片展示的话还好。但是njutable扩展性极强，甚至可以外接Python代码，对于我这种技术小白。实在是难以理解。然后我就开始向ds老师求助，让他给我搞一个傻瓜攻略。在nju table上面效果不理想。可能是因为这个工具比较小众，本身文字攻略不多。但是在问卷星效果非常好,完全不用读前面说的通用指南。只需要按照ds老师的讲解一步一步去做，就能完成这个项目。附一张图片。![](https://cdn.nlark.com/yuque/0/2025/jpeg/59349256/1758889773822-0ac66465-41b7-4ae9-a702-a5648644dd9c.jpeg)\n\n\n\n这里另起一段，讲述将初步的问卷雏形搭好以后，后续的调整完善过程。我应该这周中旬就把草稿交给cac了。然后小群里面的同学也帮我做了测试工作，发现了很多bug。因为我毕竟是第一次用这个问卷系统，然后做一个相对复杂的跳转。这里回顾一个比较经典的错误。第一个是因为我不熟悉跳题逻辑，我只规定了做了一道题，下一道题应该做哪道题？但其实应该禁止第一题选学习分支的同学再去选Python分支的子题目。这就导致存在一个人选择两个大类的可能。然后在跟cac讨论最终成品的时候，我们就同学们查看与自己选择相同分支的成员的方式交换了意见。我倾向于做excel表格来查看。但是这样的话，就要不断更新补交的同学。C希望我用动图的方式做一个指南。让同学们自己通过问卷星查看。\n\n## 总结分享\n~~（自由发挥的空间，也可选择不发挥）~~\n\n从我自己的角度来说，我这算是独立完成了一个小项目。首先你需要大致学习了解一个崭新的工具。然后做这个收集，其实远不止编辑问卷那几步。为了实现目的，应该怎样设计问卷结构，填写方式的改造（可修改，而非重填），其他成员填写情况的查看。我觉得这些部分是完成一个完整项目的重要组成部分，而且远比问卷本体的编辑更难。\n\n然后感谢工作组的全体同学和cac的指导帮助，他们在帮助粗心的我填补漏洞这件事情上，做出了巨大的贡献。\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了作者在完成一项使用南京大学自有工具（问卷星南大版与NJU Table）搭建信息收集表任务中的全过程。作者从初步学习工具、构建问卷结构，到调试跳题逻辑、协同测试修正漏洞，最终交付可用成果。他强调，项目难点不仅在于工具操作，更在于整体流程设计、协作反馈与持续迭代，体现出对数字工具在社会实践场景中复杂性的认知。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章揭示了低代码/无代码平台（如问卷星、SeaTable）在降低技术门槛的同时，仍需用户理解底层逻辑（如条件跳转、数据流控制）。这反映了人机交互中“抽象泄漏”现象——即使界面简化，复杂性仍会以错误或限制形式暴露给用户。",
                    "connection": "该过程与‘抽象泄漏定律’（Leaky Abstraction）密切相关，即所有非平凡的抽象在某种程度上都是有漏洞的，用户最终仍需理解其下层机制以应对异常。"
                },
                {
                    "domain": "社会学",
                    "analysis": "作者通过协作测试、反馈修正与功能协商（如用Excel还是动图指南），展现了技术工具如何嵌入社会关系网络中被共同塑造。工具不仅是中立媒介，更是协调群体认知与行动的社会装置。",
                    "connection": "这呼应了布鲁诺·拉图尔的‘行动者网络理论’（Actor-Network Theory），其中人类（同学、CAC）与非人类行动者（问卷系统、指南文档）共同构成实践网络，相互转译目标与功能。"
                }
            ],
            "open_question": "当教育机构推广‘统一身份认证+低代码工具’作为数字基础设施时，如何避免技术便利性掩盖了用户在认知负荷、协作成本与数据主权方面的隐性负担？"
        },
        "processed_at": "2025-09-29T10:54:06.334320",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python学习类-贺童谣",
        "slug": "pfh31tig9gykibfg",
        "url": null,
        "published_at": "2025-09-26T12:18:01.000Z",
        "content": "\n\n## 关于python，我在尝试\n#### <font style=\"color:rgb(0, 0, 0);\">分支 6：Python 数据操作</font>\n使用Python读取Excel表格中的数据是常见操作\n\n请探索使用openpyxl库实现对Excel表格的读写操作\n\nPandas是一个强大的数据分析库，它为Excel 数据提供了数据结构和方便的读写方法，请尝试使用它\n\n~~~~\n\n## 我提出或遇到的问题\n在分支任务中 我在pycharm中下载了openpyxl和pandas，随后我询问AI copy了一个读取excel的代码模板，\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59350150/1758890134538-67717b6c-80b7-447d-b5a0-5dad986dda2e.png)\n\n读取遇到excel中大量汉字内容时，该套用的简单代码无法读取所有数据，而直接出现NaN，豆包给出的相关可能的问题方面和解决办法还在尝试。\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59350150/1758890228429-d5b3ef5e-882d-4dea-a51d-2fc4ecf1c7b3.png)\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59350150/1758890410120-b4061555-fd70-4952-9eb7-8622ce8df630.png)\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59350150/1758890428016-0b1e9afb-ab16-4eef-b19a-d7de81f82c2f.png)\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59350150/1758890605705-b4b8ee77-cd26-4d3f-a0cc-bd3e091b0cf1.png)\n\n在读取时出现invalid问题，询问豆包后，我根据几种问题一一排查，发现是由左右斜杠引起该问题发生\n\n当更换为右斜杠时，代码就可行了\n\n## 一些总结又或许感悟\n![](https://cdn.nlark.com/yuque/0/2025/png/59350150/1758891108391-20957123-b6dd-423d-9073-c56038eb7210.png)\n\n在做这一分支任务时，出现了不少问题，AI确实可以快速地提供问题分析和多种有效解决方案。在我看来，对于用户所直接需求的结果，AI给出的代码往往无法全面地考虑各个方面的可行性，对于不同具体excel表格的不同具体方面或许是需要不同的代码去指定读取，但它能给用户相当多的不同场景代码演示，我觉得这在某种程度上对于像我一样的初学者学习是很有帮助的，当然，代码的可行性我觉得还是需要实际去演示，毕竟我一直使用AI，但之间的问题却也层出不穷。我在python方面的知识量还是太少，对于编程也是刚刚入门，大小问题都会有，在AI能够初期解决相对大的问题的时候，还需要自己去总结经验，规避一些新手常犯的小错误。\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位初学者在使用Python读取含大量汉字的Excel文件时遇到的技术问题，包括路径斜杠格式错误和数据读取为NaN等。作者通过AI辅助排查问题，最终意识到代码需根据具体数据结构调整，并强调实践验证与经验积累对编程学习的重要性，同时反思了AI在提供通用解决方案时的局限性。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "该文体现了编程实践中‘数据表示’与‘环境适配’的核心挑战。不同编码、路径格式或数据结构可能导致看似正确的代码失效，这揭示了计算系统对精确性的苛刻要求，也反映了抽象接口（如Pandas）与底层实现之间的张力。",
                    "connection": "这与‘抽象泄漏定律’（Leaky Abstraction Principle）密切相关——即使高级库如Pandas试图隐藏Excel读写的复杂性，底层细节（如文件路径、字符编码）仍会‘泄漏’并影响程序行为。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者对AI生成代码的依赖与反思，触及知识获取中‘工具中介性’的问题：AI作为认知延伸，虽能提供方案，但无法替代主体的实践判断。真正的理解诞生于错误调试与经验内化之中，而非被动复制。",
                    "connection": "这呼应了海德格尔‘上手状态’（Zuhandenheit）的概念——工具只有在使用中‘透明’地融入行动时才真正被掌握；当代码出错，工具‘显身’，迫使学习者从‘现成在手’回归到对技术本质的沉思。"
                }
            ],
            "open_question": "当AI能高效生成代码却无法替代人类对上下文的理解时，编程教育应如何重构以培养‘批判性技术实践者’而非‘提示词操作员’？"
        },
        "processed_at": "2025-09-29T10:54:21.472967",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python学习类-李佳骏",
        "slug": "sdcqn6ewf99fr7sl",
        "url": null,
        "published_at": "2025-09-26T09:14:07.000Z",
        "content": "## 行前有所思\n     这两天被问求的oj折磨坏了，但是也是在此过程中积累了一些用ai辅助编程的心得，但是问求要求的语言为c++，可能匀不出时间给c++，故可能python的学习会被耽误一点。但是编程的核心在于形式化问题的能力，具体的语法问题可以交给ai解决而暂时搁置，学习python，可能更专注于C++不具备的特性。即相较于当一门扎实的主课，我更愿意将其视做一个工具，通过ai代替一些繁琐的编程过程。\n\n## 关于python，我在尝试xxxx\n     关于Python，我在尝试使用ai辅助学习\n\n## 我提出或遇到的问题\n**先说ai工具**\n\n       gpt，ds，qwen-coder我都使用过，确实ai的编程能力让我这个小白叹为观止，如其强大的debug能力，输出代码的速度但是也有很多问题，个人体验比较好的是qwen（专门的代码模式加分不少0）（~~gpt要充钱，太穷了~~）\n\n**2.1利用ai来debug**\n\n我运用ai最多的场景就是debug，ai的优势是他会分析的特别细致，而且鉴于当前本人低下的代码能力，他能拓展出很多我不知道的内容，也就顺便了解了\n\n如以下例子：\n\n\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60789107/1758879672889-08bef260-e610-408c-a760-432c01db1524.png)\n\n但是我发现了非常多问题，首先ai形式化问题的能力有欠缺，会出错，还有就是会用一些不必要的方式来解（本人小白，看不懂太高级的）如下：\n\n![](https://cdn.nlark.com/yuque/0/2025/png/60789107/1758879972035-87e9808a-1bdc-4325-8aee-d9c7efe831d6.png)\n\n**2.3 解读实践组代码**~~（去触碰那禁忌的力量吧）~~\n\n```python\nimport requests  # 用于发送HTTP请求\nimport json      # 用于处理JSON数据\nimport os        # 用于操作系统路径和文件操作\nfrom collections import defaultdict  # 提供具有默认值的字典\nimport shutil    # 用于高级文件操作，如复制和删除目录树\n\n# --- 配置区域 ---\n# 请将此处替换为你的语雀API Token，用于身份验证\nYUQUE_TOKEN = '***'\n\n# 设置API请求头，包含认证信息\nheaders = {\n    'X-Auth-Token': YUQUE_TOKEN,\n}\n\n# 语雀实例的基础URL，通常为 https://<your_instance>.yuque.com\nlocation = 'https://nova.yuque.com'\n\n# 目标知识库的路径，格式为 /<命名空间>/<仓库名>\nrepos = '/ph25ri/ua1c3q'\n# --- 配置结束 ---\n\ndef get_content(doc_id):\n    \"\"\"\n    根据文档ID获取文档内容\n    参数:\n        doc_id: 语雀文档的唯一ID\n    返回:\n        包含文档详情的JSON对象，或在出错时返回None\n    \"\"\"\n    # 构造获取特定文档内容的API URL\n    url = f'{location}/api/v2/repos{repos}/docs/{doc_id}'\n    try:\n        # 发送GET请求获取文档内容\n        resp = requests.get(url, headers=headers)\n        # 检查响应状态码，如果不是2xx则抛出异常\n        resp.raise_for_status()\n        # 返回响应的JSON数据\n        return resp.json()\n    except requests.exceptions.RequestException as e:\n        # 捕获网络请求异常并打印错误信息\n        print(f\"获取文档ID {doc_id} 内容时出错: {e}\")\n        return None\n\n\ndef get_toc():\n    \"\"\"\n    获取知识库的目录结构（Table of Contents）\n    返回:\n        包含目录结构的JSON对象，或在出错时返回None\n    \"\"\"\n    # 构造获取目录结构的API URL\n    url = f'{location}/api/v2/repos{repos}/toc'\n    try:\n        # 发送GET请求获取目录\n        resp = requests.get(url, headers=headers)\n        # 检查响应状态码\n        resp.raise_for_status()\n        # 解析响应为JSON\n        toc = resp.json()\n        # 将获取到的目录结构保存到本地toc.json文件\n        with open('toc.json', 'w', encoding='utf-8') as f:\n            json.dump(toc, f, ensure_ascii=False, indent=2) # ensure_ascii=False 保证中文正确显示, indent=2美化格式\n        print(\"目录结构已保存到 toc.json\")\n        # 返回目录结构数据\n        return toc\n    except requests.exceptions.RequestException as e:\n        # 捕获网络请求异常并打印错误信息\n        print(f\"获取目录时出错: {e}\")\n        return None\n\n\ndef sanitize_filename(name):\n    \"\"\"\n    清理文件名，移除或替换可能导致操作系统问题的不合法字符\n    参数:\n        name: 原始文件名字符串\n    返回:\n        清理后的安全文件名字符串\n    \"\"\"\n    # 定义在Windows/Linux/Mac上通常不合法的文件名字符\n    illegal_chars = '<>:\"/\\\\|?*'\n    # 遍历这些字符，将它们替换为下划线 '_'\n    for char in illegal_chars:\n        name = name.replace(char, '_')\n    # 限制文件名长度，防止过长导致系统错误（这里限制为200字符）\n    if len(name) > 200:\n        name = name[:200]\n    return name\n\n\ndef create_folder_structure(json_data):\n    \"\"\"\n    根据语雀目录的JSON数据，在本地创建对应的文件夹结构，并下载文档内容\n    参数:\n        json_data: 从get_toc()获取的目录结构JSON数据\n    \"\"\"\n    # 检查输入数据类型，如果是字符串则尝试解析为JSON\n    if isinstance(json_data, str):\n        try:\n            data = json.loads(json_data)\n        except json.JSONDecodeError:\n            # 如果字符串不是有效的JSON格式，则报错\n            print(\"输入的JSON数据格式错误\")\n            return\n    else:\n        # 如果输入已经是字典或列表，则直接使用\n        data = json_data\n\n    # --- 构建数据结构 ---\n    # 创建一个字典，便于通过UUID快速查找节点信息\n    nodes = {}\n    # 创建一个默认值为列表的字典，用于存储每个节点的子节点UUID列表\n    children_map = defaultdict(list)\n\n    # 遍历目录数据，填充nodes和children_map\n    for item in data:\n        uuid = item['uuid']  # 获取当前项的唯一UUID\n        nodes[uuid] = item   # 将节点信息存入nodes字典\n        parent_uuid = item.get('parent_uuid') # 获取父节点UUID，使用.get()避免KeyError\n        if parent_uuid: # 如果存在父节点UUID\n            children_map[parent_uuid].append(uuid) # 将当前UUID添加到其父节点的子节点列表中\n\n    # 找出所有没有父节点的根节点（顶级目录项）\n    root_nodes = [item['uuid'] for item in data if not item.get('parent_uuid')]\n\n    # --- 递归创建文件夹和文件 ---\n    def create_folders_recursive(current_uuid, current_path):\n        \"\"\"\n        递归函数，用于创建单个节点对应的文件夹和文件，并处理其子节点\n        参数:\n            current_uuid: 当前处理节点的UUID\n            current_path: 当前处理节点在本地应创建的父路径\n        \"\"\"\n        # 获取当前节点的信息\n        node = nodes[current_uuid]\n        # 获取节点标题作为文件夹名，并进行安全处理\n        folder_name = sanitize_filename(node['title'])\n        # 构造当前节点的完整本地路径\n        folder_path = os.path.join(current_path, folder_name)\n        # 创建文件夹，如果已存在则不报错 (exist_ok=True)\n        os.makedirs(folder_path, exist_ok=True)\n\n        # 获取当前节点关联的文档ID\n        doc_id = node.get('id') # 使用.get()避免KeyError\n        # 检查是否存在文档ID且不为空\n        if doc_id and doc_id != '':\n            # 调用get_content函数获取文档内容\n            content_data = get_content(doc_id)\n            # 检查是否成功获取内容以及数据格式是否正确\n            if content_data and 'data' in content_data:\n                doc_data = content_data['data'] # 提取文档数据部分\n                # 获取文档标题并进行安全处理作为文件名\n                title = sanitize_filename(doc_data.get('title', 'untitled'))\n                # 获取文档正文内容\n                body = doc_data.get('body', '')\n                # 构造Markdown文件名\n                filename = f\"{title}.md\"\n                # 构造完整的文件路径\n                filepath = os.path.join(folder_path, filename)\n                try:\n                    # 以UTF-8编码写入文档正文到Markdown文件\n                    with open(filepath, 'w', encoding='utf-8') as f:\n                        f.write(body)\n                    # 打印成功信息\n                    print(f\"成功创建 {filepath}\")\n                except OSError as e:\n                    # 捕获文件写入异常并打印错误信息\n                    print(f\"写入文件 {filepath} 时出错: {e}\")\n            else:\n                # 如果获取内容失败或格式不正确，打印错误信息\n                print(f\"获取文档ID {doc_id} 的内容失败或格式不正确\")\n        else:\n            # 如果当前节点没有关联文档ID，仅创建文件夹\n            pass # 可能是一个纯目录节点\n\n        # --- 递归处理子节点 ---\n        # 遍历当前节点的所有子节点UUID\n        for child_uuid in children_map.get(current_uuid, []): # 使用.get()获取子节点列表，避免KeyError\n            # 递归调用自身，处理子节点，将当前创建的文件夹路径作为子节点的父路径\n            create_folders_recursive(child_uuid, folder_path)\n\n    # --- 主执行流程 ---\n    # 定义本地输出的根目录名\n    output_dir = \"社团活动\"\n    # 检查本地是否存在同名输出目录\n    if os.path.exists(output_dir):\n        # 如果存在，则删除整个旧目录及其内容\n        print(f\"删除旧的输出目录: {output_dir}\")\n        shutil.rmtree(output_dir)\n\n    # 创建新的输出根目录\n    os.makedirs(output_dir, exist_ok=True)\n    print(f\"开始创建目录结构到: {output_dir}\")\n    # 从每个根节点开始，启动递归创建过程\n    for root_uuid in root_nodes:\n        create_folders_recursive(root_uuid, output_dir)\n    print(\"文件下载和目录结构创建完成！\")\n\n\n# 程序入口点\nif __name__ == '__main__':\n    # 1. 获取仓库中的所有文档列表（可选步骤，主要用于获取元信息如总数）\n    docs_url = f'{location}/api/v2/repos{repos}/docs'\n    try:\n        # 发送GET请求获取文档列表\n        docs_resp = requests.get(docs_url, headers=headers)\n        # 检查响应状态码\n        docs_resp.raise_for_status()\n        # 解析响应为JSON\n        docs_data = docs_resp.json()\n        # 将文档列表保存到本地data.json文件\n        with open('data.json', 'w', encoding='utf-8') as f:\n            json.dump(docs_data, f, ensure_ascii=False, indent=2)\n        # 打印获取到的文档总数\n        print(f\"文档列表已保存到 data.json, 总计 {docs_data['meta']['total']} 个文档\")\n    except requests.exceptions.RequestException as e:\n        # 捕获网络请求异常并打印错误信息\n        print(f\"获取文档列表时出错: {e}\")\n        # 如果这一步失败，后续可能依赖这个变量的地方需要处理None的情况\n        docs_data = None\n\n    # 2. 获取目录结构并根据目录创建本地文件夹和下载文档\n    toc_data = get_toc() # 获取目录JSON数据\n    if toc_data: # 检查是否成功获取了目录数据\n        # 调用create_folder_structure函数，开始创建本地结构和下载\n        create_folder_structure(toc_data[\"data\"])\n    else:\n        # 如果无法获取目录结构，则无法继续执行，打印错误并退出\n        print(\"无法获取目录结构，程序终止。\")\n```\n\nai处理code的能力，能快速的帮助我们理解学习一些看起来很遥远的事情，实现跨越式的能力提升，我想的也是通过ai能快速让我上手一些python的项目，去做一些有用且好玩的事。\n\n## 一些总结或许感悟\nAI是很强大的工具，但是不能依赖，假如说coding如同耕种，那么AI就是新时代的联合收割机，转基因种子和氮肥。最终解决问题还是要靠自己~~（毕竟机试不能访问deepseek）~~\n\n重要的是思考如何解决问题，而AI可以帮我们补足现阶段缺失的代码能力\n\n~~~~\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章作者作为编程初学者，探讨了在C++学习压力下如何定位Python学习——将其视为辅助工具而非主修语言，并强调借助AI（如Qwen、GPT）提升编程效率，尤其在debug和理解复杂代码方面。作者通过实践语雀知识库同步脚本，体验了AI对代码解读与生成的强大能力，但也指出AI在问题形式化和解法适配性上的局限。最终主张AI是增强而非替代人类思考的工具，核心仍在于培养自身的问题建模与解决能力。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "作者将AI比作‘联合收割机’，隐含了技术工具与人类主体性之间的张力。这触及海德格尔对技术‘座架’（Gestell）的批判：当AI成为解题的默认中介，人可能遗忘‘思’的本质——即对问题本身的原初理解。作者警惕‘依赖’，实则是试图在工具理性中保留反思性实践的空间。",
                    "connection": "海德格尔的‘技术座架’理论"
                },
                {
                    "domain": "认知科学",
                    "analysis": "作者利用AI辅助理解代码，实质是将外部模型作为认知脚手架（cognitive scaffold），扩展自身有限的工作记忆与模式识别能力。这种‘分布式认知’策略体现了人机协同学习的新范式：AI不仅输出答案，更通过解释重构初学者的心智模型，加速从新手到胜任者的转变。",
                    "connection": "分布式认知理论（Distributed Cognition）"
                }
            ],
            "open_question": "当AI能高效完成代码生成与调试，计算机科学教育的核心应如何从‘语法掌握’转向‘问题形式化与计算思维’的培养？这是否会重塑我们对‘编程能力’的认知边界？"
        },
        "processed_at": "2025-09-29T10:54:24.422199",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python学习类-陈逸铭",
        "slug": "pkpylw287wy16x6i",
        "url": null,
        "published_at": "2025-09-26T07:09:18.000Z",
        "content": "## 行前有所思\n我是数字经济的专业的，因为学院为我们安排了相应的python课程，所以我决定在短期之内先上学校的python课，对于一些基本的代码规则有所了解即可，暂时不打算自己从外面找资源学习（也就是选择分支1，或许以后觉得学校里讲的知识结构不够好，可能会再去找资源）。\n\n至于关于分支2就是探索在AI的辅助下学习python的可能性，其实我觉得AI辅助是一个必然渗透在任何一个分支任何一个环节的选择，所以不想专门围绕这个分支展开。（我用AI编程和AI辅助下来的感受就是，哪怕在充分描述的情况下，他也无法完全贴近我们当下的水平，很容易动不动就用一些“超纲”的知识来解决问题）。\n\n综上，我选择了一个看上去很基础，但我觉得很重要的事就是熟练使用IDE，然后我询问了ds老师，了解到pycharm深度集成，开箱即用，设置难度低，重构能力强，相比之下vscode是轻量级通用编辑器，有一定的设置难度，重构能力也没有pycharm全面，所以在综合考虑下，我选择了分支3，就是熟练运用IDE pycharm。\n\n## 关于python，我在尝试分支3：熟练使用IDE-Pycharm\n#### 分支3：熟练使用IDE-Pycharm\nIDE用的好，用的熟练，会大大提升自己的编[链接](about:blank)程效率\n\n选择本分支的同学，请探索新手实用的Pycharm技巧（不少于10个）\n\n请通过录屏的方式展示技巧（点明你选择的分支，你的学习方向，你有哪些操作）\n\n\n\n#### 1.如何退出项目界面而不是退出pycharm\n第一次进入pycharm可以说是跌跌撞撞的，在完全不知道的情况下，随便新建了一个项目，然后也不知道它存在哪里，然而根据大模型的建议，都是要回到welcome界面进行设置，但是我点了右上角的叉，它就直接退出了pycharm，经过进一步询问，我才明白首先要在左上角四条杠里面点文件，然后选择关闭项目，然后再新建项目的时候可以修改地址，比如我把它存到了D盘，而不是挤在默认的C盘。\n\n[pycharm 回到welcome窗口.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758873329546-a9dc2a2e-1162-4648-a260-dea4dde1401d.mp4)\n\n\n\n#### 2.新建notebook、脚本和项目有什么区别\n（1）项目：工作间\n\n“只要准备写代码”就先建项目；否则 PyCharm 的很多功能（补全、跳转、调试、环境）都不可用或受限。一个窗口只能打开一个项目，但是项目可以管理整个开发生命周期：安装包，写代码，跑测试，打标签推github等等。同时，所有脚本，notebook，测试，文档，都必须落在项目的目录下才能被pycharm索引。\n\n（2）脚本 ：工作间里的一张图纸\n\n就是一个python文件，或者说是模块。\n\n（3）Notebook：工作间里的带草稿区的活页本\n\n适合边写边测试边看图的迭代流程，适合做数据分析，可视化，机器学习调参教学演示等。\n\n以上都是大模型给出的简要介绍，但是它总结最重要的一点就是，在新建项目以后，我们既可以新建脚本，又可以新建notebook。\n\n所以作为小白的我果断选择了新建项目。\n\n\n\n#### 3.万能搜索\n双击shift键，来到万能搜索界面，可以查到类、文件、符号、操作、文本等，不过，对于刚开始使用的我来说，最常用的还是查找操作，因为很多操作按照大模型给的路径会感觉没有这个选项（可能是pycharm版本的不同），但是在这个万能搜索里，就可以直接查到。以后如果文件多了，模块多了，也可以通过这个进行一键查找，非常方便。\n\n[pycharm 万能搜索.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758874675676-207aa680-3c41-40c5-9dcd-bfcd04c1ee31.mp4)\n\n\n\n#### 4.一键格式化（Ctrl+Alt+L）\nPyCharm 的“一键格式化”功能不仅整理缩进，还会：自动拆分 import，规范空格和空行对齐括号、引号修正类名（如  bar  →  Bar ）以符合 PEP8 命名规范（如果你启用了代码检查）——来自大模型\n\n据了解，它只是一个快捷方式，在设置里不能找到。以及经过我的反复询问，我发现使用这个快捷方式并不能做到自动拆分import，哪怕我已经按照kimi的要求在设置的代码样式界面勾选了始终拆分导入，以及在右下角缩进指示器检查是否有混合字样，最终发现需要使用另一个快捷方式（直接用就可以，不需要更改设置的任何内容），Ctrl+Alt+O，在选中一行后可以自动优化import，需要注意的是，导入的变量必须在文档中被使用，不然的话就会被自动删除。  \n这两个均可以在主菜单的代码里面找到，前者叫做“重新设置代码格式”，后者叫做“优化import”，需要注意的是，Ctrl+Alt+L表示重新设置代码格式，Ctrl+Alt+l却表示自动缩进行，也就是一个大小写的区别，不过简单来看，可以认为前者的功能比后者更高级，更全面，两者都是同一方面的功能。\n\n此外，我还发现，导入的代码在进入python时会实现符合自动缩进规范，而不需要任何的快捷方式（前提是语句语法本身没有什么错误，而是统一把两个空格的缩进变成了一个空格），不过总而言之，一键格式化的功能还是很多，很有帮助的，可以让代码按照PEP8的模式变得更加清晰明了。\n\n[pycharm 一键格式化.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758876107727-f4fc986c-31a7-4687-bb27-0ba822ac0126.mp4)\n\n\n\n#### 5.快速代码导航（Ctrl+点击）\nPython具有数量庞大，而且易于调用的第三方库，而且可以pip install（在pycharm中有更方便的下载方式，后面我也会提到）这也是它相对于C语言和JAVA等对于新手来说最友好的地方，我们不需要关注底层的细节配置，或者说自己找自己编一个库，而可以直接调用。\n\n然而，对于小白的我来说，可能用不到，但是在今后，我们总会有需要详细查看一个函数模块或者库的代码，Pycharm为我们提供了很好的方式，只需要按住ctrl键，用鼠标点击函数就可以直接跳出来了。\n\n[pycharm 快速代码导航.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758876932157-a6cc9ee3-e299-41c8-9daa-4b2a8d5f93fa.mp4)\n\n\n\n#### 6.智能代码补全（Tab）\n函数名会越来越多，第三方库也会越来越多，很多时候我们可能会忘记一个东西究竟是怎么拼，或者说想要在拼写的时候加快一点速度，这里pycharm给我们提供了很好的平台，比方说我们想输入print，在只输入了pr的时候，根据大模型的显示，我们需要点击ctrl+space，但实操下来并不需要，在py charm里面会直接跳出来相应的函数名print和其他的一些函数，这个时候只需要按Tab键就可以自动补全，Tab键位于键盘的大写锁定上方，顿号下方，如果要选择跳出来的相应函数，可以通过上下符号键移动。\n\n这个操作会大大节省我们敲代码的时间。\n\n[pycharm 智能代码补全.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758877254489-7a9682dc-3199-400a-8c3a-26645f67b599.mp4)\n\n\n\n#### 7.高效代码重命名（Shift+f6）\n这个就是一个常见的，可以在设置里找到的操作，快捷键只是让它更方便，但是我觉得作为新手而言并不需要记忆那么多，会用就可以。当重命名的时候，Pycharm会默认给文件中所有相同名字的东西的重命名，但是当我把avg重命名为avvg的时候，我发现重命名后avvg下面有波浪线，经过大模型的询问，我知道这是因为pycharm判断我命名的变量不像一个函数而为我做出的一个提醒，并不代表语法有问题。\n\n[pycharm 高效代码重命名.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758880282462-29bcce67-8740-4cbe-9f58-66f0e70129d6.mp4)\n\n#### 8. 选中多个同名变量\n同时，我突然想到了如果我想在同一个变量名中，仅仅更改部分位置，应该怎么办？\n\n在这里，我询问大模型，加上自己的尝试（这里大模型多次出错，有的是小问题，比方说因为pycharm版本不同导致，有些操作就是完全不能实现），最终总结出了下列方法：\n\n（1）全选，按住ctrl+alt+shift+j，这个可以在设置的按键映射里面查找，全名叫做“选择所有匹配项”，但我们有时候不需要全选，比方说我们要去掉其中一两个，我们只需要再按住ALT键的情况下，把鼠标光标点击到，我们所要取消的地方就会发现，它的选中已经取消了。\n\n（2）从上至下按顺序选中，比方说这个文件里一共有100个变量，但我只需要选中前20个，但我又要把其中的第12个给去掉，那我就可以首先选中第一个，然后按alt+j（这个也可以在设置里查找到，全名叫“将下一个匹配项添加到选择”），它就会一路选中下去，当然每选一次，要重新按一遍，如果想要取消的话，可以按alt+shift+j（取消选择匹配项），然而，这个效果并不是很好，因为它只能按照顺序取消上去（然而，大模型坚持认为它在取消这一行的同时，会自动跳到下一个，经过实测并不是这样，而是会返回到上一个，也就是说我如果仅仅利用这个操作，我永远无法在连续的多个同名变量中间删掉其中某一个），我更推荐再按住alt的情况下用鼠标点击来取消选择。\n\n（3）最朴素的方法，长按alt用鼠标一个一个选中，这当然是可以的，但这更加通用于想要修改不同变量的时候，如果修改的变量名相同，那么还是按照前两种方法可以取巧。\n\n对于这个技巧，我认为把快捷方式背下来是有必要的，一是因为常见，二是因为它无法在鼠标右键或者在左上角四条杠里面直接查找到，而是需要在设置里进行搜索，是非常麻烦的。\n\n[oycharm 选中多个同名变量.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758880333691-db7f27a0-a69e-4c17-a01f-9e876f84f906.mp4)\n\n\n\n#### 9.快速注释代码（Ctrl+/）\n当我们想要临时禁用一段代码进行测试，但不把它删除的时候，我们可以注释这一段代码，让它不起作用，等到测试完成后再取消注释。这个快捷方式是Ctrl+/，可以在主菜单的“代码”里面找到，全名叫做“使用行注释进行注释”。\n\n[pycharm 快速注释代码.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758884542488-1b2e3253-9220-45e7-840a-690878cc3a19.mp4)\n\n\n\n#### 10.快速复制和移动整行（Ctrl+D，Alt+shift+向上/下箭头）\n当我们想要快速复制和移动整行时，我们就可以分别按照上述快捷键进行操作。值得注意的是，这两个技巧可以分别在主菜单的“编辑”“代码”栏里看见，前者叫做“复制行”，后者叫做“向上/下移动行”，值得注意的是我尝试了还有一个叫做“向上/下移动语句”，是把当前光标所在的语法单元（一条语句、一个函数、一个类、一个代码块等）作为一个整体往上挪，让它与上一个同级的语法单元交换位置。它会做语法感知，保证移动后代码仍然合法，不会把一条语句拦腰截断，也不会把注释或括号拆散。  \n\n\n[pycharm 快速复制和移动.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758885579221-24ecc092-e5d0-4ecd-9811-042250ec8e58.mp4)\n\n\n\n#### 11.设置代码模板\n当我们如果想要在一个python文件的开头，固定的出现一些信息文字，比如创作人，时间，邮箱，具体描述、文件名等，那我们可以设置一个代码模板，我们可以打开设置，搜索“文件和代码模板”，选择python script，勾选启用实时模板（有一个按照样式重新设置格式，还是不勾选比较好，实测下来它可能会更换排版），我们会发现，默认模板是这样的：\n\n:::info\n# Created by ${USER} at ${DATE}\n\n:::\n\n此时我们可以进行修改，如改成：\n\n:::info\n@Author  : ${USER}\n\n@Email   : your_email@example.com\n\n@Time    : ${DATE} ${TIME}\n\n@Desc    : ${DESCRIPTION}\n\n@File    : ${NAME}.py\n\n:::\n\n最终点击确定，新建一个文件就可以看见模板文字出现在最上方了。\n\n[pycharm 代码模板.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758886047577-599eabd2-7731-46e4-a671-73f1982a43d7.mp4)\n\n\n\n#### 12.本地历史查找\n撤销快捷键（Ctrl+Z）是好用的，但如果我们先后编辑了多个文档后，或者退出重进以后，突然想把某一个文档撤回几步，这是很难实现的事情。此时我们可以从本地历史进行查找，当光标落在文档任意位置时，右键点开本地历史记录-显示历史记录，就可以查看到这个文档在过去做过的更改，这样回退到其中的任一版都很方便。\n\n[pycharm 本地历史.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758886301091-7a1c5692-d8bf-459e-8f84-1c51a87c2f7d.mp4)\n\n\n\n#### 13.展开和折叠代码块\n虽然对于新手小白的我来说，不需要考虑文件过于复杂的问题，但是到以后编写一个文件的代码开始有层次且繁复的时候，我们可能就有需求，要将代码的骨架更加清晰的展现出来，省略一些细节，通过宏观总结，帮助进一步撰写，此时我们就可以使用展开或折叠代码块功能。我们选中一块代码，右键选择折叠里面的收起，会发现代码，只将一些核心的步骤展现，比如def，而一些细节性的东西被省略了，想要恢复的话，就按同样的方法点击全部展开即可。\n\n[pycharm 展开和折叠代码块.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758886653579-6a59f45b-472c-4611-9885-d9c822fb8a7c.mp4)\n\n\n\n#### 14.分屏对比\n有时我们需要进行两个文件之间的对比或者复制粘贴，此时来回点击切换通常是麻烦的，我们可以使用分屏对比功能，右击需要分屏查看的另一个文件，选择在右侧部分拆分打开即可，值得注意的是，分屏不止可以分一块，还可以分好几块，想去掉的话直接点叉就行了。\n\n[pycharm 分屏对比.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758886883771-5ec66cef-12f1-451e-b411-d44335a2c2c0.mp4)\n\n\n\n#### 15.自定义背景\n这个功能与直接的Python编程无关，但我觉得这可以改善我们编程的心情，具体来说，点开设置的外观与行为，点击外观，我们可以调整主题、配色方案、字体、大小、甚至可以导入壁纸。\n\n[pycharm 自定义背景.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758887060875-11819175-9307-42bf-8607-db9ecb1c3fb8.mp4)\n\n\n\n#### 16.项目虚拟环境\n当我们在新建一个项目的时候，我们可以勾选自定义环境，这里它就会默认创建新的虚拟环境。而虚拟环境是Python的“独立房间”，把不同项目所需的库、版本隔离，避免全局污染。如A项目用Django 3，B项目用Django 4，各自装在虚拟环境里，互不干扰（如果不配置的话，在同一个环境中两个不同版本的库无法兼容）；删除项目只需删环境，系统干净，部署也一键复现。\n\n[pycharm 项目虚拟环境.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758887859584-fc7e4f15-8093-4484-b7ca-c1e6d00dfb5f.mp4)\n\n\n\n#### 17.安装第三方库\nPycharm提供便捷的第三方库安装方式。\n\n（1）我们可以在左下角的python软件包里查找进行安装（可以选择不同版本）。\n\n（2）可以在敲代码的时候，如果发现某个库并没有安装，就可以把光标放在上面，选择安装并导入软件包。\n\n（3）可以在左下角的终端里直接用pip命令进行安装。\n\n[pycharm 安装第三方库.mp4](https://nova.yuque.com/attachments/yuque/0/2025/mp4/60349199/1758888290343-641ea8be-cce4-416e-90cc-217540e82a99.mp4)\n\n\n\n## 我提出或遇到的问题\n因为一共有17个小技巧，所以遇到的问题和做出的尝试都分散在前面的记录中。\n\n## 一些总结又或许感悟\n感悟还是不少的，一个是关于碎片化学习的。就是我总结下来，我们在资料收集取舍和初步阅读的时候，可以很碎很碎，甚至说在食堂排队的时候，或者一边吃饭的时候，一边看都是可以的，甚至说是比较好的，我们或许只要简单做一个总结，甚至不总结也没关系。但是一旦到了实操阶段，我们的碎片化学习就一定要包括操作加总结的过程，我们必须及时记录我们学习的流程，犯过的错误和得到的结论。\n\n在本周的任务中，我就采取了一种不明智的方式，我在周一到周四分别录制好了17个小技巧的视频，但是最后在撰写语雀文档的时候，我却发现很多东西我无法不看视频弄出来的，就是说我对它的印象是模糊的，这导致我在编辑文档的时候，不得不把几乎所有的操作重新做一遍，这可以说大大浪费了我的时间。\n\n因此，一旦在重要的实操阶段，我们必须碎片化学习的同时，碎片化总结，最终才能让总结的东西渐渐搭建成一个体系。\n\n第二个是关于费曼学习法。我们为什么每周要进行分支任务的汇报？为什么要编辑语雀文档？仅仅是为了方便别人阅读，一起碰撞思维的火花吗？我发现并非如此，至少不仅仅如此，我们在用平白的语言记录自己的操作流程、所犯错误和解决方案时，其实也是在干一件事：简明、清晰的向一个几乎没有接触这一模块的人解释，如果他想按照我们的方法进行尝试的话，应该怎么做？在其中，他会遇到一些怎样的困难？有没有好的解决办法？这些困难是不是普适性的？是不是利用大模型经常无法得出正确答案呢？如果对方听不懂专业性的术语，我们应该怎样浅近地解释？\n\n这一切的一切与费曼学习法不谋而合。他旨在用简单的语言向他人解释复杂的概念，用输出倒逼输入，从而彻底理解知识。当我们只能通过对术语来进行文档撰写时，这就意味着我们对术语没有进行彻底理解。当我们语言含糊，逻辑不清晰，频频卡壳的进行阐述时，这就意味着我们的操作过程遇见了未能被我们熟练掌握的模块，当我们不能离开大模型的复制粘贴时，这意味着，我们对该知识的理解仅限于极其浅表的程度——甚至连背诵都达不到。‘因此，每周的文档撰写实际上也是对费曼学习法的最好诠释。\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位南京大学数字经济专业大一学生在Python学习初期对IDE（PyCharm）使用技巧的系统探索。作者主动选择聚焦于工具熟练度而非外部资源或AI辅助，通过实操总结了17项实用功能，涵盖项目管理、代码导航、格式化、虚拟环境等，并反思了碎片化学习在实操阶段的局限性，强调操作与即时总结的重要性。",
            "cross_disciplinary_insights": [
                {
                    "domain": "计算机科学",
                    "analysis": "文章体现了“工具即认知延伸”的理念——熟练使用IDE不仅提升效率，更塑造编程思维的结构。PyCharm的智能补全、重构、导航等功能实质上构建了一个“认知脚手架”，降低新手的认知负荷，使其能聚焦于问题逻辑而非语法细节。",
                    "connection": "这与“人机协同认知”（Human-Computer Symbiosis）理论相呼应，强调工具应内化为思维过程的一部分，而非仅是执行终端。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者对AI辅助学习的审慎态度揭示了技术中介中的“理解鸿沟”：AI虽能生成正确代码，却无法适配学习者的认知发展阶段。这触及认识论问题——知识的“可接受性”不仅关乎真值，更关乎与主体当前理解结构的契合度。",
                    "connection": "可联系维果茨基的“最近发展区”（Zone of Proximal Development）理论：有效学习需在现有能力与潜在能力之间搭建恰切的脚手架，而当前AI常越界至“超纲”区域，破坏学习节奏。"
                }
            ],
            "open_question": "当编程IDE日益智能化（如自动补全、错误预测、代码生成），我们应如何重新定义‘编程能力’？它是否正从‘语法掌握’转向‘问题建模与工具调度能力’？"
        },
        "processed_at": "2025-09-29T10:54:25.550860",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python学习类-钱锦",
        "slug": "xlovl6v63qlr7hk9",
        "url": null,
        "published_at": "2025-09-26T06:24:55.000Z",
        "content": "## 行前有所思\n分支一\n\n<font style=\"color:#F38F39;\">碎片化学习并不是抛弃传统的学习框架，相反，碎片化学习模式的要求更高！</font>\n\n<font style=\"color:#F38F39;\">因为你需要思考当前的碎片化学习内容，它与整体的关系是什么</font>\n\n<font style=\"color:#F38F39;\">第一周实践组的同学，在完成使用Python获取语雀文档的任务中，公开了一些源码</font>\n\n<font style=\"color:#F38F39;\">作为新手，很可能看不懂这些代码，想要系统性的学习瞻仰大神的学习内容，大概不知道该从哪里下手</font>\n\n<font style=\"color:#F38F39;\">基于我们推荐的PBL学习模式，如果你有能力可以知道这些代码里，具体包含了Python哪些章节哪些技巧（比如有人告诉你这段代码包含了：循环、判断、包的安装、函数、文件读写、List、基础语法格式等几部分内容），那么只要比照着教程上对应的章节，再去理解代码里具体每一行的意义，对于新手来说，学习的过程其实是可控的。所以碎片化学习有一个前提，就是要有意识先构建整体学习框架，并不断训练自己通过PBL的方式，提升精准定位当前学习内容的能力。</font>\n\n<font style=\"color:#F38F39;\"></font>\n\n<font style=\"color:#F38F39;\">选择本分支的同学，请结合自身实际情况，尝试构建自主性学习Python的学习框架，并和上周一样撰写文档，暴露自己的思维过程。学习框架不局限，你可以选择通过教材学习、视频学习、习题集学习，或者结合这些内容，或者补充你觉得更好的方式。</font>\n\n以上是本次分支一的内容，其中有关键词：碎片化、PBL、整体框架，可供我对当下的python学习展发思考。作为对C有一定基础，但对python了解不多的小白，我认为于我而言，在学习python这门新语言的过程中，类比是一种非常重要的思想——尽管两种语言在语法等方面有诸多不同，其内在逻辑架构有众多相似之处。在学习过程中，我可以采用边学边对照的方式，总结两者的相同与不同之处，强化学习效果。\n\n\n\n## 关于python，我在尝试xxxxx\n选择分支一，是因为我对python的唯一印象停留在浙江省技术学考（自然没有认真学），在基础不牢的时候施展三脚猫功夫去利用python解决问题十分困难且不合理的，故我决定从头学起。\n\n在装好python与pycharm后，我便通过网课进行学习，从最基础的变量、数据类型、逻辑框架、函数等学起，并借来同学的python课本进行阅读巩固，通过这种方法捡起了高中时期的部分记忆。在有一定概念后我也将其与C中的相关概念进行对照，在整理中进一步强化了所学内容。\n\n而空有相关概念始终让人感觉学习没有落于实处，我便用所学写了一些短小程序并进行运行调试，以巩固所学。\n\n此外，我还在寻找资料的过程中看了B站黑马程序员的关于python与AI大模型的一些视频——虽然我看不懂，但我大为震撼——\n\n遇到问题时，我尝试将问题抛给AI，让其替我解答，效果不错。综合来看，我将我对C的理解融入对python的学习中，以此构建学习框架，再通过教程、课本输入知识，通过实操巩固所学，再通过AI解决大部分问题，是一个可行可操作的学习流程。在初级阶段，这些途径能帮我解决绝大多数的问题，但到后期效果如何不得而知，一切仅能在学习实操中不断摸索调整。\n\n## 我提出或遇到的问题\n~~学的不多，所以问题产出也不是很多。。~~\n\n## 一些总结又或许感悟\n~~利用好一切可用的工具吧。编程语言的学习是个漫长的过程。~~\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章探讨了在Python学习初期如何有效结合碎片化学习与整体框架构建，强调PBL（项目式学习）模式下对知识模块的精准定位能力。作者结合自身C语言基础，通过类比、教材、网课、实操与AI工具，构建了一个多通道、可操作的Python入门学习路径，并反思了工具利用与学习阶段适配性的问题。",
            "cross_disciplinary_insights": [
                {
                    "domain": "认知科学",
                    "analysis": "文章中提到的通过类比C语言理解Python，体现了认知科学中的“图式迁移”机制——学习者利用已有知识结构（C语言的编程图式）来加速新知识（Python）的吸收与整合。这种策略有效降低了认知负荷，并促进了深层理解。",
                    "connection": "与认知科学中的“图式理论”（Schema Theory）密切相关，该理论认为人类通过已有知识框架来解释和整合新信息。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者强调在碎片化信息中主动构建整体框架，呼应了康德关于“知性为自然立法”的思想——知识并非被动接收，而是主体通过先验范畴主动组织经验。学习者需在混沌的代码片段中赋予其结构与意义，这正是认知主体性的体现。",
                    "connection": "与康德的认识论中“先验综合判断”概念相联系，强调主体在知识建构中的能动作用。"
                }
            ],
            "open_question": "在人工智能辅助学习日益普及的背景下，如何界定‘理解’与‘调用’的边界？当学习者依赖AI解释代码时，是否可能陷入‘认知外包’的陷阱，从而削弱深层思维能力的培养？"
        },
        "processed_at": "2025-09-29T10:54:30.495804",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "【温故知新1】开发环境配置",
        "slug": "gg82sgf1srixul84",
        "url": null,
        "published_at": "2025-09-26T09:31:18.000Z",
        "content": "Date: 2025.9.26\n\n### 请求库\n+ **requests**：属于第三仓库，阻塞式HTTP请求库\n+ **Selenium**：自动化测试工具，可以驱动浏览器执行特定的动作，如点击和下滑\n    - 针对<font style=\"color:#DF2A3F;\">JavaScript渲染的页面</font>十分有效渲染的页面十分有效\n+ **ChromeDriver**：驱动Chrome浏览器完成相关的操作（对接Selenium）\n+ **GeckoDriver**：驱动Firefox浏览器完成相关的操作（对接Selenium）\n+ **PhantomJS**：<font style=\"color:#DF2A3F;\">无界面</font>的且可脚本编程的Webkit浏览器引擎\n+ **aiohttp**：提供<font style=\"color:#DF2A3F;\">异步</font>Web服务的库\n\n### 解析库\n+ **lxml**：Python中的一个解析库，支持<font style=\"color:#DF2A3F;\">HTML</font>和<font style=\"color:#DF2A3F;\">XML</font>的解析，支持<font style=\"color:#DF2A3F;\">XPath</font>的解析方式，解析效率高\n+ **Beautiful Soup**：Python中的一个解析库，支持<font style=\"color:#DF2A3F;\">HTML</font>和<font style=\"color:#DF2A3F;\">XML</font>的解析，可方便提取网页数据，拥有强大的API和多样的解析方式\n+ **pyquery**：网页解析工具，提供类似于<font style=\"color:#DF2A3F;\">jQuery</font>的语法解析HTML文档，支持<font style=\"color:#DF2A3F;\">CSS选择器</font>，使用方便\n+ **tesserocr**：Python的一个OCR识别库，实质是对tesserocr（须先安装）做的一层PythonAPI封装\n    - **OCR**（<font style=\"color:#DF2A3F;\">光学字符识别</font>，指通过扫描字符，然后通过其形状将其翻译为电子文档的过程，可用于<font style=\"color:#DF2A3F;\">识别图形验证码</font>）\n\n### 数据库<font style=\"color:#DF2A3F;\"></font>\n+ <font style=\"color:#5C8D07;\">仅用于存储数据</font>\n+ <font style=\"color:#5C8D07;\">关系型数据库以表的形式储存，非关系型数据库以键值对的形式储存</font>\n+ **MySQL**：<font style=\"color:#DF2A3F;\">轻量级关系型数据库</font>\n+ **MongoDB**：<font style=\"color:#DF2A3F;\">非关系型数据库</font>，基于**分布式文件存储**的开源数据库系统\n+ **Redis**：<font style=\"color:#DF2A3F;\">非关系数据库</font>，基于**内存**\n\n### 存储库\n+ <font style=\"color:#5C8D07;\">Python存储库：使数据库内存储的数据可以与Python交互</font>\n+ **PyMySOL**：对接MySQL\n+ **PyMongo**：对接MongoDB\n+ **redis-py**：对接Redis\n+ **RedisDump**：用于<font style=\"color:#DF2A3F;\">Redis数据导入与导出</font>的工具，基于<font style=\"color:#DF2A3F;\">Ruby</font>（须先安装）实现\n\n### Web库\n+ <font style=\"color:#5C8D07;\">主要用于搭建供爬虫使用的API接口</font>\n+ **Flask**：轻量级Web服务程序，主要用于<font style=\"color:#DF2A3F;\">搭建API服务</font>\n+ **Tornado**：支持<font style=\"color:#DF2A3F;\">异步</font>的Web框架，使用<font style=\"color:#DF2A3F;\">非阻塞I/O流</font>，<font style=\"color:#DF2A3F;\">高效</font>支持大量<font style=\"color:#DF2A3F;\">开发连接</font>\n\n### APP爬取相关库<font style=\"color:#5C8D07;\"></font>\n+ <font style=\"color:#5C8D07;\">APP数据主要通过请求服务器接口获取，主要使用抓包技术来抓取数据</font>\n+ <font style=\"color:#5C8D07;\">简单接口可直接通过</font>**<font style=\"color:#5C8D07;\">Charles</font>**<font style=\"color:#5C8D07;\">或</font>**<font style=\"color:#5C8D07;\">mitmproxy</font>**<font style=\"color:#5C8D07;\">分析规律后</font><font style=\"color:#DF2A3F;\">使用程序模拟来抓取</font>\n+ <font style=\"color:#5C8D07;\">复杂接口需要使用</font>**<font style=\"color:#5C8D07;\">mitmdump</font>**<font style=\"color:#5C8D07;\">对接Python来</font><font style=\"color:#DF2A3F;\">对抓取到的数据和响应进行实时处理和保存</font>\n+ **Charles**：主要的<font style=\"color:#DF2A3F;\">移动端抓包工具</font>（须在PC端和手机端进行证书配置）\n+ **mitmproxy**：支持HTTP和HTTPS的抓包程序，通过控制台的形式操作\n    - **两个关联组件**： \n        * <font style=\"color:#DF2A3F;\">mitmdump</font>是mitmproxy的命令行接口，可以对接Python脚本实现监听后的处理\n        * <font style=\"color:#DF2A3F;\">mitmweb</font>是一个Web程序，用于观察mitmproxy捕获的请求\n+ **Appium**：<font style=\"color:#DF2A3F;\">移动端自动化测试工具</font>（类似于Selenium），驱动移动端设备完成自动化测试，如模拟点击、滑动、输入等操作\n\n### 爬虫框架\n+ <font style=\"color:#5C8D07;\">将程序内部的组件抽离出来，将各个功能</font>**<font style=\"color:#5C8D07;\">模块化</font>**<font style=\"color:#5C8D07;\">，形成爬虫框架</font>\n+ **<font style=\"color:#5C8D07;\">作用</font>**\n    1. <font style=\"color:#5C8D07;\">不用关心某些功能的具体实现，只需关心爬取逻辑</font>\n    2. <font style=\"color:#5C8D07;\">简化代码量，清晰化结构，提高爬取效率</font>\n+ **pyspider**\n    1. 带有强大的WebUI、脚本编辑器、任务监控器、项目管理器及结果处理器\n    2. 支持多种数据后端、多种消息队列\n    3. 支持JavaScript渲染页面的爬取\n+ **Scrapy**：功能强大，<font style=\"color:#DF2A3F;\">依赖的库较多</font>，在安装之前，须确保把一些基本库安装好\n    - 常备基本库：lxml，pyOpenSSL，Twisted，Pywin\n+ **Scrapy-Splash**：Scrapy中支持<font style=\"color:#DF2A3F;\">JavaScript渲染</font>的工具\n    - 安装Splash服务：通过Docker，安装后，可通过其接口实现JavaScript页面的加载\n    - 安装Scrapy-Splash的Python库\n+ **Scrapy-Redis**：Scrapy的<font style=\"color:#DF2A3F;\">分布式扩展模块</font>，有助于方便地实现Scrapy的<font style=\"color:#DF2A3F;\">分布式爬虫搭建</font>\n\n### 部署相关库\n+ **<font style=\"color:#5C8D07;\">分布式爬虫</font>**<font style=\"color:#5C8D07;\">：大规模爬取数据</font>\n+ **<font style=\"color:#5C8D07;\">方式</font>**<font style=\"color:#5C8D07;\">：使用拥有多个爬虫项目的多台主机</font>\n+ **<font style=\"color:#5C8D07;\">问题</font>**<font style=\"color:#5C8D07;\">：源代码只有一份，如何将一份代码同时部署到多台主机上来协同运行</font>\n+ **<font style=\"color:#5C8D07;\">解决方案</font>**\n    1. 使用Scrapy的插件**Scrapyd**，远程管理Scrapy任务（部署源码、启动任务、监听任务等）\n    2. **Docker集群部署**：将爬虫制作为Docker镜像，可直接运行爬虫，无需担心环境配置、版本问题\n+ **Docker**：\n    1. 一种<font style=\"color:#DF2A3F;\">容器技术</font>，将应用和环境等打包，形成一个独立的类似于ios的App形式的“应用”\n    2. 该“应用”可直接被发送到任意一个支持Docker的环境中\n    3. 使<font style=\"color:#DF2A3F;\">应用服务的部署</font>更加方便，轻量化<font style=\"color:#DF2A3F;\">应用服务的打包</font>\n    4. 可以让每个应用彼此<font style=\"color:#DF2A3F;\">相互隔离</font>\n    5. 比虚拟化技术更加<font style=\"color:#DF2A3F;\">节约资源</font>\n+ **Scrapyd**：**主要用于****Linux主机**，使用Scrapyd-Client和Scrapyd API可以更加方便高效地完成部署和监听操作\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "本文系统梳理了网络爬虫开发环境中的关键组件，涵盖请求库（如requests、Selenium）、解析库（如lxml、Beautiful Soup）、数据库（MySQL、MongoDB、Redis）及其Python接口、Web框架（Flask、Tornado）、APP抓包工具（Charles、mitmproxy）、爬虫框架（Scrapy、pyspider）以及部署方案（Docker、Scrapyd）。文章强调模块化、异步处理、JavaScript渲染支持和分布式部署等现代爬虫技术的核心要素，旨在为开发者提供高效、可扩展的数据采集基础设施。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "爬虫技术对网页内容的自动化提取与解析，本质上是一种对数字世界中‘表象’的解构与再诠释。工具如Selenium或Scrapy-Splash模拟人类浏览行为，触及‘感知’与‘理解’的边界——机器是否真正‘理解’其所抓取的内容？这呼应了现象学对‘直观’与‘意义赋予’的探讨。",
                    "connection": "海德格尔的‘此在’（Dasein）强调存在通过与世界互动而显现。爬虫作为技术代理，在无意识中‘遭遇’网页内容，却缺乏‘此在’的领会结构，凸显了人工智能在意义生成上的根本局限。"
                },
                {
                    "domain": "社会学",
                    "analysis": "大规模爬虫部署与数据采集实践，实质上重构了信息获取的权力结构。当个体或组织能通过分布式爬虫系统高效攫取公开数据时，传统信息守门人（如平台、媒体）的控制力被削弱，同时引发数据隐私、数字劳动与平台资本主义等议题。",
                    "connection": "布尔迪厄的‘场域’（field）理论可用来分析爬虫生态：数据成为新型资本，爬虫技术是争夺场域支配权的工具，而反爬机制则构成场域内的惯习（habitus）与规则，双方博弈塑造数字信息秩序。"
                }
            ],
            "open_question": "当爬虫技术日益逼近人类浏览与交互的复杂性时，我们应如何界定‘自动化访问’与‘数字主体性’之间的伦理边界？是否存在一种‘负责任的数据采集’哲学，既能保障信息自由流动，又尊重网络空间中的隐性社会契约？"
        },
        "processed_at": "2025-09-29T10:54:32.557092",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python学习类-黄梓轩",
        "slug": "syqur8sf99w2vy6a",
        "url": null,
        "published_at": "2025-09-26T08:41:13.000Z",
        "content": "## 行前有所思\n我发现我确实是一个有点懒和缺乏学习动力的人，也许如果不是这个任务，我基本上不会花太多课外时间研究这门编程语言，不过正好这个平台也是督促我自发进行学习，汲取其他同学学习经验的良好机会，我会努力跟上大部队的ヾ(◍°∇°◍)ﾉﾞ\n\n## 关于python，我在尝试xxxxx\n分支1，给自己构建一个学习python的框架。\n\n首先还是问了一下老朋友deepseek：\n\n第一阶段：基础奠基（1-2周）\n\n目标：掌握编程基本概念和Python语法\n\n• 变量、数据类型（整数、浮点数、字符串、布尔值）\n\n• 基本运算符和表达式\n\n• 输入输出（print、input）\n\n• 注释和代码规范\n\n第二阶段：流程控制（2-3周）\n\n目标：学会让程序做决策和重复任务\n\n• 条件语句（if/elif/else）\n\n• 循环（for、while）\n\n• 流程控制语句（break、continue、pass）\n\n第三阶段：数据结构（3-4周）\n\n目标：掌握Python核心数据结构\n\n• 列表（list） - 有序可变集合\n\n• 元组（tuple） - 有序不可变集合\n\n• 字典（dict） - 键值对映射\n\n• 集合（set） - 无序不重复元素\n\n第四阶段：函数与模块（2-3周）\n\n目标：学会代码组织和复用\n\n• 函数定义和调用\n\n• 参数传递（位置参数、关键字参数）\n\n• 返回值\n\n• 模块导入和使用\n\n目前我的学习方式依然是依然是遇到不会的东西就去问ds，（比如在上了第一节课后我去了解了课上用到的但没细讲的split（））函数的用法、网上学习到的但这种较为碎片的学习方式是可行的吗？直接脑子里记忆显然不现实，遇到一个记一个笔记感觉在日后复习和回忆的时候会显得比较乱 、不好翻找。此外，它能够帮助我搭建一个较为完整的思维吗？\n\n然后目前的打算是在课程之外的基础上学一些重要的第三方库（pandas）的用法（不得不感慨各项事情真的好多我每天就像一个无头苍蝇一样，时间规划能力还需很大的提升）\n\n## 我提出或遇到的问题\n我对比了一下python教材，deepseek的答案和b站上一些教程目录，发现其实后半段的学习流程基本上是相近的，但刚入门的内容相似程度较低，智p课程第一二节课与我在b站上听的网课内容似乎是从两个角度出发，智p课程的一开始显示学习了一些计算机的底层逻辑（如计算机对二进制和十六进制语言的转换（如果我没有理解错的话)（虽然我听得一知半解）)，而网络课程则是直接开始了一些简易编程函数（如input（）int（）chr() ord()），我不禁开始思考究竟怎样一种学习进程才能够为日后的python学习打下真正牢固的基础，在学习这门语言的时候有究竟需要怎么样一种思维模式。deepseek给出的答案是“理解基础概念 + 大量实践 + 持续反思”，这一点确实是很重要的，不过我认为还有一点是一定要把大问题拆分成可逐步解决，可提问的小问题，就比如学长曾问我“对本专业有什么不懂的问题，可以直接问出来”但我发现我当时就卡壳了，问不出任何一个问题。并非我没有问题，而是面对一个完全陌生的领域我根本不知道该如何发问、该问些什么。我感觉目前我对python的状态与上述例子很像，我依然在思考如何才算是有条理的学习。也许这就是要学习的“提问的智慧”？\n\n## 一些总结又或许感悟\n\n\n虽说是python学习类，但我目前看下来我过多地依然在思考如何学习，而真正意义上的学习部分并不多。得加快脚步了。\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位南京大学大一学生在学习Python初期的反思与探索。作者坦诚自己缺乏学习动力，但借助任务驱动和AI工具（如DeepSeek）构建了四阶段学习框架。他质疑碎片化学习是否有助于建立系统性思维，并对比不同教学路径（底层逻辑 vs. 实践函数）的优劣。核心困惑在于如何有效提问、拆解问题，以及建立有条理的学习方法，体现出对‘学习如何学习’的元认知关注。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "作者对‘如何提问’的困惑触及了认识论中的‘无知之知’问题。苏格拉底式诘问强调，真正的学习始于意识到自己的无知并能提出恰当问题。作者卡壳于无法提问，正反映了初学者在认知边界上的迷茫，而将大问题拆解为小问题，则是一种实践中的辩证思维训练。",
                    "connection": "苏格拉底的‘产婆术’（Maieutic method）强调通过提问引导思维，与作者反思‘提问的智慧’高度契合。"
                },
                {
                    "domain": "认知科学",
                    "analysis": "文章中提到的碎片化学习与系统性思维的张力，可从认知负荷理论理解。初学者若缺乏图式（schema），零散知识难以整合。作者试图通过构建学习框架来降低内在认知负荷，而反复实践与反思则有助于自动化基础技能，释放工作记忆资源用于高阶思维。",
                    "connection": "认知负荷理论（Cognitive Load Theory）解释了为何结构化学习路径比随机查询更利于长期知识建构。"
                }
            ],
            "open_question": "在人工智能辅助学习日益普及的背景下，如何设计一种既能激发自主提问能力、又能构建系统性知识结构的学习机制？"
        },
        "processed_at": "2025-09-29T10:54:41.484088",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python学习类-高竞宇",
        "slug": "zkut8i4ei55iiwgr",
        "url": null,
        "published_at": "2025-09-26T07:32:55.000Z",
        "content": "## 分支一：构建自主性学习Python学习的框架\n:::info\n**<u><font style=\"color:#117CEE;\">碎片化学习Python的第一要义——边做边学</font></u>**\n\n:::\n\n      当我们真的考虑碎片化学习一项<font style=\"color:#DF2A3F;\">技能</font>（而非<u>知识</u>）的时候，理解操作上的动机是教育者靠书籍，课程，或者其他任何媒体都不能简单教会新手的。\n\n      这不是因为教学者不够优秀，课程体系不够合理，而是一些用法在非实操的阶段很难具象化到技术细节。尤其是在大多数学习这很难抽出四十分钟以上的时间进行阶段性学习时，初学的片面性是必然。\n\n      举一个自己的例子，我曾经照抄某代码，但是在我自己的电脑上无论如何也无法运行，我对着书来回对照了好几遍（原谅当年的我还不认识报错代码），都未能找到问题所在。最后在同学帮助下发现竟然是if函数后面没有加“：”，我确实对于学习if函数有所用心，也对于纠错花了很长时间，但是还是未能找出错误。或者说，编程这件事，在初学阶段，真的需要手把手教的。\n\n      大多数同学没有办法被手把手教导，我的学习历程中，边做边学应用而生。\n\n##### <font style=\"color:#F3BB2F;\">关于python，我在尝试理解语法动机</font>\n      我最早是使用了一门三个小时的网课把Python做了入门，当然，这样速通是完全记不住的，但是这样的<font style=\"color:#DF2A3F;\">短期速通是必要的</font>，只有看过了Python的整体框架，才能把一些编程逻辑掌握，才能在正式的学习中抓住重点。毕竟，现在的情况下，面对需要系统学习的编程技能，碎片化学习不可避免，只有把握住了主题脉络与框架，才能有把她丰满起来的可能。\n\n      速通以后时间最充裕的方法其实是在去看一门足够细节，长度足够的教程或书籍，但是边做边学永远会让你清晰感受到易错点（甚至是一些初学者的奇葩点）。\n\n![](https://cdn.nlark.com/yuque/0/2025/png/59986504/1758875091542-d3dc3fa6-602b-48e0-9401-e38e5c3ff246.png)\n\n      我曾经犯过以上的错误，一是对于\"int\"\"float\"还不够熟悉，二是忽略str才能被打印这样的技术细节。针对这两个问题，前者可以通过尝试与纠错不断深化理解，后者更是靠练习才能掌握与熟悉。\n\n#### <font style=\"color:#FBDE28;\">我提出或遇到的问题</font>\n      说句实在话，我还没有能看懂代码报错的能力，主要是因为我现在编程自主性需求低，不是在自己做项目，而还是在做一些有正确答案的“题目”性质的学习。\n\n      我打算遇到自己感兴趣的事就跑个程序，多做一些没有正确答案的事情，在实践中（而非依靠查或AI）来学会这项技能。qwq\n\n#### <font style=\"color:#8CCF17;\">一些总结或感悟</font>\n      边做边学真的很有用！不管是文科，理科，体能，厨艺，人有动机驱动才真正能爆发潜力！\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章强调在碎片化学习背景下，Python等技能型知识必须通过‘边做边学’的方式掌握，而非依赖传统教学。作者以自身经历说明初学者难以仅靠阅读或听课理解技术细节，唯有在实践中暴露并解决错误，才能真正内化编程逻辑。短期速通有助于建立整体框架，而持续实践则能深化对语法动机和易错点的理解。最终，作者倡导通过自主项目激发学习动机，提升编程自主性。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "文章隐含了对‘知识’与‘技能’本体论差异的思考。编程作为一种实践性技能，其掌握依赖于具身经验与情境互动，而非纯粹的命题性知识。这呼应了现象学对‘在世存在’（being-in-the-world）的强调——真正的理解源于行动中的遭遇与调适，而非抽象符号的被动接收。",
                    "connection": "海德格尔的‘此在’（Dasein）概念：技能学习不是对规则的静态认知，而是在‘操劳’（concernful dealing）中展开的存在方式。"
                },
                {
                    "domain": "神经科学",
                    "analysis": "‘边做边学’契合神经可塑性原理：错误驱动的学习（error-driven learning）能强化突触连接，尤其在程序调试过程中，前额叶皮层与基底神经节协同参与错误检测与行为修正。反复试错不仅巩固语法记忆，还塑造了对代码结构的直觉性反应。",
                    "connection": "预测误差（prediction error）机制：编程中的报错信号作为负反馈，触发大脑更新内部模型，这与强化学习中的时序差分误差（TD error）机制高度相似。"
                }
            ],
            "open_question": "在人工智能辅助编程日益普及的今天，过度依赖AI生成代码是否会削弱学习者通过‘错误体验’构建深层理解的能力？如何设计人机协同的学习环境，既利用AI效率又保留必要的认知摩擦？"
        },
        "processed_at": "2025-09-29T10:54:48.203014",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python学习类-卢希",
        "slug": "tmpyx70v3wsgw57g",
        "url": null,
        "published_at": "2025-09-26T08:23:14.000Z",
        "content": "## 行前有所思\n让AI教我编程，帮我找到Bug原因，教我解读特定的代码，帮我分析一段陌生代码中的知识结构······\n\n听起来好诱人，但是在我的记忆里，呃，（由于我以前简单粗暴的提问方法）ds总是会生成一段非常长的答案，而这些答案中只有一小段才是我真正想要的。并且，ds有时会一本正经地胡说八道，给我错误的答案（比如，生成的历史人物作文素材里有很诡异的历史错误······），而我都用ds了，肯定懒得去仔细看这答案里有没有错啊······\n\n而开始上课之后，英语课上使用AI辅助学习，还有朋导的介绍，这些都让我感受到正确使用AI工具的重要性和潜在的好处。所以，关于AI的这条分支任务可以说是非常吸引我了。\n\n那么，我觉得我的学习任务其实是两个：Python基础学习和AI使用方法学习。\n\n对于Python基础学习，我决定直接借用别的同学整理的框架。对于AI使用方法，应该在B站上就能直接找到很多提问技巧的视频了（搜了一下，确实很多，这就需要我去选择和总结了）。\n\n对于使用的AI工具，我就决定使用最熟悉的ds了。\n\n## 关于python，我在尝试AI辅助学习\n我选择的是分支2\n\n### 准备工作\n根据其他同学的文档，我确定学习的内容是Python基础语法与基础数据结构\n\n现在看B站上的视频，总结一下向AI模型提问的技巧：\n\n+ 点明具体需求\n+ 要求输出文本的格式（可以要求用表格，也可以给AI一个模版）\n+ 设置输出文本长度（应该可以有效减少AI的废话了吧······）\n+ 提供必要的背景信息\n+ 及时反馈与修正\n+ 将复杂任务拆分为子任务\n+ 可以规定语气 \n+ 可以规定答案的信息来源\n\n### 生成训练习题\n我给ds的要求是：针对之前教程中的知识点，每个知识点为我生成三道题目，并附答案\n\n反思一下，要求还是不详细，ds自己为三道题目设计了由易到难的梯度，可是，实际上，这三道题的难度区别不大。题目类型单一并且过于简单（对于巩固基础知识点有用，但也就只能巩固基础知识点了）\n\n所以，我添加了要求：增加不一样的题目类型，要对新手来说具有挑战性的难度水平\n\n结果，ds设计的题目，从题型上讲，没有本质区别，但是更加侧重于综合运用，需要逻辑思考来完成程序的设计，游戏设计的形式也比较有趣味，可以让新手理解一些语法和数据结构的实际应用方式\n\n## 我提出或遇到的问题\n Q1：我是一个新手，想要学习Python的基础语法和基础数据结构，给我生成一个简洁易懂的教程（这是我对ds提出的问题）\n\n结果就是，ds的总结很明白，但是ds的回答没有解释基本概念和一些具体用法（可能过于简洁了，也有可能它理解中的新手是有一点基础的），继续提问补全（竟然意外出现了一些生动的教学啊······元组像固定套餐，字典像通讯录）\n\nQ2：我感觉让ds设计题目会比较难把控难度，还是感觉难以向AI表述生成题目的要求\n\n## 一些总结又或许感悟\n我感觉向AI提问仍然需要仔细思考，想出能让AI生成符合要求的回答需要耗费的精力也是比较多，AI生成的教程里不清楚和遗漏的地方也很多。这算是我在编程上应用AI的第一次尝试，第一次让AI给我布置作业（而不是写作业），感觉很有收获啊。\n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位南京大学大一学生在尝试使用AI（特别是ds）辅助学习Python基础语法与数据结构过程中的实践、反思与感悟。作者发现AI虽能生成教程与习题，但存在信息遗漏、难度控制不佳、内容冗余或错误等问题。通过调整提问策略（如明确需求、设定格式与长度、拆解任务等），AI输出质量有所提升。作者意识到有效使用AI本身是一项需学习的技能，并强调主动思考与反馈在人机协作学习中的关键作用。",
            "cross_disciplinary_insights": [
                {
                    "domain": "哲学",
                    "analysis": "文章揭示了人与AI在知识传递中的不对称关系：AI看似提供答案，实则依赖用户精准的提问框架。这呼应了苏格拉底式‘助产术’——知识并非灌输，而需通过恰当提问引导显现。用户必须具备元认知能力，才能在AI的‘胡说八道’与有用信息之间做出判断，体现了知识获取中的主体性责任。",
                    "connection": "苏格拉底诘问法（Socratic Method）"
                },
                {
                    "domain": "语言学",
                    "analysis": "作者不断优化对AI的指令语言（如指定格式、语气、背景），实质是在构建一种‘人机交际语用规则’。这反映了语言不仅是表达工具，更是塑造输出结构的框架。AI对模糊指令的误解，也凸显了自然语言中隐含前提与语境依赖的重要性，说明有效沟通需共享语义场。",
                    "connection": "语用学中的‘合作原则’（Grice's Cooperative Principle）"
                }
            ],
            "open_question": "当AI成为知识中介，学习者的认知结构会发生怎样的转变？我们是否正在从‘理解知识’转向‘理解如何向AI索取知识’，这种转变对教育本质意味着什么？"
        },
        "processed_at": "2025-09-29T10:54:48.478553",
        "llm_model": "qwen3-max"
    },
    {
        "source": "Yuque",
        "title": "Python学习类-廖子菡",
        "slug": "pk5r90f9hfmgf1ek",
        "url": null,
        "published_at": "2025-09-26T02:37:44.000Z",
        "content": "## 行前有所思\n~~~~错过了上周活动，感觉这次是一个很好的尝试开端，虽然作为编程小白，专业要求的c语言刚起步，又来接触py了，我也不知道自己能掌握多少，但终归都是要学习的，也希望自己有所收获，总结一下就是有点小兴奋和小担忧吧，先做下去看看\n\n## 关于python，我在尝试xxxxx\n~~~~**我这次选择的是分支一**，原因也比较简单，当我对某件事不太熟悉的时候，倾向于先用自己的方式去了解一下流程和明白怎么起步，先把大体要求copy过来\n\n<font style=\"color:#000000;\"></font>_<font style=\"color:#585A5A;\">构建自主性学习Python的学习框架</font>_\n\n_<font style=\"color:#585A5A;\">碎片化学习并不是抛弃传统的学习框架，相反，碎片化学习模式的要求更高！</font>_\n\n_<font style=\"color:#585A5A;\">因为你需要思考当前的碎片化学习内容，它与整体的关系是什么</font>_\n\n_<font style=\"color:#585A5A;\">第一周实践组的同学，在完成使用Python获取语雀文档的任务中，公开了一些源码</font>_\n\n_<font style=\"color:#585A5A;\">作为新手，很可能看不懂这些代码，想要系统性的学习瞻仰大神的学习内容，大概不知道该从哪里下手</font>_\n\n_<font style=\"color:#585A5A;\">基于我们推荐的PBL学习模式，如果你有能力可以知道这些代码里，具体包含了Python哪些章节哪些技巧（比如有人告诉你这段代码包含了：循环、判断、包的安装、函数、文件读写、List、基础语法格式等几部分内容），那么只要比照着教程上对应的章节，再去理解代码里具体每一行的意义，对于新手来说，学习的过程其实是可控的。所以碎片化学习有一个前提，就是要有意识先构建整体学习框架，并不断训练自己通过PBL的方式，提升精准定位当前学习内容的能力。</font>_\n\n_<font style=\"color:#585A5A;\">选择本分支的同学，请结合自身实际情况，尝试构建自主性学习Python的学习框架，并和上周一样撰写文档，暴露自己的思维过程。学习框架不局限，你可以选择通过教材学习、视频学习、习题集学习，或者结合这些内容，或者补充你觉得更好的方式。</font>_\n\n<font style=\"color:#000000;\">那么这就要求我先弄清楚我要学点什么，以下为我的py探路步骤</font>\n\n**<font style=\"color:#000000;\">一、查阅知乎哔站等平台 找到关于py入门的建议</font>**\n\n**<font style=\"color:#000000;\">网课资源</font>**<font style=\"color:#000000;\"></font>\n\n<font style=\"color:#000000;\">B站小甲鱼(讲的有趣，但练习需开通会员)</font>\n\n<font style=\"color:#000000;\">B站黑马(也比较多人推荐)</font>\n\n<font style=\"color:#000000;\">Mooc北理工嵩天老师(可用123python同步练习)</font>\n\n**<font style=\"color:#000000;\">二、基础配置</font>**\n\n<font style=\"color:#000000;\">由于我电脑上下载的c语言IDE是clion，还需要下载一个关于py运行的软件</font>\n\n<font style=\"color:#000000;\">常见的有vscode pycharm 考虑到我下载clion时已经认证过jetbrains 我选择了pycharm</font>\n\n决定直接开始跟着入门教程走 碰到相关问题再进一步求解 这里选择了黑马的教程 因为相关软件配置相同\n\n![](https://cdn.nlark.com/yuque/0/2025/jpeg/60270863/1758899264545-e24757b4-c21b-40da-ae41-5d1eb93197a4.jpeg)\n\n先下载了py官网里的翻译器 启用cmd初次尝试运行\n\n![](https://cdn.nlark.com/yuque/0/2025/jpeg/60270863/1758899446213-4e24ae95-f5bd-4c1b-961e-e333129612c0.jpeg)\n\n熟悉的你好世界 这里发现其跟c语言在严谨定义上会有差别 比如说少了分号阅读和初始化\n\n然后又了解到 其实pycharm这类IDE集成开发软件是为了更方便写代码(类似于word) 而py是一门语言\n\n![](https://cdn.nlark.com/yuque/0/2025/jpeg/60270863/1758900043865-7c3e80f8-fef7-4c9c-b38a-f584aec93e92.jpeg)\n\n现在就可以进行下一步学习啦😊\n\n**三、基础知识学习**\n\n**目的，先掌握基本规则 便于后续所谓碎片化学习**\n\n**因为跟c的入门基本同步前后进行 且二者确有互通之处 我想对两种语言在基础语法进行互相辨析联想 促进学习效率 以下是总结的区别以及注意事项**\n\n****\n\n**基本输出和字面量**\n\n这里先学习了基础的整数 浮点数 字符串 和c不同的地方在于 这三者只有最后一个print时括号内要加英文双引号(单引号 三引号也可以 后者需用变量接收 不然就是注释 但这个确实没必要了) \n\n前二者都是括号内直接输入就可打印 输出变量也不用占位符\n\n其输出类似于 print(\"   \"  ，变量   ，\"   \")逗号隔开 按顺序输出 且两侧会有空格\n\n如果不想要空格直接拼接 则改为＋变量＋即可(＋号就是拼接作用)\n\n****\n\n**注释** py中的注释分为 以# 开头的单行注释 和以\"\"\"xxx\"\"\"三引号主导的多行注释\n\n****\n\n**变量** 定义时无需前缀形式 等号连接即可 且前方的标识符 不可以数字开头 多个单词命名时 使用下划线更规范\n\n****\n\n**数据转换** 比如说我要把x换成整数 这边的操作是int(x) 跟c中的操作是差不多的 \"万物皆可转字符串 因为带上引号就是字符串 但是字符串转成数字 得保证内容都是数字\"\n\n****\n\n**运算符** 这里有新东西 如10**20 意为10的20次方 而且如果要整除的话 符号为// 跟c中整数除法/的运算规则相同\n\n****\n\n**占位符 **咦？学着学着发现还是有这个东西的 \n\n这里不同的是 多个变量占位的写法是…………%( a ，b)\n\n更优雅一点的方法 print(f\"……{变量}……\")快速格式化 怎么把printf分家了doge\n\n## 我提出或遇到的问题\n~~~~**一、关于anaconda**\n\n刚接触py的我阅读了上周的文档 其中有关于anaconda的内容 但我看的教程中没有提及 有点懵 于是就这样查阅了很久 很多教程都是骗关注的 也不是很详细 我一开始一直没懂这个有没有必要 所以略显崩溃 \n\n最后终于总结出 \"运行不同的程序需要的虚拟环境是不一样的(用不同的Python版本) 我需要对多种版本的Python循环的卸载安装，才能同时做多个项目 那么anaconda就是创建出虚拟环境，能让我同时并列运行程序的东西\"\n\n有一个很好的通俗比喻 **py就是你买的菜 IDE是厨房 而anaconda是冰箱 用来存放各种菜 **\n\n了解之后我便安装了此应用 (虽然初学可能暂时用不到) 还非常担心安装顺序是否会产生影响 \n\n![](https://cdn.nlark.com/yuque/0/2025/jpeg/60270863/1758900746199-d4426148-42f3-40c8-b418-7224304a2f2d.jpeg)\n\n如果我创造好新的环境 这里就可以选择 也可以在项目内 切换进而发挥它的意义 这个似乎有点复杂？ 但需要的时候就跟着一步步来吧\n\n## 一些总结又或许感悟\n1 这周主要是初步入一下门 感觉还是缺乏规划了 其实应该更有针对性的推进 而不是被ddl赶鸭子上架 \n\n有点小迷茫 来源于信息和资源太多 不知道从哪里下手 还没学到很深的部分 \n\n2 这种东西自学就是在有一点搞心态和有一点成就感之间横跳 而且学下来感觉py跟其他语言比起来比较简约和随意 各种约束都没有那么严格 \n\n3 后续的初步规划大概是每天抽点时间跟进并且自己上手简单的小练习 \n\n下周开始更进一步学习的时候 肯定会有更多问题 我想要试试上周活动文档里提到的的PBL模式 \n\n\n\n",
        "content_format": "Markdown",
        "llm_result": {
            "deep_summary": "文章记录了一位编程初学者在接触Python时的学习探索过程，强调通过构建整体学习框架来支撑碎片化学习，采用PBL（项目式学习）方法理解实际代码，并结合C语言进行对比学习。作者在资源选择、环境配置（如PyCharm、Anaconda）和基础语法理解中不断试错与反思，体现出对自主性学习路径的主动建构和对学习焦虑的坦诚面对。",
            "cross_disciplinary_insights": [
                {
                    "domain": "认知科学",
                    "analysis": "作者在学习Python时采用类比（如与C语言对比）、隐喻（如将Anaconda比作冰箱）和框架构建等策略，体现了人类认知中的图式建构与迁移学习机制。这种将新知识嵌入已有认知结构的过程，正是认知负荷理论所强调的有效学习路径。",
                    "connection": "与认知科学中的‘图式理论’（Schema Theory）密切相关，该理论认为学习是通过激活和重组已有知识结构来整合新信息。"
                },
                {
                    "domain": "哲学",
                    "analysis": "作者在面对技术不确定性时表现出的‘小兴奋与小担忧’，以及对学习自主性的追求，呼应了存在主义哲学中关于‘自我筹划’与‘本真性’的讨论。学习不仅是技能获取，更是主体在技术世界中确立自身位置的实践。",
                    "connection": "与海德格尔‘此在’（Dasein）概念相联系，强调个体在面对技术工具时的‘在世存在’与主动意义建构。"
                }
            ],
            "open_question": "在碎片化学习日益普遍的数字时代，如何通过技术工具与认知策略的协同设计，帮助初学者在保持学习自主性的同时，有效构建系统性知识框架？"
        },
        "processed_at": "2025-09-29T10:54:50.554983",
        "llm_model": "qwen3-max"
    }
]